# üìÑ Gerador de Ordens de Servi√ßo (OS)

import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Pt
import zipfile
from io import BytesIO
import time
import re
import datetime

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gerador de Ordens de Servi√ßo (OS)",
    page_icon="üìÑ",
    layout="wide",
)

# --- DEFINI√á√ÉO DE CONSTANTES GLOBAIS ---
UNIDADES_DE_MEDIDA = ["dB(A)", "m/s¬≤", "ppm", "mg/m¬≥", "%", "¬∞C", "lx", "cal/cm¬≤", "¬µT", "kV/m", "W/m¬≤", "f/cm¬≥", "N√£o aplic√°vel"]

# --- AGENTES DE RISCO ORGANIZADOS POR CATEGORIA ---
RISCOS_FISICO = sorted([
    "Ambiente Artificialmente Frio",
    "Exposi√ß√£o ao Ru√≠do",
    "Exposi√ß√£o √† Radia√ß√µes Ionizantes",
    "Exposi√ß√£o √† Radia√ß√µes N√£o-ionizantes",
    "Exposi√ß√£o √† Temperatura Ambiente Baixa",
    "Exposi√ß√£o √† Temperatura Ambiente Elevada",
    "Press√£o Atmosf√©rica Anormal (condi√ß√µes hiperb√°ricas)",
    "Umidade",
    "Vibra√ß√£o de Corpo Inteiro (AREN)",
    "Vibra√ß√£o de Corpo Inteiro (VDVR)",
    "Vibra√ß√µes Localizadas (m√£o/bra√ßo)"
])

RISCOS_QUIMICO = sorted([
    "Exposi√ß√£o a Produto Qu√≠mico",
    "Poeiras",
    "Fumos",
    "N√©voas", 
    "Neblinas",
    "Gases",
    "Vapores",
    "Produtos Qu√≠micos em Geral"
])

RISCOS_BIOLOGICO = sorted([
    "√Ågua e/ou alimentos contaminados",
    "Contamina√ß√£o pelo Corona V√≠rus",
    "Contato com Fluido Org√¢nico (sangue, hemoderivados, secre√ß√µes, excre√ß√µes)",
    "Contato com Pessoas Doentes e/ou Material Infectocontagiante",
    "Exposi√ß√£o √† Agentes Microbiol√≥gicos (fungos, bact√©rias, v√≠rus, protozo√°rios, parasitas)",
    "V√≠rus",
    "Bact√©rias",
    "Protozo√°rios",
    "Fungos",
    "Parasitas",
    "Bacilos"
])

RISCOS_ERGONOMICO = sorted([
    "Assento inadequado",
    "Ass√©dio de qualquer natureza no trabalho",
    "Cad√™ncia do trabalho imposta por um equipamento",
    "Compress√£o de partes do corpo por superf√≠cies r√≠gidas ou com quinas vivas",
    "Conflitos hier√°rquicos no trabalho",
    "Desequil√≠brio entre tempo de trabalho e tempo de repouso",
    "Dificuldades para cumprir ordens e determina√ß√µes da chefia relacionadas ao trabalho",
    "Eleva√ß√£o frequente de membros superiores",
    "Encosto do assento inadequado ou ausente",
    "Equipamentos e/ou m√°quinas sem meios de regulagem de ajustes ou sem condi√ß√µes de uso",
    "Equipamentos/mobili√°rio n√£o adaptados √† antropometria do trabalhador",
    "Esfor√ßo f√≠sico intenso",
    "Exig√™ncia de concentra√ß√£o, aten√ß√£o e mem√≥ria",
    "Exposi√ß√£o √† vibra√ß√£o de corpo inteiro",
    "Exposi√ß√£o √† vibra√ß√µes localizadas (m√£o, bra√ßo)",
    "Falta de autonomia para a realiza√ß√£o de tarefas no trabalho",
    "Flex√µes da coluna vertebral frequentes",
    "Frequente a√ß√£o de empurrar/puxar cargas ou volumes",
    "Frequente deslocamento √† p√© durante √† jornada de trabalho",
    "Frequente execu√ß√£o de movimentos repetitivos",
    "Ilumina√ß√£o inadequada",
    "Insatisfa√ß√£o no trabalho",
    "Insufici√™ncia de capacita√ß√£o para √† execu√ß√£o da tarefa",
    "Levantamento e transporte manual de cargas ou volumes",
    "Manuseio de ferramentas e/ou objetos pesados por longos per√≠odos",
    "Manuseio ou movimenta√ß√£o de cargas e volumes sem pega ou com \"pega pobre\"",
    "Mobili√°rio ou equipamento sem espa√ßo para movimenta√ß√£o de segmentos corporais",
    "Mobili√°rio sem meios de regulagem de ajustes",
    "Monotonia",
    "Necessidade de alcan√ßar objetos, documentos, controles, etc, al√©m das zonas de alcance ideais",
    "Necessidade de manter ritmos intensos de trabalho",
    "Piso escorregadio ou irregular",
    "Posto de trabalho improvisado/inadequado",
    "Posto de trabalho n√£o planejado/adaptado para √† posi√ß√£o sentada",
    "Postura em p√© por longos per√≠odos",
    "Postura sentada por longos per√≠odos",
    "Posturas inc√¥modas/pouco confort√°veis por longos per√≠odos",
    "Press√£o sonora fora dos par√¢metros de conforto",
    "Problemas de relacionamento no trabalho",
    "Realiza√ß√£o de m√∫ltiplas tarefas com alta demanda mental/cognitiva",
    "Reflexos que causem desconforto ou prejudiquem √† vis√£o",
    "Situa√ß√µes de estresse no local de trabalho",
    "Situa√ß√µes de sobrecarga de trabalho mental",
    "Temperatura efetiva fora dos par√¢metros de conforto",
    "Trabalho com necessidade de varia√ß√£o de turnos",
    "Trabalho com utiliza√ß√£o rigorosa de metas de produ√ß√£o",
    "Trabalho em condi√ß√µes de dif√≠cil comunica√ß√£o",
    "Trabalho intensivo com teclado ou outros dispositivos de entrada de dados",
    "Trabalho noturno",
    "Trabalho realizado sem pausas pr√©-definidas para descanso",
    "Trabalho remunerado por produ√ß√£o",
    "Umidade do ar fora dos par√¢metros de conforto",
    "Uso frequente de alavancas",
    "Uso frequente de escadas",
    "Uso frequente de for√ßa, press√£o, preens√£o, flex√£o, extens√£o ou tor√ß√£o dos segmentos corporais",
    "Uso frequente de pedais",
    "Velocidade do ar fora dos par√¢metros de conforto"
])

RISCOS_ACIDENTE = sorted([
    "Absor√ß√£o (por contato) de subst√¢ncia c√°ustica, t√≥xica ou nociva",
    "Afogamento, imers√£o, engolfamento",
    "Aprisionamento em, sob ou entre",
    "Aprisionamento em, sob ou entre desabamento ou desmoronamento de edifica√ß√£o, estrutura, barreira, etc",
    "Aprisionamento em, sob ou entre dois ou mais objetos em movimento (sem encaixe)",
    "Aprisionamento em, sob ou entre objetos em movimento convergente",
    "Aprisionamento em, sob ou entre um objeto parado e outro em movimento",
    "Arestas cortantes, superf√≠cies com rebarbas, farpas ou elementos de fixa√ß√£o expostos",
    "Ataque de ser vivo (inclusive humano)",
    "Ataque de ser vivo com pe√ßonha",
    "Ataque de ser vivo com transmiss√£o de doen√ßa",
    "Ataque de ser vivo por mordedura, picada, chifrada, coice, etc",
    "Atrito ou abras√£o",
    "Atrito ou abras√£o por corpo estranho no olho",
    "Atrito ou abras√£o por encostar em objeto",
    "Atrito ou abras√£o por manusear objeto",
    "Atropelamento",
    "Batida contra objeto parado ou em movimento",
    "Carga Suspensa",
    "Colis√£o entre ve√≠culos e/ou equipamentos autopropelidos",
    "Condi√ß√µes clim√°ticas adversas (sol, chuva, vento, etc)",
    "Contato com objeto ou subst√¢ncia a temperatura muito alta",
    "Contato com objeto ou subst√¢ncia a temperatura muito baixa",
    "Contato com objeto ou subst√¢ncia em movimento",
    "Desabamento/Desmoronamento de edifica√ß√£o, estrutura e/ou materiais diversos",
    "Elementos M√≥veis e/ou Rotativos",
    "Emerg√™ncias na circunvizinhan√ßa",
    "Equipamento pressurizado hidr√°ulico ou pressurizado",
    "Exposi√ß√£o √† Energia El√©trica",
    "Ferramentas el√©tricas",
    "Ferramentas manuais",
    "Gases/vapores/poeiras (t√≥xicos ou n√£o t√≥xicos)",
    "Gases/vapores/poeiras inflam√°veis",
    "Impacto de pessoa contra objeto em movimento",
    "Impacto de pessoa contra objeto parado",
    "Impacto sofrido por pessoa",
    "Impacto sofrido por pessoa, de objeto em movimento",
    "Impacto sofrido por pessoa, de objeto projetado",
    "Impacto sofrido por pessoa, de objeto que cai",
    "Inc√™ndio/Explos√£o",
    "Ingest√£o de subst√¢ncia c√°ustica, t√≥xica ou nociva",
    "Inala√ß√£o de subst√¢ncia t√≥xica/nociva",
    "Inala√ß√£o, ingest√£o e/ou absor√ß√£o",
    "Objetos cortantes/perfurocortantes",
    "Pessoas n√£o autorizadas e/ou visitantes no local de trabalho",
    "Portas, escotilhas, tampas, \"bocas de visita\", flanges",
    "Proje√ß√£o de Part√≠culas s√≥lidas e/ou l√≠quidas",
    "Queda de pessoa com diferen√ßa de n√≠vel > 2m",
    "Queda de pessoa com diferen√ßa de n√≠vel ‚â§ 2m",
    "Queda de pessoa com diferen√ßa de n√≠vel de andaime, passarela, plataforma, etc",
    "Queda de pessoa com diferen√ßa de n√≠vel de escada (m√≥vel ou fixa)",
    "Queda de pessoa com diferen√ßa de n√≠vel de material empilhado",
    "Queda de pessoa com diferen√ßa de n√≠vel de ve√≠culo",
    "Queda de pessoa com diferen√ßa de n√≠vel em po√ßo, escava√ß√£o, abertura no piso, etc",
    "Queda de pessoa em mesmo n√≠vel",
    "Rea√ß√£o do corpo a seus movimentos (escorreg√£o sem queda, etc)",
    "Soterramento",
    "Subst√¢ncias t√≥xicas e/ou inflam√°veis",
    "Superf√≠cies, subst√¢ncias e/ou objetos aquecidos",
    "Superf√≠cies, subst√¢ncias e/ou objetos em baixa temperatura",
    "Tombamento de m√°quina/equipamento",
    "Tombamento, quebra e/ou ruptura de estrutura (fixa ou m√≥vel)",
    "Trabalho √† c√©u aberto",
    "Trabalho com m√°quinas e/ou equipamentos",
    "Trabalho com m√°quinas port√°teis rotativas",
    "Trabalho em espa√ßos confinados",
    "Vidro (recipientes, portas, bancadas, janelas, objetos diversos)"
])

# Dicion√°rio para mapear categorias aos riscos
AGENTES_POR_CATEGORIA = {
    'fisico': RISCOS_FISICO,
    'quimico': RISCOS_QUIMICO,
    'biologico': RISCOS_BIOLOGICO,
    'ergonomico': RISCOS_ERGONOMICO,
    'acidente': RISCOS_ACIDENTE
}

CATEGORIAS_RISCO = {
    'fisico': 'üî• F√≠sicos',
    'quimico': '‚öóÔ∏è Qu√≠micos', 
    'biologico': 'ü¶† Biol√≥gicos',
    'ergonomico': 'üèÉ Ergon√¥micos',
    'acidente': '‚ö†Ô∏è Acidentes'
}

# --- CSS PERSONALIZADO ---
st.markdown("""
<style>
    .main {
        padding-top: 0rem;
    }
    
    .stApp > header {
        background-color: transparent;
    }
    
    .block-container {
        padding-top: 2rem;
        padding-bottom: 0rem;
        padding-left: 1rem;
        padding-right: 1rem;
    }
    
    h1 {
        color: #1f2937;
        text-align: center;
        font-size: 2.5rem;
        margin-bottom: 1rem;
    }
    
    .upload-box {
        background-color: #f8fafc;
        border: 2px dashed #3b82f6;
        border-radius: 0.5rem;
        padding: 2rem;
        text-align: center;
        margin: 1rem 0;
    }
    
    .success-box {
        background-color: #f0fdf4;
        border: 1px solid #bbf7d0;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .warning-box {
        background-color: #fefce8;
        border: 1px solid #fde047;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .info-box {
        background-color: #eff6ff;
        border: 1px solid #93c5fd;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .metric-container {
        background-color: white;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
        padding: 1rem;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .metric-container h3 {
        color: #1f2937;
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }
    
    .metric-container p {
        color: #6b7280;
        font-size: 0.9rem;
        margin: 0;
    }
    
    .stButton > button {
        width: 100%;
        border-radius: 0.5rem;
        border: none;
        padding: 0.75rem 1rem;
        font-weight: 500;
        transition: all 0.2s;
    }
    
    .stButton > button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .stSelectbox > div > div {
        border-radius: 0.5rem;
    }
    
    .stTextInput > div > div {
        border-radius: 0.5rem;
    }
    
    .stTextArea > div > div {
        border-radius: 0.5rem;
    }
    
    .stMultiSelect > div > div {
        border-radius: 0.5rem;
    }
    
    .streamlit-expanderHeader {
        background-color: #f8fafc;
        border-radius: 0.5rem;
        border: 1px solid #e5e7eb;
    }
    
    .streamlit-expanderContent {
        border: 1px solid #e5e7eb;
        border-top: none;
        border-radius: 0 0 0.5rem 0.5rem;
    }
</style>
""", unsafe_allow_html=True)

# --- FUN√á√ïES AUXILIARES ---
def create_sample_data():
    """Cria dados de exemplo para demonstra√ß√£o"""
    sample_data = {
        'Nome': ['JO√ÉO SILVA SANTOS', 'MARIA OLIVEIRA COSTA', 'PEDRO ALVES FERREIRA'],
        'Setor': ['PRODUCAO DE LA DE ACO', 'ADMINISTRACAO DE RH', 'MANUTENCAO QUIMICA'],
        'Fun√ß√£o': ['OPERADOR PRODUCAO I', 'ANALISTA ADM PESSOAL PL', 'MECANICO MANUT II'],
        'Data de Admiss√£o': ['15/03/2020', '22/08/2019', '10/01/2021'],
        'Empresa': ['SUA EMPRESA', 'SUA EMPRESA', 'SUA EMPRESA'],
        'Unidade': ['Matriz', 'Matriz', 'Matriz'],
        'Descri√ß√£o de Atividades': [
            'Operar equipamentos de produ√ß√£o n√≠vel I, controlar par√¢metros operacionais, realizar inspe√ß√µes visuais e registrar dados de produ√ß√£o.',
            'Executar atividades de administra√ß√£o de pessoal, controlar documentos trabalhistas, elaborar relat√≥rios e dar suporte √†s equipes.',
            'Executar manuten√ß√£o preventiva e corretiva em equipamentos, diagnosticar falhas, trocar componentes e registrar interven√ß√µes.'
        ]
    }
    return pd.DataFrame(sample_data)

def validate_excel_structure(df):
    """Valida se a planilha tem a estrutura necess√°ria"""
    required_columns = ['Nome', 'Setor', 'Fun√ß√£o', 'Data de Admiss√£o', 'Empresa', 'Unidade', 'Descri√ß√£o de Atividades']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        return False, f"Colunas obrigat√≥rias faltando: {', '.join(missing_columns)}"
    
    if df.empty:
        return False, "A planilha est√° vazia"
    
    return True, "Estrutura v√°lida"

def gerar_documento_os(dados_funcionario, agentes_risco, epis, medidas_preventivas, observacoes, template_doc=None):
    """
    Gera a Ordem de Servi√ßo com base nos dados fornecidos
    """
    try:
        # Usar template personalizado se fornecido, sen√£o criar um padr√£o
        if template_doc:
            doc = template_doc
        else:
            doc = Document()
        
        # Se for um template novo, adicionar estrutura b√°sica
        if not template_doc:
            # T√≠tulo
            titulo = doc.add_heading('ORDEM DE SERVI√áO', 0)
            titulo.alignment = 1  # Centralizado
            
            # Subt√≠tulo
            subtitulo = doc.add_paragraph('Informa√ß√µes sobre Condi√ß√µes de Seguran√ßa e Sa√∫de no Trabalho - NR-01')
            subtitulo.alignment = 1
            
            doc.add_paragraph()  # Espa√ßo
        
        # Informa√ß√µes do Funcion√°rio
        info_func = doc.add_paragraph()
        info_func.add_run(f"Empresa: {dados_funcionario.get('Empresa', '')}\t\t")
        info_func.add_run(f"Unidade: {dados_funcionario.get('Unidade', '')}")
        
        info_func2 = doc.add_paragraph()
        info_func2.add_run(f"Nome do Funcion√°rio: {dados_funcionario.get('Nome', '')}")
        
        info_func3 = doc.add_paragraph()
        info_func3.add_run(f"Data de Admiss√£o: {dados_funcionario.get('Data de Admiss√£o', '')}\t\t")
        
        info_func4 = doc.add_paragraph()
        info_func4.add_run(f"Setor de Trabalho: {dados_funcionario.get('Setor', '')}\t\t")
        info_func4.add_run(f"Fun√ß√£o: {dados_funcionario.get('Fun√ß√£o', '')}")
        
        doc.add_paragraph()  # Espa√ßo
        
        # Tarefas da Fun√ß√£o
        doc.add_heading('TAREFAS DA FUN√á√ÉO', level=1)
        doc.add_paragraph(dados_funcionario.get('Descri√ß√£o de Atividades', 'Atividades relacionadas √† fun√ß√£o exercida.'))
        
        # Agentes de Riscos Ocupacionais
        if agentes_risco:
            doc.add_heading('AGENTES DE RISCOS OCUPACIONAIS', level=1)
            
            for categoria, riscos in agentes_risco.items():
                if riscos:  # Se h√° riscos nesta categoria
                    categoria_titulo = categoria.replace('_', ' ').title()
                    doc.add_heading(f'Riscos {categoria_titulo}', level=2)
                    
                    for risco in riscos:
                        risco_para = doc.add_paragraph()
                        risco_para.add_run(f"‚Ä¢ {risco['agente']}")
                        if risco.get('intensidade'):
                            risco_para.add_run(f": {risco['intensidade']}")
                        if risco.get('unidade'):
                            risco_para.add_run(f" {risco['unidade']}")
        
        # EPIs Obrigat√≥rios
        if epis:
            doc.add_heading('EQUIPAMENTOS DE PROTE√á√ÉO INDIVIDUAL (EPIs)', level=1)
            for epi in epis:
                doc.add_paragraph(f"‚Ä¢ {epi}", style='List Bullet')
        
        # Medidas Preventivas
        if medidas_preventivas:
            doc.add_heading('MEDIDAS PREVENTIVAS E DE CONTROLE', level=1)
            for medida in medidas_preventivas:
                doc.add_paragraph(f"‚Ä¢ {medida}", style='List Bullet')
        
        # Procedimentos de Emerg√™ncia
        doc.add_heading('PROCEDIMENTOS EM SITUA√á√ïES DE EMERG√äNCIA', level=1)
        emergencia_texto = """
‚Ä¢ Comunique imediatamente o acidente √† chefia imediata ou respons√°vel pela √°rea;
‚Ä¢ Preserve as condi√ß√µes do local de acidente at√© a comunica√ß√£o com a autoridade competente;
‚Ä¢ Procure atendimento m√©dico no ambulat√≥rio da empresa ou servi√ßo m√©dico de emerg√™ncia;
‚Ä¢ Siga as orienta√ß√µes do Plano de Emerg√™ncia da empresa;
‚Ä¢ Registre a ocorr√™ncia conforme procedimentos estabelecidos.
        """
        doc.add_paragraph(emergencia_texto.strip())
        
        # Grave e Iminente Risco
        doc.add_heading('ORIENTA√á√ïES SOBRE GRAVE E IMINENTE RISCO', level=1)
        gir_texto = """
‚Ä¢ Sempre que constatar condi√ß√£o de grave e iminente risco, interrompa imediatamente as atividades;
‚Ä¢ Comunique de forma urgente ao seu superior hier√°rquico;
‚Ä¢ Aguarde as provid√™ncias necess√°rias e autoriza√ß√£o para retorno;
‚Ä¢ √â direito do trabalhador recusar-se a trabalhar em condi√ß√µes de risco grave e iminente.
        """
        doc.add_paragraph(gir_texto.strip())
        
        # Observa√ß√µes Adicionais
        if observacoes:
            doc.add_heading('OBSERVA√á√ïES COMPLEMENTARES', level=1)
            doc.add_paragraph(observacoes)
        
        # Nota Legal
        doc.add_paragraph()
        nota_legal = doc.add_paragraph()
        nota_legal.add_run("IMPORTANTE: ").bold = True
        nota_legal.add_run(
            "Conforme Art. 158 da CLT e NR-01, o descumprimento das disposi√ß√µes "
            "sobre seguran√ßa e sa√∫de no trabalho sujeita o empregado √†s penalidades "
            "legais, inclusive demiss√£o por justa causa."
        )
        
        # Assinaturas
        doc.add_paragraph()
        doc.add_paragraph("_" * 40 + "\t\t" + "_" * 40)
        doc.add_paragraph("Funcion√°rio\t\t\t\t\tRespons√°vel pela √Årea")
        doc.add_paragraph(f"Data: {datetime.date.today().strftime('%d/%m/%Y')}")
        
        return doc
        
    except Exception as e:
        st.error(f"Erro ao gerar documento: {str(e)}")
        return None

def main():
    # T√≠tulo principal
    st.markdown("# üìÑ Gerador de Ordens de Servi√ßo (OS)")
    st.markdown("### Sistema para gera√ß√£o automatizada de OS conforme NR-01")
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.markdown("## üìã Informa√ß√µes do Sistema")
        
        st.markdown(f"""
        **Funcionalidades:**
        - ‚úÖ Upload de planilha Excel
        - ‚úÖ **{sum(len(riscos) for riscos in AGENTES_POR_CATEGORIA.values())} riscos** ocupacionais
        - ‚úÖ Gera√ß√£o individual ou em lote
        - ‚úÖ Conformidade com NR-01
        - ‚úÖ Download autom√°tico
        """)
        
        st.markdown("## üìä Base de Riscos")
        for categoria, nome in CATEGORIAS_RISCO.items():
            qtd_riscos = len(AGENTES_POR_CATEGORIA[categoria])
            st.markdown(f"- {nome}: **{qtd_riscos}** op√ß√µes")
        
        st.markdown("## üìÅ Estrutura da Planilha")
        st.markdown("""
        **Colunas obrigat√≥rias:**
        - Nome
        - Setor
        - Fun√ß√£o
        - Data de Admiss√£o
        - Empresa
        - Unidade
        - Descri√ß√£o de Atividades
        """)
        
        # Bot√£o para baixar planilha exemplo
        sample_df = create_sample_data()
        sample_buffer = BytesIO()
        sample_df.to_excel(sample_buffer, index=False)
        sample_buffer.seek(0)
        
        st.download_button(
            "üì• Baixar Planilha Exemplo",
            data=sample_buffer.getvalue(),
            file_name="modelo_funcionarios.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
    
    # Se√ß√£o de Upload de Arquivos
    st.markdown("## üì§ Upload de Arquivos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="upload-box">
            <h4>üìä Planilha de Funcion√°rios</h4>
            <p>Fa√ßa upload da planilha Excel com os dados dos funcion√°rios</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_excel = st.file_uploader(
            "Selecione a planilha Excel (.xlsx)",
            type=['xlsx'],
            help="A planilha deve conter todas as colunas obrigat√≥rias listadas na barra lateral"
        )
    
    with col2:
        st.markdown("""
        <div class="upload-box">
            <h4>üìÑ Template de OS (Opcional)</h4>
            <p>Fa√ßa upload do seu template personalizado de Word</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_template = st.file_uploader(
            "Selecione o template Word (.docx) - Opcional",
            type=['docx'],
            help="Se n√£o fornecido, ser√° usado o template padr√£o do sistema"
        )
    
    # Processar planilha se foi carregada
    if uploaded_excel is not None:
        try:
            # Carregar e validar planilha
            df = pd.read_excel(uploaded_excel)
            is_valid, message = validate_excel_structure(df)
            
            if not is_valid:
                st.markdown(f"""
                <div class="warning-box">
                    <h4>‚ö†Ô∏è Erro na Valida√ß√£o da Planilha</h4>
                    <p>{message}</p>
                    <p>Por favor, corrija a planilha e fa√ßa upload novamente.</p>
                </div>
                """, unsafe_allow_html=True)
                return
            
            # Mostrar sucesso e estat√≠sticas
            st.markdown(f"""
            <div class="success-box">
                <h4>‚úÖ Planilha Carregada com Sucesso!</h4>
                <p>Foram encontrados <strong>{len(df)}</strong> funcion√°rios na planilha.</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Exibir estat√≠sticas
            st.markdown("### üìä Estat√≠sticas da Planilha")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f"""
                <div class="metric-container">
                    <h3>{len(df)}</h3>
                    <p>üë• Funcion√°rios</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="metric-container">
                    <h3>{df['Setor'].nunique()}</h3>
                    <p>üè¢ Setores</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="metric-container">
                    <h3>{df['Fun√ß√£o'].nunique()}</h3>
                    <p>üíº Fun√ß√µes</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                st.markdown(f"""
                <div class="metric-container">
                    <h3>{df['Empresa'].nunique()}</h3>
                    <p>üè≠ Empresas</p>
                </div>
                """, unsafe_allow_html=True)
            
            # Sele√ß√£o de Funcion√°rios
            st.markdown("## üë• Sele√ß√£o de Funcion√°rios")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Filtro por setor
                setores_disponiveis = ['Todos os setores'] + sorted(df['Setor'].dropna().unique().tolist())
                setor_selecionado = st.selectbox(
                    "üè¢ Filtrar por Setor:",
                    setores_disponiveis,
                    help="Selecione um setor espec√≠fico ou mantenha 'Todos os setores'"
                )
                
                # Filtrar dataframe baseado no setor
                if setor_selecionado == 'Todos os setores':
                    df_filtrado = df
                else:
                    df_filtrado = df[df['Setor'] == setor_selecionado]
            
            with col2:
                # Modo de sele√ß√£o
                modo_selecao = st.radio(
                    "üìã Modo de Sele√ß√£o:",
                    ["Funcion√°rio Individual", "M√∫ltiplos Funcion√°rios", "Todos do Setor Filtrado"],
                    help="Escolha como deseja selecionar os funcion√°rios para gerar as OS"
                )
            
            # L√≥gica de sele√ß√£o baseada no modo escolhido
            funcionarios_selecionados = []
            
            if modo_selecao == "Funcion√°rio Individual":
                funcionario_individual = st.selectbox(
                    "üë§ Selecione o funcion√°rio:",
                    [''] + df_filtrado['Nome'].tolist(),
                    help="Escolha um funcion√°rio espec√≠fico"
                )
                if funcionario_individual:
                    funcionarios_selecionados = [funcionario_individual]
            
            elif modo_selecao == "M√∫ltiplos Funcion√°rios":
                funcionarios_selecionados = st.multiselect(
                    "üë• Selecione m√∫ltiplos funcion√°rios:",
                    df_filtrado['Nome'].tolist(),
                    help="Escolha v√°rios funcion√°rios mantendo Ctrl pressionado"
                )
            
            else:  # Todos do setor
                funcionarios_selecionados = df_filtrado['Nome'].tolist()
                if funcionarios_selecionados:
                    st.info(f"üìù Ser√£o geradas OS para todos os {len(funcionarios_selecionados)} funcion√°rios do setor filtrado.")
            
            # Mostrar funcion√°rios selecionados
            if funcionarios_selecionados:
                st.success(f"‚úÖ {len(funcionarios_selecionados)} funcion√°rio(s) selecionado(s) para gera√ß√£o de OS")
                
                # Configura√ß√£o de Riscos e Medidas
                st.markdown("## ‚ö†Ô∏è Configura√ß√£o de Riscos Ocupacionais")
                
                # Inicializar session state se necess√°rio
                if 'agentes_risco' not in st.session_state:
                    st.session_state.agentes_risco = {categoria: [] for categoria in CATEGORIAS_RISCO.keys()}
                if 'epis_selecionados' not in st.session_state:
                    st.session_state.epis_selecionados = []
                if 'medidas_preventivas' not in st.session_state:
                    st.session_state.medidas_preventivas = []
                
                # Configura√ß√£o de Agentes de Risco por categoria
                st.markdown("### üîç Agentes de Riscos por Categoria")
                
                for categoria_key, categoria_nome in CATEGORIAS_RISCO.items():
                    qtd_opcoes = len(AGENTES_POR_CATEGORIA[categoria_key])
                    with st.expander(f"{categoria_nome} ({qtd_opcoes} op√ß√µes dispon√≠veis)", expanded=False):
                        st.markdown(f"**Configurar {categoria_nome}**")
                        
                        col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
                        
                        with col1:
                            agente_selecionado = st.selectbox(
                                "Agente de Risco:",
                                ['Selecione...'] + AGENTES_POR_CATEGORIA[categoria_key],
                                key=f"agente_{categoria_key}"
                            )
                        
                        with col2:
                            intensidade = st.text_input(
                                "Intensidade/Valor:",
                                key=f"intensidade_{categoria_key}",
                                placeholder="Ex: 85"
                            )
                        
                        with col3:
                            unidade = st.selectbox(
                                "Unidade:",
                                UNIDADES_DE_MEDIDA,
                                key=f"unidade_{categoria_key}"
                            )
                        
                        with col4:
                            if st.button(f"‚ûï Adicionar", key=f"add_{categoria_key}"):
                                if agente_selecionado != 'Selecione...':
                                    novo_risco = {
                                        'agente': agente_selecionado,
                                        'intensidade': intensidade,
                                        'unidade': unidade
                                    }
                                    st.session_state.agentes_risco[categoria_key].append(novo_risco)
                                    st.success(f"‚úÖ Risco {categoria_nome.lower()} adicionado!")
                                    st.rerun()
                        
                        # Mostrar riscos j√° adicionados
                        if st.session_state.agentes_risco[categoria_key]:
                            st.markdown("**Riscos configurados:**")
                            for idx, risco in enumerate(st.session_state.agentes_risco[categoria_key]):
                                col1, col2 = st.columns([5, 1])
                                with col1:
                                    risco_text = f"‚Ä¢ {risco['agente']}"
                                    if risco['intensidade']:
                                        risco_text += f": {risco['intensidade']}"
                                    if risco['unidade'] and risco['unidade'] != 'N√£o aplic√°vel':
                                        risco_text += f" {risco['unidade']}"
                                    st.write(risco_text)
                                with col2:
                                    if st.button("üóëÔ∏è", key=f"remove_{categoria_key}_{idx}", help="Remover este risco"):
                                        st.session_state.agentes_risco[categoria_key].pop(idx)
                                        st.rerun()
                
                # Configura√ß√£o de EPIs
                st.markdown("### ü•Ω Equipamentos de Prote√ß√£o Individual (EPIs)")
                
                col1, col2 = st.columns([4, 1])
                with col1:
                    novo_epi = st.text_input(
                        "Adicionar EPI:",
                        placeholder="Ex: Capacete de seguran√ßa, √ìculos de prote√ß√£o, etc."
                    )
                with col2:
                    if st.button("‚ûï Adicionar EPI"):
                        if novo_epi.strip():
                            st.session_state.epis_selecionados.append(novo_epi.strip())
                            st.success("‚úÖ EPI adicionado!")
                            st.rerun()
                
                # Mostrar EPIs configurados
                if st.session_state.epis_selecionados:
                    st.markdown("**EPIs configurados:**")
                    for idx, epi in enumerate(st.session_state.epis_selecionados):
                        col1, col2 = st.columns([5, 1])
                        with col1:
                            st.write(f"‚Ä¢ {epi}")
                        with col2:
                            if st.button("üóëÔ∏è", key=f"remove_epi_{idx}", help="Remover este EPI"):
                                st.session_state.epis_selecionados.pop(idx)
                                st.rerun()
                
                # Configura√ß√£o de Medidas Preventivas
                st.markdown("### üõ°Ô∏è Medidas Preventivas e de Controle")
                
                col1, col2 = st.columns([4, 1])
                with col1:
                    nova_medida = st.text_area(
                        "Adicionar Medida Preventiva:",
                        placeholder="Ex: Realizar pausas programadas durante a jornada de trabalho...",
                        height=80
                    )
                with col2:
                    st.write("")  # Espa√ßo
                    st.write("")  # Espa√ßo  
                    if st.button("‚ûï Adicionar Medida"):
                        if nova_medida.strip():
                            st.session_state.medidas_preventivas.append(nova_medida.strip())
                            st.success("‚úÖ Medida preventiva adicionada!")
                            st.rerun()
                
                # Mostrar medidas configuradas
                if st.session_state.medidas_preventivas:
                    st.markdown("**Medidas preventivas configuradas:**")
                    for idx, medida in enumerate(st.session_state.medidas_preventivas):
                        col1, col2 = st.columns([5, 1])
                        with col1:
                            # Mostrar apenas os primeiros 100 caracteres
                            medida_resumida = medida[:100] + "..." if len(medida) > 100 else medida
                            st.write(f"‚Ä¢ {medida_resumida}")
                        with col2:
                            if st.button("üóëÔ∏è", key=f"remove_medida_{idx}", help="Remover esta medida"):
                                st.session_state.medidas_preventivas.pop(idx)
                                st.rerun()
                
                # Observa√ß√µes Complementares
                st.markdown("### üìù Observa√ß√µes Complementares")
                observacoes = st.text_area(
                    "Informa√ß√µes adicionais para incluir nas OS:",
                    placeholder="Ex: Informa√ß√µes espec√≠ficas do setor, procedimentos especiais, etc.",
                    height=100
                )
                
                # Bot√£o para gerar OS
                st.markdown("## üöÄ Gerar Ordens de Servi√ßo")
                
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    if st.button(
                        f"üìÑ GERAR {len(funcionarios_selecionados)} ORDEM(NS) DE SERVI√áO",
                        type="primary",
                        use_container_width=True
                    ):
                        # Carregar template se fornecido
                        template_doc = None
                        if uploaded_template:
                            try:
                                template_doc = Document(uploaded_template)
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è Erro ao carregar template personalizado: {str(e)}. Usando template padr√£o.")
                        
                        # Preparar dados para gera√ß√£o
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        documentos_gerados = []
                        
                        # Processar cada funcion√°rio selecionado
                        for idx, nome_funcionario in enumerate(funcionarios_selecionados):
                            status_text.text(f"üîÑ Gerando OS para: {nome_funcionario}")
                            
                            # Buscar dados do funcion√°rio
                            dados_funcionario = df_filtrado[df_filtrado['Nome'] == nome_funcionario].iloc[0].to_dict()
                            
                            # Gerar documento
                            doc = gerar_documento_os(
                                dados_funcionario=dados_funcionario,
                                agentes_risco=st.session_state.agentes_risco,
                                epis=st.session_state.epis_selecionados,
                                medidas_preventivas=st.session_state.medidas_preventivas,
                                observacoes=observacoes,
                                template_doc=template_doc
                            )
                            
                            if doc:
                                # Salvar documento em buffer
                                buffer = BytesIO()
                                doc.save(buffer)
                                buffer.seek(0)
                                
                                documentos_gerados.append({
                                    'nome': nome_funcionario.replace(' ', '_').replace('/', '_'),
                                    'buffer': buffer
                                })
                            
                            # Atualizar progresso
                            progress_bar.progress((idx + 1) / len(funcionarios_selecionados))
                            time.sleep(0.1)  # Pequena pausa para visualiza√ß√£o
                        
                        status_text.text("‚úÖ Gera√ß√£o conclu√≠da!")
                        
                        # Disponibilizar downloads
                        if documentos_gerados:
                            if len(documentos_gerados) == 1:
                                # Download √∫nico
                                st.success(f"‚úÖ Ordem de Servi√ßo gerada com sucesso!")
                                st.download_button(
                                    label="üì• Download da Ordem de Servi√ßo",
                                    data=documentos_gerados[0]['buffer'].getvalue(),
                                    file_name=f"OS_{documentos_gerados[0]['nome']}.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    use_container_width=True
                                )
                            else:
                                # Download em lote (ZIP)
                                st.success(f"‚úÖ {len(documentos_gerados)} Ordens de Servi√ßo geradas com sucesso!")
                                
                                # Criar arquivo ZIP
                                zip_buffer = BytesIO()
                                with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                                    for doc_info in documentos_gerados:
                                        zip_file.writestr(
                                            f"OS_{doc_info['nome']}.docx",
                                            doc_info['buffer'].getvalue()
                                        )
                                
                                zip_buffer.seek(0)
                                
                                st.download_button(
                                    label=f"üì• Download de {len(documentos_gerados)} Ordens de Servi√ßo (ZIP)",
                                    data=zip_buffer.getvalue(),
                                    file_name=f"Lote_OS_{datetime.date.today().strftime('%d%m%Y')}.zip",
                                    mime="application/zip",
                                    use_container_width=True
                                )
                        else:
                            st.error("‚ùå Erro: Nenhum documento foi gerado. Verifique as configura√ß√µes.")
        
        except Exception as e:
            st.markdown(f"""
            <div class="warning-box">
                <h4>‚ùå Erro no Processamento</h4>
                <p>Ocorreu um erro ao processar a planilha: <code>{str(e)}</code></p>
                <p>Verifique se o arquivo est√° correto e tente novamente.</p>
            </div>
            """, unsafe_allow_html=True)
    
    else:
        # Instru√ß√µes iniciais quando n√£o h√° planilha carregada
        st.markdown(f"""
        <div class="info-box">
            <h4>üéØ Como usar o sistema:</h4>
            <ol>
                <li><strong>üì• Baixe a planilha exemplo</strong> na barra lateral</li>
                <li><strong>‚úèÔ∏è Preencha</strong> com os dados dos seus funcion√°rios</li>
                <li><strong>üì§ Fa√ßa upload</strong> da planilha preenchida</li>
                <li><strong>‚öôÔ∏è Configure</strong> os riscos ocupacionais e medidas de prote√ß√£o</li>
                <li><strong>üë• Selecione</strong> os funcion√°rios (individual, m√∫ltiplos ou todos)</li>
                <li><strong>üìÑ Gere</strong> as Ordens de Servi√ßo conforme NR-01</li>
            </ol>
            
            <p><strong>üÜï Novidade:</strong> Agora com <strong>{sum(len(riscos) for riscos in AGENTES_POR_CATEGORIA.values())} op√ß√µes de riscos</strong> ocupacionais organizados por categoria!</p>
            <p><strong>üí° Dica:</strong> Voc√™ tamb√©m pode fazer upload de um template personalizado de Word para manter o padr√£o visual da sua empresa!</p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()