import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import zipfile
from io import BytesIO
import time
import re
from datetime import datetime, timedelta
import os
import hashlib
import secrets
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Gerador de OS Profissional",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 2rem;
    }
    .info-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
    .success-card {
        background: #d4edda;
        color: #155724;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #c3e6cb;
        margin: 1rem 0;
    }
    .warning-card {
        background: #fff3cd;
        color: #856404;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #ffeaa7;
        margin: 1rem 0;
    }
    .reset-card {
        background: #e2e3e5;
        color: #383d41;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #d6d8db;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Sistema de usu√°rios simulado (em produ√ß√£o usar banco de dados)
if 'users_db' not in st.session_state:
    st.session_state.users_db = {
        'admin': {
            'password_hash': hashlib.sha256('admin123'.encode()).hexdigest(),
            'email': 'admin@sistema.com',
            'full_name': 'Administrador',
            'is_admin': True,
            'credits': 999999,
            'created_at': datetime.now()
        }
    }

if 'reset_tokens' not in st.session_state:
    st.session_state.reset_tokens = {}

# Configura√ß√µes de email (em produ√ß√£o usar vari√°veis de ambiente)
EMAIL_CONFIG = {
    'smtp_server': 'smtp.gmail.com',
    'smtp_port': 587,
    'email': 'seu-sistema@gmail.com',  # ‚Üê CONFIGURAR
    'password': 'sua-senha-app'        # ‚Üê CONFIGURAR
}

class AuthManager:
    def __init__(self):
        pass

    def hash_password(self, password):
        """Cria hash da senha"""
        return hashlib.sha256(password.encode()).hexdigest()

    def register_user(self, username, email, password, full_name=""):
        """Registrar novo usu√°rio"""
        try:
            if username in st.session_state.users_db:
                return {"success": False, "message": "Usu√°rio j√° existe"}

            # Verificar se email j√° existe
            for user, data in st.session_state.users_db.items():
                if data['email'] == email:
                    return {"success": False, "message": "Email j√° cadastrado"}

            if len(username) < 3:
                return {"success": False, "message": "Nome de usu√°rio muito curto"}

            if len(password) < 6:
                return {"success": False, "message": "Senha deve ter pelo menos 6 caracteres"}

            if '@' not in email:
                return {"success": False, "message": "Email inv√°lido"}

            # Criar usu√°rio
            st.session_state.users_db[username] = {
                'password_hash': self.hash_password(password),
                'email': email,
                'full_name': full_name,
                'is_admin': False,
                'credits': 5,  # Cr√©ditos iniciais
                'created_at': datetime.now()
            }

            return {"success": True, "message": "Cadastro realizado! Voc√™ ganhou 5 cr√©ditos gratuitos."}

        except Exception as e:
            return {"success": False, "message": f"Erro interno: {str(e)}"}

    def login_user(self, username, password):
        """Fazer login"""
        try:
            if username not in st.session_state.users_db:
                return {"success": False, "message": "Usu√°rio n√£o encontrado"}

            user_data = st.session_state.users_db[username]

            if user_data['password_hash'] != self.hash_password(password):
                return {"success": False, "message": "Senha incorreta"}

            return {"success": True, "user": {
                'username': username,
                'email': user_data['email'],
                'full_name': user_data['full_name'],
                'is_admin': user_data['is_admin'],
                'credits': user_data['credits']
            }}

        except Exception as e:
            return {"success": False, "message": f"Erro: {str(e)}"}

    def generate_reset_token(self, email):
        """Gerar token de reset de senha"""
        try:
            # Verificar se email existe
            user_found = None
            for username, data in st.session_state.users_db.items():
                if data['email'] == email:
                    user_found = username
                    break

            if not user_found:
                return {"success": False, "message": "Email n√£o encontrado"}

            # Gerar token √∫nico
            token = secrets.token_urlsafe(32)

            # Salvar token com expira√ß√£o (1 hora)
            st.session_state.reset_tokens[token] = {
                'username': user_found,
                'email': email,
                'expires_at': datetime.now() + timedelta(hours=1)
            }

            # Enviar email (simulado)
            success = self.send_reset_email(email, token)

            if success:
                return {"success": True, "message": "Email de recupera√ß√£o enviado!", "token": token}
            else:
                return {"success": True, "message": "Token gerado (Email simulado)", "token": token}

        except Exception as e:
            return {"success": False, "message": f"Erro: {str(e)}"}

    def send_reset_email(self, email, token):
        """Enviar email de reset (vers√£o simplificada)"""
        try:
            # Em produ√ß√£o, configure SMTP real
            # Por agora, apenas simula o envio

            subject = "Recupera√ß√£o de Senha - Gerador de OS"

            body = f"""
            Ol√°!

            Voc√™ solicitou a recupera√ß√£o de senha do seu Gerador de OS.

            Use este token para redefinir sua senha:

            TOKEN: {token}

            Este token expira em 1 hora.

            Se voc√™ n√£o solicitou esta recupera√ß√£o, ignore este email.

            Atenciosamente,
            Sistema Gerador de OS
            """

            # Aqui voc√™ configuraria o envio real do email
            # Por enquanto, retorna True (simulado)
            return True

        except Exception as e:
            return False

    def reset_password(self, token, new_password):
        """Redefinir senha usando token"""
        try:
            if token not in st.session_state.reset_tokens:
                return {"success": False, "message": "Token inv√°lido"}

            token_data = st.session_state.reset_tokens[token]

            # Verificar se token expirou
            if datetime.now() > token_data['expires_at']:
                del st.session_state.reset_tokens[token]
                return {"success": False, "message": "Token expirado"}

            if len(new_password) < 6:
                return {"success": False, "message": "Senha deve ter pelo menos 6 caracteres"}

            # Atualizar senha
            username = token_data['username']
            st.session_state.users_db[username]['password_hash'] = self.hash_password(new_password)

            # Remover token usado
            del st.session_state.reset_tokens[token]

            return {"success": True, "message": "Senha redefinida com sucesso!"}

        except Exception as e:
            return {"success": False, "message": f"Erro: {str(e)}"}

# Inicializar gerenciador de autentica√ß√£o
auth_manager = AuthManager()

# Sistema de sess√£o
def init_session():
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'user' not in st.session_state:
        st.session_state.user = None
    if 'page' not in st.session_state:
        st.session_state.page = 'login'

def logout():
    st.session_state.logged_in = False
    st.session_state.user = None
    st.session_state.page = 'login'
    st.rerun()

# Fun√ß√£o para gerar OS (mant√©m a funcionalidade original)
def gerar_os_do_funcionario(funcionario, modelo_docx):
    """Gera OS individual para um funcion√°rio"""
    doc = Document(modelo_docx)

    # Dicion√°rio de substitui√ß√µes
    substituicoes = {
        '{NOME_FUNCIONARIO}': str(funcionario.get('NOME', '')),
        '{FUNCAO}': str(funcionario.get('FUNCAO', '')),
        '{SETOR}': str(funcionario.get('SETOR', '')),
        '{DATA_AVALIACAO}': str(funcionario.get('DATA_AVALIACAO', '')),
        '{AGENTE_DE_RISCO}': str(funcionario.get('AGENTE_DE_RISCO', '')),
        '{FONTE_GERADORA}': str(funcionario.get('FONTE_GERADORA', '')),
        '{INTENSIDADE_CONCENTRACAO}': str(funcionario.get('INTENSIDADE_CONCENTRACAO', '')),
        '{UNIDADE_DE_MEDIDA}': str(funcionario.get('UNIDADE_DE_MEDIDA', '')),
        '{LIMITE_DE_TOLERANCIA}': str(funcionario.get('LIMITE_DE_TOLERANCIA', '')),
        '{TECNICA_UTILIZADA}': str(funcionario.get('TECNICA_UTILIZADA', '')),
        '{EPC_EXISTENTE}': str(funcionario.get('EPC_EXISTENTE', '')),
        '{EPC_RECOMENDADO}': str(funcionario.get('EPC_RECOMENDADO', '')),
        '{EPI_EXISTENTE}': str(funcionario.get('EPI_EXISTENTE', '')),
        '{EPI_RECOMENDADO}': str(funcionario.get('EPI_RECOMENDADO', '')),
        '{OBSERVACOES}': str(funcionario.get('OBSERVACOES', ''))
    }

    # Substituir nos par√°grafos
    for paragraph in doc.paragraphs:
        for placeholder, value in substituicoes.items():
            if placeholder in paragraph.text:
                paragraph.text = paragraph.text.replace(placeholder, value)

    # Substituir nas tabelas
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for placeholder, value in substituicoes.items():
                    if placeholder in cell.text:
                        cell.text = cell.text.replace(placeholder, value)

    return doc

def processar_os_lote(df_funcionarios, modelo_docx):
    """Processa lote de funcion√°rios e gera todas as OS"""
    documentos_gerados = []

    progress_bar = st.progress(0)
    status_text = st.empty()

    for index, funcionario in df_funcionarios.iterrows():
        try:
            status_text.text(f"Gerando OS para: {funcionario.get('NOME', 'Funcion√°rio')} ({index+1}/{len(df_funcionarios)})")

            doc_gerado = gerar_os_do_funcionario(funcionario, modelo_docx)

            # Gerar nome do arquivo
            nome_funcionario = str(funcionario.get('NOME', f'Funcionario_{index}')).strip()
            nome_funcionario = re.sub(r'[^\w\s-]', '', nome_funcionario).strip()
            nome_funcionario = re.sub(r'[-\s]+', '_', nome_funcionario)

            if not nome_funcionario:
                nome_funcionario = f'Funcionario_{index}'

            nome_arquivo = f"OS_{nome_funcionario}.docx"

            # Salvar documento em bytes
            doc_bytes = BytesIO()
            doc_gerado.save(doc_bytes)
            doc_bytes.seek(0)

            documentos_gerados.append({
                'nome': nome_arquivo,
                'conteudo': doc_bytes.getvalue()
            })

            progress_bar.progress((index + 1) / len(df_funcionarios))

        except Exception as e:
            st.error(f"Erro ao gerar OS para {funcionario.get('NOME', 'funcion√°rio')}: {str(e)}")
            continue

    status_text.text("‚úÖ Processamento conclu√≠do!")
    return documentos_gerados

def criar_zip_documentos(documentos):
    """Cria arquivo ZIP com todos os documentos"""
    zip_buffer = BytesIO()

    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for doc in documentos:
            zip_file.writestr(doc['nome'], doc['conteudo'])

    zip_buffer.seek(0)
    return zip_buffer.getvalue()

# P√°gina de login com esqueci senha
def show_login_page():
    st.markdown("""
    <div class="main-header">
        <h1>üîê Sistema Gerador de OS</h1>
        <p>Sistema Profissional com Recupera√ß√£o de Senha</p>
        <small>üëë Admin: admin/admin123 | üíé 5 cr√©ditos gr√°tis no cadastro</small>
    </div>
    """, unsafe_allow_html=True)

    tab1, tab2, tab3 = st.tabs(["üîë Login", "üìù Cadastro", "üîÑ Esqueci Senha"])

    with tab1:
        st.subheader("Entrar no Sistema")

        with st.form("login_form"):
            username = st.text_input("üë§ Usu√°rio")
            password = st.text_input("üîí Senha", type="password")

            col1, col2 = st.columns([2, 1])

            with col1:
                login_btn = st.form_submit_button("üöÄ Entrar", type="primary")

            with col2:
                forgot_btn = st.form_submit_button("‚ùì Esqueci senha", type="secondary")

            if login_btn and username and password:
                with st.spinner("Autenticando..."):
                    result = auth_manager.login_user(username, password)

                    if result['success']:
                        st.session_state.logged_in = True
                        st.session_state.user = result['user']
                        st.session_state.page = 'dashboard'
                        st.success("Login realizado com sucesso!")
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error(result['message'])

            if forgot_btn:
                st.session_state.page = 'forgot_password'
                st.rerun()

            if not username or not password:
                if login_btn:
                    st.error("Preencha usu√°rio e senha")

    with tab2:
        st.subheader("Criar Nova Conta")

        with st.form("register_form"):
            new_username = st.text_input("üë§ Nome de usu√°rio", help="M√≠nimo 3 caracteres")
            new_email = st.text_input("üìß Email")
            new_full_name = st.text_input("üë®‚Äçüíº Nome completo")
            new_password = st.text_input("üîí Senha", type="password", help="M√≠nimo 6 caracteres")
            new_password_confirm = st.text_input("üîí Confirmar senha", type="password")

            accept_terms = st.checkbox("‚úÖ Aceito os termos de uso")

            if st.form_submit_button("üìù Criar Conta", type="primary"):
                if not all([new_username, new_email, new_password]):
                    st.error("‚ùå Preencha todos os campos obrigat√≥rios")
                elif new_password != new_password_confirm:
                    st.error("‚ùå Senhas n√£o coincidem")
                elif not accept_terms:
                    st.error("‚ùå Aceite os termos de uso")
                else:
                    with st.spinner("Criando conta..."):
                        result = auth_manager.register_user(new_username, new_email, new_password, new_full_name)

                        if result['success']:
                            st.success(result['message'])
                            st.info("üéâ Agora voc√™ pode fazer login!")
                        else:
                            st.error(result['message'])

    with tab3:
        st.subheader("üîÑ Recuperar Senha")

        st.markdown("""
        <div class="info-card">
            <h4>üìß Como funciona:</h4>
            <p>1. Digite seu email cadastrado</p>
            <p>2. Receba um token de recupera√ß√£o</p>
            <p>3. Use o token para criar nova senha</p>
            <p><small><strong>‚ö†Ô∏è O token expira em 1 hora</strong></small></p>
        </div>
        """, unsafe_allow_html=True)

        # Etapa 1: Solicitar reset
        if 'reset_step' not in st.session_state:
            st.session_state.reset_step = 1

        if st.session_state.reset_step == 1:
            with st.form("forgot_form"):
                email = st.text_input("üìß Digite seu email cadastrado")

                if st.form_submit_button("üîÑ Enviar Token", type="primary"):
                    if email:
                        with st.spinner("Gerando token de recupera√ß√£o..."):
                            result = auth_manager.generate_reset_token(email)

                            if result['success']:
                                st.success(result['message'])

                                # Mostrar token (em produ√ß√£o seria enviado por email)
                                st.markdown(f"""
                                <div class="warning-card">
                                    <h4>üîë Seu Token de Recupera√ß√£o:</h4>
                                    <code style="font-size: 1.2em; background: white; padding: 0.5rem; border-radius: 5px; display: block; margin: 0.5rem 0;">{result['token']}</code>
                                    <p><small><strong>üí° Em produ√ß√£o, este token seria enviado por email.</strong></small></p>
                                    <p><small>‚è∞ Expira em 1 hora</small></p>
                                </div>
                                """, unsafe_allow_html=True)

                                st.session_state.reset_step = 2
                                st.info("üëá Agora use o token abaixo para redefinir sua senha")

                            else:
                                st.error(result['message'])
                    else:
                        st.error("Digite um email")

        # Etapa 2: Redefinir senha
        if st.session_state.reset_step == 2:
            st.markdown("---")
            st.subheader("üîë Redefinir Senha")

            with st.form("reset_form"):
                token = st.text_input("üîë Token de Recupera√ß√£o")
                new_password = st.text_input("üîí Nova Senha", type="password", help="M√≠nimo 6 caracteres")
                confirm_password = st.text_input("üîí Confirmar Nova Senha", type="password")

                col1, col2 = st.columns(2)

                with col1:
                    if st.form_submit_button("‚úÖ Redefinir Senha", type="primary"):
                        if not all([token, new_password, confirm_password]):
                            st.error("‚ùå Preencha todos os campos")
                        elif new_password != confirm_password:
                            st.error("‚ùå Senhas n√£o coincidem")
                        else:
                            with st.spinner("Redefinindo senha..."):
                                result = auth_manager.reset_password(token, new_password)

                                if result['success']:
                                    st.success(result['message'])
                                    st.balloons()
                                    st.info("üéâ Agora voc√™ pode fazer login com a nova senha!")

                                    # Reset do processo
                                    st.session_state.reset_step = 1
                                    time.sleep(2)
                                    st.rerun()
                                else:
                                    st.error(result['message'])

                with col2:
                    if st.form_submit_button("üîÑ Solicitar Novo Token"):
                        st.session_state.reset_step = 1
                        st.rerun()

def show_dashboard():
    user = st.session_state.user

    # Header
    col1, col2, col3 = st.columns([2, 1, 1])

    with col1:
        st.markdown(f"""
        <div class="main-header">
            <h1>üèóÔ∏è Sistema Profissional</h1>
            <p>Bem-vindo, {user.get('full_name') or user['username']}!</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown(f"""
        <div class="info-card">
            <h3>üíé Cr√©ditos</h3>
            <h2>{user.get('credits', 0)}</h2>
            <small>dispon√≠veis</small>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.write("")
        if st.button("üö™ Logout", type="secondary"):
            logout()

    # Menu
    st.markdown("---")
    col1, col2 = st.columns(2)

    with col1:
        if st.button("üè≠ Gerar OS", type="primary", use_container_width=True):
            st.session_state.page = 'generator'
            st.rerun()

    with col2:
        if st.button("üë§ Meu Perfil", type="secondary", use_container_width=True):
            st.session_state.page = 'profile'
            st.rerun()

def show_generator_page():
    user = st.session_state.user

    st.markdown(f"""
    <div class="main-header">
        <h1>üè≠ Gerador de OS</h1>
        <p>üíé Voc√™ tem {user.get('credits', 0)} cr√©ditos dispon√≠veis</p>
    </div>
    """, unsafe_allow_html=True)

    if user.get('credits', 0) <= 0:
        st.error("‚ùå Voc√™ n√£o possui cr√©ditos suficientes!")
        st.info("üí° Contate o administrador para obter mais cr√©ditos.")

        if st.button("‚Üê Voltar ao Dashboard"):
            st.session_state.page = 'dashboard'
            st.rerun()
        return

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### üìä Planilha de Funcion√°rios")
        arquivo_funcionarios = st.file_uploader(
            "Fa√ßa upload da planilha Excel (.xlsx)",
            type=['xlsx'],
            help="Planilha com dados dos funcion√°rios"
        )

    with col2:
        st.markdown("#### üìÑ Modelo de OS")
        arquivo_modelo = st.file_uploader(
            "Fa√ßa upload do modelo Word (.docx)",
            type=['docx'], 
            help="Modelo de OS com placeholders"
        )

    if arquivo_funcionarios and arquivo_modelo:
        try:
            df_funcionarios = pd.read_excel(arquivo_funcionarios)
            st.success(f"‚úÖ Planilha carregada: **{len(df_funcionarios)} funcion√°rios**")

            # Mostrar preview
            with st.expander("üëÄ Pr√©via da planilha"):
                st.dataframe(df_funcionarios.head())

            creditos_necessarios = len(df_funcionarios)

            if creditos_necessarios > user.get('credits', 0):
                st.error(f"‚ùå Cr√©ditos insuficientes! Necess√°rio: **{creditos_necessarios}** | Dispon√≠vel: **{user.get('credits', 0)}**")
            else:
                st.info(f"üí∞ Ser√£o utilizados **{creditos_necessarios} cr√©ditos** para gerar {creditos_necessarios} OS")

                if st.button("üöÄ GERAR ORDENS DE SERVI√áO", type="primary", use_container_width=True):
                    with st.spinner("Gerando ordens de servi√ßo..."):
                        # Usar cr√©ditos
                        username = user['username']
                        st.session_state.users_db[username]['credits'] -= creditos_necessarios
                        st.session_state.user['credits'] -= creditos_necessarios

                        # Gerar documentos
                        documentos_gerados = processar_os_lote(df_funcionarios, arquivo_modelo)

                        if documentos_gerados:
                            # Criar ZIP
                            zip_data = criar_zip_documentos(documentos_gerados)

                            st.success(f"‚úÖ {len(documentos_gerados)} ordens de servi√ßo geradas com sucesso!")
                            st.balloons()

                            # Download
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            filename = f"OS_Lote_{timestamp}.zip"

                            st.download_button(
                                "üì• DOWNLOAD DAS OS GERADAS",
                                data=zip_data,
                                file_name=filename,
                                mime="application/zip",
                                type="primary",
                                use_container_width=True
                            )
                        else:
                            st.error("Erro ao gerar documentos")

        except Exception as e:
            st.error(f"Erro ao processar arquivos: {str(e)}")

    if st.button("‚Üê Voltar ao Dashboard"):
        st.session_state.page = 'dashboard'
        st.rerun()

# Aplica√ß√£o principal
def main():
    init_session()

    page = st.session_state.get('page', 'login')

    if not st.session_state.logged_in:
        if page == 'forgot_password':
            show_login_page()  # Tab esqueci senha j√° inclu√≠da
        else:
            show_login_page()
    else:
        if page == 'dashboard':
            show_dashboard()
        elif page == 'generator':
            show_generator_page()
        else:
            show_dashboard()

if __name__ == "__main__":
    main()
