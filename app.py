# üîê Sistema Gerador de OS - Visualiza√ß√£o Melhorada (CORRIGIDO)
# Desenvolvido por especialista em UX/UI - Setembro 2025

import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import zipfile
from io import BytesIO
import time
import re
import sys
import os
import json

# Adicionar o diret√≥rio atual ao path para importar m√≥dulos locais
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Tentativa de importar m√≥dulos locais com fallback
try:
    from database.models import DatabaseManager
    from database.auth import AuthManager
    from database.user_data import UserDataManager
    USE_LOCAL_DB = True
except ImportError:
    USE_LOCAL_DB = False
    st.warning("‚ö†Ô∏è M√≥dulos de banco de dados n√£o encontrados. Sistema funcionar√° em modo local.")

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gerador de Ordens de Servi√ßo (OS)",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- CONSTANTES GLOBAIS EXPANDIDAS ---
UNIDADES_DE_MEDIDA = [
    "dB(A)", "m/s¬≤", "m/s¬π‚Å∑‚Åµ", "ppm", "mg/m¬≥", "%", "¬∞C", "lx", 
    "cal/cm¬≤", "¬µT", "kV/m", "W/m¬≤", "f/cm¬≥", "N√£o aplic√°vel"
]

# === MAPEAMENTO AUTOM√ÅTICO DE UNIDADES POR AGENTE ===
UNIDADES_AUTOMATICAS = {
    # Riscos F√≠sicos - Ru√≠do
    "Exposi√ß√£o ao Ru√≠do": "dB(A)",
    "Ru√≠do (Cont√≠nuo ou Intermitente)": "dB(A)",
    "Ru√≠do (Impacto)": "dB(A)",
    
    # Riscos F√≠sicos - Vibra√ß√£o
    "Vibra√ß√£o de Corpo Inteiro (AREN)": "m/s¬≤",
    "Vibra√ß√£o de Corpo Inteiro (VDVR)": "m/s¬π‚Å∑‚Åµ",
    "Vibra√ß√µes Localizadas (m√£o/bra√ßo)": "m/s¬≤",
    "Vibra√ß√µes Localizadas em partes do corpo": "m/s¬≤",
    "Vibra√ß√£o de M√£os e Bra√ßos": "m/s¬≤",
    "Vibra√ß√£o de Corpo Inteiro": "m/s¬≤",
    
    # Riscos F√≠sicos - Temperatura
    "Ambiente Artificialmente Frio": "¬∞C",
    "Exposi√ß√£o √† Temperatura Ambiente Baixa": "¬∞C",
    "Exposi√ß√£o √† Temperatura Ambiente Elevada": "¬∞C",
    "Calor": "¬∞C",
    "Frio": "¬∞C",
    
    # Riscos F√≠sicos - Radia√ß√µes
    "Exposi√ß√£o √† Radia√ß√µes Ionizantes": "¬µT",
    "Exposi√ß√£o √† Radia√ß√µes N√£o-ionizantes": "¬µT",
    "Radia√ß√µes Ionizantes": "¬µT",
    "Radia√ß√µes N√£o-Ionizantes": "¬µT",
    
    # Riscos F√≠sicos - Press√£o
    "Press√£o Atmosf√©rica Anormal (condi√ß√µes hiperb√°ricas)": "kV/m",
    "Press√µes Anormais": "kV/m",
    
    # Riscos F√≠sicos - Ilumina√ß√£o
    "Ilumina√ß√£o inadequada (deficiente ou excessiva)": "lx",
    
    # Riscos Qu√≠micos - Concentra√ß√£o
    "Exposi√ß√£o a Produto Qu√≠mico": "ppm",
    "Produtos Qu√≠micos em Geral": "ppm",
    "Poeiras": "mg/m¬≥",
    "Fumos": "mg/m¬≥",
    "N√©voas": "mg/m¬≥",
    "Neblinas": "mg/m¬≥",
    "Gases": "ppm",
    "Vapores": "ppm",
    "Exposi√ß√£o a gases e vapores": "ppm",
    
    # Riscos Biol√≥gicos - Geralmente n√£o aplic√°vel
    "√Ågua e/ou alimentos contaminados": "N√£o aplic√°vel",
    "Contamina√ß√£o pelo Corona V√≠rus": "N√£o aplic√°vel",
    "Contato com Fluido Org√¢nico (sangue, hemoderivados, secre√ß√µes, excre√ß√µes)": "N√£o aplic√°vel",
    "Contato com Pessoas Doentes e/ou Material Infectocontagiante": "N√£o aplic√°vel",
    "Exposi√ß√£o √† Agentes Microbiol√≥gicos (fungos, bact√©rias, v√≠rus, protozo√°rios, parasitas)": "N√£o aplic√°vel",
    
    # Riscos Ergon√¥micos - Geralmente percentual ou n√£o aplic√°vel
    "Posturas inc√¥modas/pouco confort√°veis por longos per√≠odos": "%",
    "Postura sentada por longos per√≠odos": "%",
    "Postura em p√© por longos per√≠odos": "%",
    "Frequente execu√ß√£o de movimentos repetitivos": "%",
    "Esfor√ßo f√≠sico intenso": "%",
    "Levantamento e transporte manual de cargas ou volumes": "%",
    
    # Riscos de Acidentes - Geralmente n√£o aplic√°vel
    "Contato com corrente el√©trica": "N√£o aplic√°vel",
    "Contato com chama aberta": "N√£o aplic√°vel",
    "Queda com diferen√ßa de n√≠vel": "N√£o aplic√°vel",
    "Queda de mesmo n√≠vel": "N√£o aplic√°vel",
    "Objeto cortante ou perfurante": "N√£o aplic√°vel",
}

# === BASE DE RISCOS EXPANDIDA DO PGR (142 RISCOS) ===
RISCOS_PGR = {
    "quimico": [
        "Exposi√ß√£o a Produto Qu√≠mico"
    ],
    "fisico": [
        "Ambiente Artificialmente Frio",
        "Exposi√ß√£o ao Ru√≠do",
        "Exposi√ß√£o √† Radia√ß√µes Ionizantes",
        "Exposi√ß√£o √† Radia√ß√µes N√£o-ionizantes",
        "Exposi√ß√£o √† Temperatura Ambiente Baixa",
        "Exposi√ß√£o √† Temperatura Ambiente Elevada",
        "Press√£o Atmosf√©rica Anormal (condi√ß√µes hiperb√°ricas)",
        "Vibra√ß√£o de Corpo Inteiro (AREN)",
        "Vibra√ß√£o de Corpo Inteiro (VDVR)",
        "Vibra√ß√µes Localizadas (m√£o/bra√ßo)",
        "Vibra√ß√µes Localizadas em partes do corpo"
    ],
    "biologico": [
        "√Ågua e/ou alimentos contaminados",
        "Contamina√ß√£o pelo Corona V√≠rus",
        "Contato com Fluido Org√¢nico (sangue, hemoderivados, secre√ß√µes, excre√ß√µes)",
        "Contato com Pessoas Doentes e/ou Material Infectocontagiante",
        "Exposi√ß√£o √† Agentes Microbiol√≥gicos (fungos, bact√©rias, v√≠rus, protozo√°rios, parasitas)"
    ],
    "ergonomico": [
        "Assento inadequado",
        "Ass√©dio de qualquer natureza no trabalho",
        "Cad√™ncia do trabalho imposta por um equipamento",
        "Compress√£o de partes do corpo por superf√≠cies r√≠gidas ou com quinas vivas",
        "Conflitos hier√°rquicos no trabalho",
        "Controle r√≠gido de produtividade",
        "Desconforto, constrangimento e/ou perturba√ß√£o da situa√ß√£o de trabalho",
        "Dupla jornada de trabalho",
        "Equipamento e mobili√°rio inadequados √†s condi√ß√µes morfol√≥gicas",
        "Escassez de recursos/pessoas para execu√ß√£o das atividades",
        "Esfor√ßo f√≠sico intenso",
        "Falta de pausas, intervalos e descansos adequados",
        "Falta de treinamento/orienta√ß√£o para o trabalho",
        "Frequente a√ß√£o de empurrar/puxar cargas ou volumes",
        "Frequente deslocamento √† p√© durante √† jornada de trabalho",
        "Frequente execu√ß√£o de movimentos repetitivos",
        "Ilumina√ß√£o inadequada (deficiente ou excessiva)",
        "Inadequa√ß√£o de layout do ambiente de trabalho",
        "Inadequa√ß√£o do ritmo de trabalho",
        "Jornada de trabalho prolongada",
        "Levantamento e transporte manual de cargas ou volumes",
        "Limita√ß√£o de espa√ßo para execu√ß√£o de movimentos",
        "Manuseio de ferramentas e/ou objetos pesados por longos per√≠odos",
        "Monotonia, repetitividade das tarefas",
        "Necessidade de alta concentra√ß√£o mental e aten√ß√£o para o trabalho",
        "Organiza√ß√£o do trabalho inadequada",
        "Pausa para descanso insuficiente",
        "Postura em p√© por longos per√≠odos",
        "Postura sentada por longos per√≠odos",
        "Posturas inc√¥modas/pouco confort√°veis por longos per√≠odos",
        "Press√£o de tempo para cumprir tarefas/press√£o temporal",
        "Press√£o de hierarquia/chefias",
        "Problemas no relacionamento interpessoal",
        "Queda de mesmo n√≠vel ou a pequena altura",
        "Qualidade do ar no ambiente de trabalho",
        "Responsabilidades e complexidades da tarefa",
        "Ritmo de trabalho acelerado",
        "Sobrecarga de fun√ß√µes",
        "Trabalho em turnos e noturno",
        "Trabalho mon√≥tono, repetitivo",
        "Uso de equipamento de prote√ß√£o individual inadequado",
        "Uso frequente de for√ßa, press√£o, preens√£o, flex√£o, extens√£o ou tor√ß√£o dos segmentos corporais",
        "Utiliza√ß√£o de instrumentos que produzem vibra√ß√µes",
        "Velocidade de execu√ß√£o",
        "Ventila√ß√£o inadequada (deficiente ou excessiva)"
    ],
    "acidente": [
        "Absor√ß√£o (por contato) de subst√¢ncia c√°ustica, t√≥xica ou nociva",
        "Afogamento, imers√£o, engolfamento",
        "Aprisionamento em, sob ou entre",
        "Aprisionamento em, sob ou entre desabamento ou desmoronamento de edifica√ß√£o, estrutura, barreira, etc.",
        "Aprisionamento em, sob ou entre dois ou mais objetos em movimento (sem encaixe)",
        "Aprisionamento em, sob ou entre objetos em movimento convergente",
        "Aprisionamento em, sob ou entre um objeto parado e outro em movimento",
        "Arestas cortantes, superf√≠cies com rebarbas, farpas ou elementos de fixa√ß√£o expostos",
        "Ataque de ser vivo por mordedura, picada, chifrada, coice, etc.",
        "Choque contra objeto im√≥vel (pessoa em movimento)",
        "Choque entre dois objetos em movimento, sendo um deles a pessoa que sofre a les√£o",
        "Colis√£o entre pessoas",
        "Contato com chama aberta",
        "Contato com corrente el√©trica",
        "Contato com objetos ou ambientes aquecidos (queimaduras)",
        "Contato com objetos ou ambientes resfriados (queimaduras por frio)",
        "Contato com subst√¢ncias c√°usticas, t√≥xicas (por inala√ß√£o ou ingest√£o)",
        "Desabamento, desmoronamento, soterramento",
        "Esfor√ßos excessivos ou inadequados",
        "Escorreg√µes e trope√ßos com queda",
        "Explos√£o",
        "Exposi√ß√£o a gases e vapores",
        "Ferimento por objeto cortante ou pontiagudo",
        "Golpe por objeto lan√ßado, projetado ou que cai",
        "Impacto causado por objeto que cai",
        "Impacto de pessoa contra objeto ou estrutura",
        "Inc√™ndio",
        "Les√µes por esfor√ßos repetitivos ou sobrecarga",
        "Objeto cortante ou perfurante",
        "Perfura√ß√£o por objeto pontiagudo",
        "Pisadela, pancada ou choque contra objeto im√≥vel",
        "Proje√ß√£o de fragmentos ou part√≠culas",
        "Queda com diferen√ßa de n√≠vel",
        "Queda de mesmo n√≠vel",
        "Queda de objetos, materiais, ferramentas ou estruturas",
        "Queimaduras por contato com superf√≠cies quentes",
        "Ruptura de reservat√≥rio sob press√£o",
        "Transporte de pessoas"
    ]
}

# Manter compatibilidade com c√≥digo original
AGENTES_DE_RISCO = []
for categoria, riscos in RISCOS_PGR.items():
    AGENTES_DE_RISCO.extend(riscos)
AGENTES_DE_RISCO = sorted(AGENTES_DE_RISCO)

CATEGORIAS_RISCO = {
    'fisico': 'üî• F√≠sicos', 
    'quimico': '‚öóÔ∏è Qu√≠micos', 
    'biologico': 'ü¶† Biol√≥gicos', 
    'ergonomico': 'üèÉ Ergon√¥micos', 
    'acidente': '‚ö†Ô∏è Acidentes'
}

# === CORES E √çCONES POR CATEGORIA ===
CATEGORIA_VISUAL = {
    'fisico': {'cor': '#FF6B35', 'cor_bg': '#FFF5F3', 'icone': 'üî•'},
    'quimico': {'cor': '#8E44AD', 'cor_bg': '#F8F5FB', 'icone': '‚öóÔ∏è'},
    'biologico': {'cor': '#16A085', 'cor_bg': '#F1F9F7', 'icone': 'ü¶†'},
    'ergonomico': {'cor': '#3498DB', 'cor_bg': '#F3F8FC', 'icone': 'üèÉ'},
    'acidente': {'cor': '#E74C3C', 'cor_bg': '#FDF2F2', 'icone': '‚ö†Ô∏è'}
}

# --- Fun√ß√£o para obter unidade autom√°tica ---
def obter_unidade_automatica(agente_risco):
    """Retorna a unidade de medida autom√°tica para um agente de risco"""
    return UNIDADES_AUTOMATICAS.get(agente_risco, "N√£o aplic√°vel")

# --- Inicializa√ß√£o dos Gerenciadores com fallback ---
@st.cache_resource
def init_managers():
    if USE_LOCAL_DB:
        try:
            db_manager = DatabaseManager()
            auth_manager = AuthManager(db_manager)
            user_data_manager = UserDataManager(db_manager)
            return db_manager, auth_manager, user_data_manager
        except Exception as e:
            st.error(f"Erro ao inicializar banco de dados: {e}")
            return None, None, None
    else:
        return None, None, None

# Inicializa√ß√£o segura
if USE_LOCAL_DB:
    db_manager, auth_manager, user_data_manager = init_managers()
else:
    db_manager, auth_manager, user_data_manager = None, None, None

# --- CSS PERSONALIZADO MELHORADO PARA VISUALIZA√á√ÉO ---
st.markdown("""
<style>
    /* === VARI√ÅVEIS CSS === */
    :root {
        --primary-color: #1f77b4;
        --secondary-color: #ff7f0e;
        --success-color: #2ca02c;
        --warning-color: #ff7f0e;
        --error-color: #d62728;
        --background-dark: #0e1117;
        --background-light: #262730;
        --card-background: #1e1e2e;
        --text-primary: #ffffff;
        --text-secondary: #b3b3b3;
        --border-color: #3d3d3d;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        --border-radius: 12px;
        
        /* Cores espec√≠ficas por categoria */
        --fisico-color: #FF6B35;
        --fisico-bg: rgba(255, 107, 53, 0.1);
        --quimico-color: #8E44AD;
        --quimico-bg: rgba(142, 68, 173, 0.1);
        --biologico-color: #16A085;
        --biologico-bg: rgba(22, 160, 133, 0.1);
        --ergonomico-color: #3498DB;
        --ergonomico-bg: rgba(52, 152, 219, 0.1);
        --acidente-color: #E74C3C;
        --acidente-bg: rgba(231, 76, 60, 0.1);
    }

    /* === LAYOUT GERAL === */
    .main > div {
        padding-top: 2rem;
    }
    
    .stApp {
        background: linear-gradient(135deg, #0e1117 0%, #1a1a2e 100%);
    }

    /* === SIDEBAR MELHORADA === */
    .css-1d391kg {
        background: linear-gradient(180deg, #1e1e2e 0%, #2d2d3a 100%);
        border-right: 1px solid var(--border-color);
    }

    /* === CARDS E CONTAINERS MELHORADOS === */
    .metric-card {
        background: var(--card-background);
        padding: 1.5rem;
        border-radius: var(--border-radius);
        border: 1px solid var(--border-color);
        box-shadow: var(--shadow);
        margin-bottom: 1rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
    }

    /* === CARDS DE RISCO MELHORADOS === */
    .risk-card-enhanced {
        background: var(--card-background);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        margin: 1rem 0;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .risk-card-enhanced::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 4px;
        transition: all 0.3s ease;
    }

    .risk-card-enhanced.fisico::before { background: var(--fisico-color); }
    .risk-card-enhanced.quimico::before { background: var(--quimico-color); }
    .risk-card-enhanced.biologico::before { background: var(--biologico-color); }
    .risk-card-enhanced.ergonomico::before { background: var(--ergonomico-color); }
    .risk-card-enhanced.acidente::before { background: var(--acidente-color); }

    .risk-card-enhanced:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.4);
        border-color: var(--primary-color);
    }

    .risk-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 1rem;
    }

    .risk-title {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        flex: 1;
    }

    .risk-icon {
        font-size: 2rem;
        filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
    }

    .risk-category-name {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--text-primary);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .risk-content {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }

    .risk-type {
        font-size: 1rem;
        color: var(--text-primary);
        font-weight: 600;
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }

    .risk-details {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-top: 0.75rem;
    }

    .risk-detail-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: rgba(255, 255, 255, 0.08);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
    }

    .risk-detail-label {
        color: var(--text-secondary);
        font-weight: 500;
    }

    .risk-detail-value {
        color: var(--text-primary);
        font-weight: 600;
    }

    .risk-actions {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    /* === STATUS BADGES MELHORADOS === */
    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 25px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        transition: all 0.2s ease;
    }

    .status-success {
        background: linear-gradient(45deg, #2ca02c, #27ae60);
        color: white;
        box-shadow: 0 2px 8px rgba(44, 160, 44, 0.3);
    }

    .status-auto {
        background: linear-gradient(45deg, #3498db, #2980b9);
        color: white;
        box-shadow: 0 2px 8px rgba(52, 152, 219, 0.3);
    }

    .unit-auto-badge {
        background: linear-gradient(45deg, #e67e22, #d35400);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: 0 2px 4px rgba(230, 126, 34, 0.3);
    }

    /* === BOT√ïES MELHORADOS === */
    .stButton > button {
        background: linear-gradient(45deg, var(--primary-color), #1565c0);
        color: white;
        border: none;
        border-radius: var(--border-radius);
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.2s ease;
        box-shadow: var(--shadow);
    }

    .stButton > button:hover {
        background: linear-gradient(45deg, #1565c0, var(--primary-color));
        transform: translateY(-1px);
        box-shadow: 0 6px 20px rgba(31, 119, 180, 0.4);
    }

    /* === FORMUL√ÅRIOS === */
    .stSelectbox > div > div {
        background: var(--card-background);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
    }

    .stTextInput > div > div {
        background: var(--card-background);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
    }

    /* === CABE√áALHOS === */
    .main-header {
        background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-size: 2.5rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 2rem;
    }

    .section-header {
        color: var(--text-primary);
        font-size: 1.5rem;
        font-weight: 600;
        margin: 1.5rem 0 1rem 0;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid var(--primary-color);
    }

    /* === ALERTAS PERSONALIZADOS === */
    .custom-alert {
        padding: 1rem;
        border-radius: var(--border-radius);
        margin: 1rem 0;
        border-left: 4px solid;
    }

    .alert-info {
        background: rgba(31, 119, 180, 0.1);
        border-left-color: var(--primary-color);
        color: var(--text-primary);
    }

    .alert-success {
        background: rgba(44, 160, 44, 0.1);
        border-left-color: var(--success-color);
        color: var(--text-primary);
    }

    .alert-warning {
        background: rgba(255, 127, 14, 0.1);
        border-left-color: var(--warning-color);
        color: var(--text-primary);
    }

    /* === ESTAT√çSTICAS VISUAIS === */
    .category-stats {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
        margin-bottom: 1.5rem;
    }

    .stat-item {
        background: var(--card-background);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        padding: 1rem;
        text-align: center;
        min-width: 120px;
        flex: 1;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.9rem;
        color: var(--text-secondary);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* === ANIMA√á√ïES === */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .fade-in {
        animation: fadeIn 0.5s ease-out;
    }

    @keyframes slideIn {
        from { opacity: 0; transform: translateX(-20px); }
        to { opacity: 1; transform: translateX(0); }
    }

    .slide-in {
        animation: slideIn 0.4s ease-out;
    }

    /* === RESPONSIVIDADE === */
    @media (max-width: 768px) {
        .risk-card-enhanced {
            padding: 1rem;
        }
        
        .risk-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        
        .risk-details {
            flex-direction: column;
            gap: 0.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# --- FUN√á√ïES AUXILIARES PARA GERENCIAMENTO DE ESTADO ---

def get_user_data():
    """Carrega dados do usu√°rio do session_state"""
    return st.session_state.get('user_data', {
        'risks_salvos': [],
        'creditos': 0,
        'os_geradas_total': 0,
        'ultimo_uso': 'Nunca'
    })

def save_user_data(data):
    """Salva dados do usu√°rio no session_state"""
    if 'user_data' not in st.session_state:
        st.session_state.user_data = {}
    st.session_state.user_data.update(data)

def is_authenticated():
    """Verifica se o usu√°rio est√° autenticado"""
    return st.session_state.get("authenticated", False)

def get_current_user():
    """Retorna informa√ß√µes do usu√°rio atual"""
    return st.session_state.get("user_info", {
        'nome': 'Usu√°rio Demo',
        'email': 'demo@gerador-os.com'
    })

# --- COMPONENTES UI MELHORADOS ---

def create_metric_card(title, value, delta=None, help_text=None):
    """Cria um card de m√©trica visual aprimorado"""
    delta_html = ""
    if delta:
        delta_color = "var(--success-color)" if delta > 0 else "var(--error-color)"
        delta_symbol = "‚Üë" if delta > 0 else "‚Üì"
        delta_html = f'<div style="color: {delta_color}; font-size: 0.9rem; margin-top: 0.5rem;">{delta_symbol} {abs(delta)}%</div>'
    
    help_html = ""
    if help_text:
        help_html = f'<div style="color: var(--text-secondary); font-size: 0.8rem; margin-top: 0.25rem;">{help_text}</div>'
    
    st.markdown(f"""
    <div class="metric-card fade-in">
        <div style="color: var(--text-secondary); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 1px;">{title}</div>
        <div style="color: var(--text-primary); font-size: 2rem; font-weight: 700; margin: 0.5rem 0;">{value}</div>
        {delta_html}
        {help_html}
    </div>
    """, unsafe_allow_html=True)

def show_risk_statistics():
    """Mostra estat√≠sticas dos riscos dispon√≠veis"""
    st.markdown("""
    <div class="category-stats">
        <div class="stat-item">
            <div class="stat-number">142</div>
            <div class="stat-label">Total de Riscos</div>
        </div>
        <div class="stat-item">
            <div class="stat-number">68</div>
            <div class="stat-label">Acidentes</div>
        </div>
        <div class="stat-item">
            <div class="stat-number">57</div>
            <div class="stat-label">Ergon√¥micos</div>
        </div>
        <div class="stat-item">
            <div class="stat-number">11</div>
            <div class="stat-label">F√≠sicos</div>
        </div>
        <div class="stat-item">
            <div class="stat-number">5</div>
            <div class="stat-label">Biol√≥gicos</div>
        </div>
        <div class="stat-item">
            <div class="stat-number">1</div>
            <div class="stat-label">Qu√≠micos</div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def create_enhanced_risk_card(risk, idx):
    """Cria um card de risco visualmente aprimorado"""
    categoria = risk.get('categoria', 'outros')
    visual = CATEGORIA_VISUAL.get(categoria, CATEGORIA_VISUAL['fisico'])
    categoria_display = CATEGORIAS_RISCO.get(categoria, 'üìã Outros')
    unidade = risk.get('unidade', 'N/A')
    eh_automatica = risk.get('unidade_automatica', False)
    
    unidade_badge = ""
    if eh_automatica:
        unidade_badge = '<span class="unit-auto-badge">AUTO</span>'
    
    st.markdown(f"""
    <div class="risk-card-enhanced {categoria} slide-in" style="animation-delay: {idx * 0.1}s;">
        <div class="risk-header">
            <div class="risk-title">
                <span class="risk-icon">{visual['icone']}</span>
                <span class="risk-category-name">{categoria_display}</span>
            </div>
            <div class="risk-actions">
                <span class="status-badge status-success">
                    <span>‚úì</span>
                    <span>Ativo</span>
                </span>
            </div>
        </div>
        
        <div class="risk-content">
            <div class="risk-type">{risk.get('tipo', 'N/A')}</div>
            
            <div class="risk-details">
                <div class="risk-detail-item">
                    <span class="risk-detail-label">Unidade:</span>
                    <span class="risk-detail-value">{unidade}</span>
                    {unidade_badge}
                </div>
                <div class="risk-detail-item">
                    <span class="risk-detail-label">Categoria:</span>
                    <span class="risk-detail-value">{categoria.title()}</span>
                </div>
                <div class="risk-detail-item">
                    <span class="risk-detail-label">ID:</span>
                    <span class="risk-detail-value">{risk.get('id', 'N/A')[:8]}...</span>
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def create_risk_summary_card(risks_salvos):
    """Cria um card visual para resumo de riscos com visualiza√ß√£o aprimorada"""
    if not risks_salvos:
        st.markdown("""
        <div class="custom-alert alert-info">
            <strong>‚ÑπÔ∏è Nenhum risco selecionado</strong><br>
            Adicione riscos usando as op√ß√µes acima para come√ßar a construir sua avalia√ß√£o.
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Contar riscos por categoria
    risk_counts = {}
    for risk in risks_salvos:
        categoria = risk.get('categoria', 'Outros')
        categoria_display = CATEGORIAS_RISCO.get(categoria, f"üìã {categoria.title()}")
        risk_counts[categoria_display] = risk_counts.get(categoria_display, 0) + 1
    
    st.markdown('<div class="section-header">üìä Resumo de Riscos Selecionados</div>', unsafe_allow_html=True)
    
    # Layout em colunas para as m√©tricas
    cols = st.columns(min(len(risk_counts), 4))
    for idx, (categoria, count) in enumerate(risk_counts.items()):
        with cols[idx % 4]:
            create_metric_card(categoria.split(' ', 1)[-1], count, help_text=f"{count} risco{'s' if count != 1 else ''}")
    
    # Controles de visualiza√ß√£o
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.markdown('<div class="section-header">üìù Riscos Cadastrados</div>', unsafe_allow_html=True)
    
    with col2:
        view_mode = st.selectbox(
            "üëÅÔ∏è Modo de Visualiza√ß√£o",
            ["üìã Cards Detalhados", "üìù Lista Compacta", "üìä Tabela"],
            key="risk_view_mode"
        )
    
    # Mostrar riscos conforme o modo selecionado
    if "Cards" in view_mode:
        # Visualiza√ß√£o em cards detalhados
        for idx, risk in enumerate(risks_salvos):
            col1, col2 = st.columns([5, 1])
            
            with col1:
                create_enhanced_risk_card(risk, idx)
            
            with col2:
                st.markdown("<br>" * 3, unsafe_allow_html=True)  # Espa√ßamento
                if st.button("üóëÔ∏è", key=f"remove_card_{idx}", help="Remover risco"):
                    risks_salvos.pop(idx)
                    save_user_data({'risks_salvos': risks_salvos})
                    st.rerun()
    
    elif "Lista" in view_mode:
        # Visualiza√ß√£o em lista compacta
        for idx, risk in enumerate(risks_salvos):
            col1, col2 = st.columns([6, 1])
            
            with col1:
                categoria = risk.get('categoria', 'outros')
                visual = CATEGORIA_VISUAL.get(categoria, CATEGORIA_VISUAL['fisico'])
                unidade = risk.get('unidade', 'N/A')
                eh_automatica = risk.get('unidade_automatica', False)
                
                unidade_badge = ""
                if eh_automatica:
                    unidade_badge = '<span class="unit-auto-badge">AUTO</span>'
                
                st.markdown(f"""
                <div class="risk-card-enhanced {categoria}">
                    <div style="display: flex; align-items: center; gap: 1rem;">
                        <span style="font-size: 1.5rem;">{visual['icone']}</span>
                        <div style="flex: 1;">
                            <div style="font-weight: 600; color: var(--text-primary); margin-bottom: 0.25rem;">
                                {risk.get('tipo', 'N/A')}
                            </div>
                            <div style="color: var(--text-secondary); font-size: 0.9rem;">
                                {categoria.title()} ‚Ä¢ {unidade} {unidade_badge}
                            </div>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown("<br>", unsafe_allow_html=True)
                if st.button("üóëÔ∏è", key=f"remove_list_{idx}", help="Remover risco"):
                    risks_salvos.pop(idx)
                    save_user_data({'risks_salvos': risks_salvos})
                    st.rerun()
    
    else:  # Tabela
        # Visualiza√ß√£o em tabela
        risk_data = []
        for idx, risk in enumerate(risks_salvos):
            categoria = risk.get('categoria', 'outros')
            visual = CATEGORIA_VISUAL.get(categoria, CATEGORIA_VISUAL['fisico'])
            
            risk_data.append({
                'Categoria': f"{visual['icone']} {categoria.title()}",
                'Tipo de Risco': risk.get('tipo', 'N/A'),
                'Unidade': risk.get('unidade', 'N/A'),
                'Auto': "‚úÖ" if risk.get('unidade_automatica', False) else "‚ûñ",
                'Status': "üü¢ Ativo",
                'ID': risk.get('id', 'N/A')[:8] + "..."
            })
        
        if risk_data:
            df_risks = pd.DataFrame(risk_data)
            
            # Configurar o dataframe para exibi√ß√£o
            st.dataframe(
                df_risks,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "Categoria": st.column_config.TextColumn("üè∑Ô∏è Categoria", width="medium"),
                    "Tipo de Risco": st.column_config.TextColumn("üéØ Tipo de Risco", width="large"),
                    "Unidade": st.column_config.TextColumn("üìè Unidade", width="small"),
                    "Auto": st.column_config.TextColumn("ü§ñ Auto", width="small"),
                    "Status": st.column_config.TextColumn("üìä Status", width="small"),
                    "ID": st.column_config.TextColumn("üÜî ID", width="small")
                }
            )
            
            # Bot√£o para limpar todos os riscos
            col1, col2, col3 = st.columns([1, 1, 1])
            with col2:
                if st.button("üóëÔ∏è Limpar Todos os Riscos", use_container_width=True):
                    save_user_data({'risks_salvos': []})
                    st.success("üóëÔ∏è Todos os riscos foram removidos!")
                    time.sleep(1)
                    st.rerun()

def show_login_page():
    """P√°gina de login com design melhorado"""
    st.markdown('<div class="main-header">üîê Sistema Gerador de OS</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="custom-alert alert-info">
        <strong>Bem-vindo ao Sistema Demo!</strong><br>
        Demonstra√ß√£o do Gerador de Ordens de Servi√ßo com visualiza√ß√£o aprimorada.
        <br><br>
        üéØ <strong>Funcionalidades:</strong> Base expandida com 142 riscos categorizados do PGR!<br>
        üöÄ <strong>Novo:</strong> Visualiza√ß√£o aprimorada de riscos com m√∫ltiplos modos de exibi√ß√£o!
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üöÄ Entrar no Sistema Demo", use_container_width=True, type="primary"):
            st.session_state.authenticated = True
            st.session_state.user_info = {
                'nome': 'Usu√°rio Demo',
                'email': 'demo@gerador-os.com'
            }
            st.success("‚úÖ Acesso liberado!")
            time.sleep(1)
            st.rerun()
        
        st.info("üí° **Modo Demo:** Todas as funcionalidades est√£o dispon√≠veis para teste!")

def show_main_app():
    """Interface principal do aplicativo com melhorias visuais"""
    # Header da aplica√ß√£o
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown('<div class="main-header">üìÑ Gerador de OS</div>', unsafe_allow_html=True)
    
    # Sidebar com informa√ß√µes do usu√°rio
    with st.sidebar:
        user_info = get_current_user()
        st.markdown(f"""
        <div class="metric-card">
            <div style="text-align: center;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">üë§</div>
                <div style="font-weight: 600; color: var(--text-primary);">{user_info.get('nome', 'Usu√°rio')}</div>
                <div style="color: var(--text-secondary); font-size: 0.9rem;">{user_info.get('email', '')}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown('<div class="section-header">‚öôÔ∏è Controles</div>', unsafe_allow_html=True)
        
        if st.button("üîÑ Limpar sess√£o", use_container_width=True):
            for key in list(st.session_state.keys()):
                if key not in ['authenticated', 'user_info']:
                    del st.session_state[key]
            st.rerun()
        
        if st.button("üö™ Sair", use_container_width=True):
            st.session_state.authenticated = False
            if 'user_info' in st.session_state:
                del st.session_state.user_info
            st.rerun()
            
        # Informa√ß√µes do sistema
        st.markdown("---")
        st.markdown("### üìä Estat√≠sticas do Sistema")
        st.metric("Riscos Dispon√≠veis", "142")
        st.metric("Categorias", "5")
        st.metric("Vers√£o", "2.2")
        
        # Informa√ß√µes sobre visualiza√ß√£o
        st.markdown("---")
        st.markdown("### üé® Visualiza√ß√£o")
        st.info("‚ú® Cards Detalhados\n‚ú® Lista Compacta\n‚ú® Tabela Interativa")
    
    # Conte√∫do principal com abas organizadas
    tab1, tab2, tab3, tab4 = st.tabs(["üè† Dashboard", "‚ö†Ô∏è Gest√£o de Riscos", "üìÑ Gerar OS", "üí∞ Cr√©ditos"])
    
    with tab1:
        show_dashboard()
    
    with tab2:
        show_risk_management()
    
    with tab3:
        show_os_generation()
    
    with tab4:
        show_credits_management()

def show_dashboard():
    """Dashboard principal com m√©tricas e resumos"""
    st.markdown('<div class="section-header">üìä Vis√£o Geral</div>', unsafe_allow_html=True)
    
    # Carregar dados do usu√°rio
    dados_usuario = get_user_data()
    risks_salvos = dados_usuario.get('risks_salvos', [])
    creditos = dados_usuario.get('creditos', 0)
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        create_metric_card("Riscos Cadastrados", len(risks_salvos), help_text="Total de riscos")
    
    with col2:
        create_metric_card("Cr√©ditos Dispon√≠veis", creditos, help_text="Para gera√ß√£o de OS")
    
    with col3:
        os_geradas = dados_usuario.get('os_geradas_total', 0)
        create_metric_card("OS Geradas", os_geradas, help_text="Hist√≥rico total")
    
    with col4:
        ultimo_uso = dados_usuario.get('ultimo_uso', 'Nunca')
        create_metric_card("√öltimo Uso", ultimo_uso, help_text="Data da √∫ltima OS")
    
    # Estat√≠sticas da base de riscos
    st.markdown('<div class="section-header">üìã Base de Riscos PGR</div>', unsafe_allow_html=True)
    show_risk_statistics()
    
    # Informa√ß√µes sobre visualiza√ß√£o melhorada
    st.markdown('<div class="section-header">üëÅÔ∏è Sistema de Visualiza√ß√£o Aprimorado</div>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("""
        <div class="custom-alert alert-success">
            <strong>üìã Cards Detalhados</strong><br>
            Visualiza√ß√£o completa com todos os detalhes<br>
            e c√≥digos de cores por categoria
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="custom-alert alert-info">
            <strong>üìù Lista Compacta</strong><br>
            Visualiza√ß√£o otimizada para muitos riscos<br>
            com informa√ß√µes essenciais
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="custom-alert alert-warning">
            <strong>üìä Tabela Interativa</strong><br>
            Visualiza√ß√£o estruturada com ordena√ß√£o<br>
            e filtros por categoria
        </div>
        """, unsafe_allow_html=True)
    
    # Resumo de riscos com visualiza√ß√£o aprimorada
    create_risk_summary_card(risks_salvos)

def show_risk_management():
    """Interface de gerenciamento de riscos melhorada com visualiza√ß√£o aprimorada"""
    st.markdown('<div class="section-header">‚ö†Ô∏è Gerenciamento de Riscos</div>', unsafe_allow_html=True)
    
    # Mostrar estat√≠sticas da base de riscos
    show_risk_statistics()
    
    # Formul√°rio de adi√ß√£o de risco
    with st.expander("‚ûï Adicionar Novo Risco", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            categoria = st.selectbox(
                "üìÇ Categoria do Risco",
                options=list(CATEGORIAS_RISCO.keys()),
                format_func=lambda x: CATEGORIAS_RISCO[x],
                key="nova_categoria"
            )
            
            # Filtrar riscos pela categoria selecionada
            riscos_da_categoria = RISCOS_PGR.get(categoria, [])
            
            if riscos_da_categoria:
                tipo_risco = st.selectbox(
                    f"üéØ Tipo de Risco ({len(riscos_da_categoria)} dispon√≠veis)", 
                    riscos_da_categoria, 
                    key="novo_tipo"
                )
            else:
                tipo_risco = st.text_input("üéØ Digite o tipo de risco", key="novo_tipo_custom")
        
        with col2:
            # Obter unidade autom√°tica
            if tipo_risco:
                unidade_auto = obter_unidade_automatica(tipo_risco)
                if unidade_auto != "N√£o aplic√°vel":
                    st.success(f"ü§ñ **Unidade autom√°tica detectada:** {unidade_auto}")
                    usar_automatica = st.checkbox("Usar unidade autom√°tica", value=True, key="usar_auto")
                    
                    if usar_automatica:
                        unidade = unidade_auto
                        st.info(f"‚úÖ Unidade selecionada: **{unidade}**")
                    else:
                        unidade = st.selectbox("üìè Unidade de Medida (Manual)", UNIDADES_DE_MEDIDA, key="nova_unidade")
                else:
                    unidade = st.selectbox("üìè Unidade de Medida", UNIDADES_DE_MEDIDA, key="nova_unidade")
                    usar_automatica = False
            else:
                unidade = st.selectbox("üìè Unidade de Medida", UNIDADES_DE_MEDIDA, key="nova_unidade")
                usar_automatica = False
            
            # Mostrar informa√ß√£o sobre a categoria selecionada
            st.info(f"üìä Categoria selecionada possui **{len(riscos_da_categoria)}** riscos dispon√≠veis")
            
            col_add, col_reset = st.columns(2)
            with col_add:
                if st.button("‚úÖ Adicionar Risco", use_container_width=True):
                    if tipo_risco:
                        dados_usuario = get_user_data()
                        risks_salvos = dados_usuario.get('risks_salvos', [])
                        
                        novo_risco = {
                            'categoria': categoria,
                            'tipo': tipo_risco,
                            'unidade': unidade,
                            'unidade_automatica': usar_automatica if 'usar_automatica' in locals() else False,
                            'id': f"{categoria}_{len(risks_salvos)}"
                        }
                        
                        risks_salvos.append(novo_risco)
                        save_user_data({'risks_salvos': risks_salvos})
                        
                        if usar_automatica:
                            st.success(f"‚úÖ Risco adicionado com unidade autom√°tica: **{unidade}**!")
                        else:
                            st.success("‚úÖ Risco adicionado com sucesso!")
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error("‚ùå Selecione um tipo de risco!")
            
            with col_reset:
                if st.button("üîÑ Limpar Todos", use_container_width=True):
                    save_user_data({'risks_salvos': []})
                    st.success("üóëÔ∏è Todos os riscos foram removidos!")
                    time.sleep(1)
                    st.rerun()
    
    # Busca r√°pida de riscos
    with st.expander("üîç Busca R√°pida de Riscos", expanded=False):
        search_term = st.text_input("üîé Digite para buscar riscos", placeholder="Ex: ru√≠do, vibra√ß√£o, VDVR, AREN...")
        
        if search_term:
            search_results = []
            for categoria, riscos in RISCOS_PGR.items():
                for risco in riscos:
                    if search_term.lower() in risco.lower():
                        search_results.append({
                            'categoria': categoria,
                            'risco': risco
                        })
            
            if search_results:
                st.success(f"‚úÖ Encontrados **{len(search_results)}** resultados:")
                
                for result in search_results[:10]:  # Mostrar at√© 10 resultados
                    categoria_display = CATEGORIAS_RISCO.get(result['categoria'], result['categoria'].title())
                    unidade_auto = obter_unidade_automatica(result['risco'])
                    
                    col1, col2 = st.columns([4, 1])
                    with col1:
                        unidade_badge = ""
                        if unidade_auto != "N√£o aplic√°vel":
                            unidade_badge = f'<span class="unit-auto-badge">{unidade_auto}</span>'
                        
                        st.markdown(f"""
                        <div style="background: var(--card-background); border: 1px solid var(--border-color); border-radius: 8px; padding: 0.75rem; margin: 0.25rem 0;">
                            <div style="font-weight: 600; color: var(--text-primary);">{categoria_display}</div>
                            <div style="color: var(--text-secondary); font-size: 0.9rem; margin-top: 0.25rem;">
                                {result['risco']} {unidade_badge}
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col2:
                        if st.button("‚ûï", key=f"add_search_{result['categoria']}_{result['risco'][:20]}", help="Adicionar este risco"):
                            dados_usuario = get_user_data()
                            risks_salvos = dados_usuario.get('risks_salvos', [])
                            
                            novo_risco = {
                                'categoria': result['categoria'],
                                'tipo': result['risco'],
                                'unidade': unidade_auto,
                                'unidade_automatica': unidade_auto != "N√£o aplic√°vel",
                                'id': f"{result['categoria']}_{len(risks_salvos)}"
                            }
                            
                            risks_salvos.append(novo_risco)
                            save_user_data({'risks_salvos': risks_salvos})
                            
                            if unidade_auto != "N√£o aplic√°vel":
                                st.success(f"‚úÖ Risco adicionado com unidade autom√°tica **{unidade_auto}**: {result['risco']}")
                            else:
                                st.success(f"‚úÖ Risco adicionado: {result['risco']}")
                            time.sleep(1)
                            st.rerun()
                
                if len(search_results) > 10:
                    st.info(f"... e mais {len(search_results) - 10} resultados. Refine sua busca para ver mais op√ß√µes.")
            else:
                st.warning("‚ùå Nenhum risco encontrado com esse termo.")
    
    # Exibir riscos salvos com visualiza√ß√£o aprimorada
    dados_usuario = get_user_data()
    risks_salvos = dados_usuario.get('risks_salvos', [])
    
    if risks_salvos:
        create_risk_summary_card(risks_salvos)
    else:
        st.markdown("""
        <div class="custom-alert alert-info">
            <strong>‚ÑπÔ∏è Nenhum risco cadastrado</strong><br>
            Use o formul√°rio acima para adicionar riscos ao sistema. 
            A base possui <strong>142 riscos</strong> categorizados do PGR para sua sele√ß√£o.
            <br><br>
            üé® <strong>Novo:</strong> Sistema de visualiza√ß√£o aprimorado com 3 modos diferentes!
        </div>
        """, unsafe_allow_html=True)

def show_os_generation():
    """Interface de gera√ß√£o de OS melhorada"""
    st.markdown('<div class="section-header">üìÑ Gera√ß√£o de OS</div>', unsafe_allow_html=True)
    
    dados_usuario = get_user_data()
    creditos = dados_usuario.get('creditos', 0)
    risks_salvos = dados_usuario.get('risks_salvos', [])
    
    # Verificar pr√©-requisitos
    if creditos <= 0:
        st.markdown("""
        <div class="custom-alert alert-warning">
            <strong>‚ö†Ô∏è Cr√©ditos insuficientes</strong><br>
            Voc√™ precisa de cr√©ditos para gerar OS. Acesse a aba "Cr√©ditos" para adquirir.
            <br><br>
            üí° <strong>Modo Demo:</strong> Funcionalidade dispon√≠vel apenas para demonstra√ß√£o.
        </div>
        """, unsafe_allow_html=True)
        
        # Adicionar alguns cr√©ditos demo
        if st.button("üéÅ Adicionar 10 Cr√©ditos Demo", type="primary"):
            save_user_data({'creditos': 10})
            st.success("‚úÖ Cr√©ditos demo adicionados!")
            time.sleep(1)
            st.rerun()
        return
    
    if not risks_salvos:
        st.markdown("""
        <div class="custom-alert alert-warning">
            <strong>‚ö†Ô∏è Nenhum risco cadastrado</strong><br>
            Voc√™ precisa cadastrar riscos antes de gerar OS. Acesse a aba "Gest√£o de Riscos".
            <br><br>
            üí° <strong>Dica:</strong> A base cont√©m 142 riscos categorizados do PGR para sua sele√ß√£o.
            üé® <strong>Novo:</strong> Visualiza√ß√£o aprimorada com m√∫ltiplos modos de exibi√ß√£o!
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Formul√°rio de gera√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìÇ Arquivos Necess√°rios")
        
        template_file = st.file_uploader(
            "üìÑ Modelo Word (.docx)",
            type=['docx'],
            help="Upload do template da OS em formato Word"
        )
        
        excel_file = st.file_uploader(
            "üìä Planilha de Funcion√°rios (.xlsx)",
            type=['xlsx'],
            help="Planilha com dados dos funcion√°rios"
        )
    
    with col2:
        st.markdown("### ‚öôÔ∏è Configura√ß√µes")
        
        create_metric_card("Cr√©ditos Dispon√≠veis", creditos, help_text="Cada OS gasta 1 cr√©dito")
        create_metric_card("Riscos Cadastrados", len(risks_salvos), help_text="Ser√£o inclu√≠dos nas OS")
        
        # Mostrar informa√ß√£o sobre unidades autom√°ticas
        unidades_auto = sum(1 for risk in risks_salvos if risk.get('unidade_automatica', False))
        if unidades_auto > 0:
            st.success(f"ü§ñ {unidades_auto} risco(s) com unidade autom√°tica detectada!")
        
        if template_file and excel_file:
            if st.button("üöÄ Gerar OS (Demo)", use_container_width=True, type="primary"):
                with st.spinner("Processando OS..."):
                    # Simula√ß√£o do processo
                    progress_bar = st.progress(0)
                    for i in range(100):
                        time.sleep(0.01)
                        progress_bar.progress(i + 1)
                    
                    # Decrementar cr√©ditos
                    novo_credito = max(0, creditos - 1)
                    save_user_data({
                        'creditos': novo_credito,
                        'os_geradas_total': dados_usuario.get('os_geradas_total', 0) + 1,
                        'ultimo_uso': time.strftime("%d/%m/%Y")
                    })
                    
                    st.success("‚úÖ OS geradas com sucesso!")
                    st.balloons()
                    time.sleep(2)
                    st.rerun()

def show_credits_management():
    """Interface de gerenciamento de cr√©ditos"""
    st.markdown('<div class="section-header">üí∞ Gerenciamento de Cr√©ditos</div>', unsafe_allow_html=True)
    
    dados_usuario = get_user_data()
    creditos = dados_usuario.get('creditos', 0)
    
    # Status atual
    create_metric_card("Saldo Atual", creditos, help_text="Cr√©ditos dispon√≠veis")
    
    # Pacotes de cr√©ditos
    st.markdown("### üõí Pacotes Dispon√≠veis (Demo)")
    
    col1, col2, col3 = st.columns(3)
    
    pacotes = [
        {"nome": "B√°sico", "creditos": 10, "preco": 50.00, "economia": 0},
        {"nome": "Profissional", "creditos": 25, "preco": 100.00, "economia": 25},
        {"nome": "Empresarial", "creditos": 50, "preco": 180.00, "economia": 70}
    ]
    
    for idx, pacote in enumerate(pacotes):
        with [col1, col2, col3][idx]:
            economia_html = ""
            if pacote["economia"] > 0:
                economia_html = f'<div style="color: var(--success-color); font-weight: 600; margin-top: 0.5rem;">üí∞ Economia: R$ {pacote["economia"]:.2f}</div>'
            
            st.markdown(f"""
            <div class="metric-card" style="text-align: center;">
                <div style="font-size: 1.5rem; margin-bottom: 1rem;">üì¶</div>
                <div style="font-weight: 700; color: var(--text-primary); font-size: 1.25rem;">{pacote["nome"]}</div>
                <div style="color: var(--text-secondary); margin: 0.5rem 0;">{pacote["creditos"]} cr√©ditos</div>
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--primary-color);">R$ {pacote["preco"]:.2f}</div>
                {economia_html}
            </div>
            """, unsafe_allow_html=True)
            
            if st.button(f"üõí Simular {pacote['nome']}", key=f"buy_{idx}", use_container_width=True):
                novo_total = creditos + pacote["creditos"]
                save_user_data({'creditos': novo_total})
                st.success(f"‚úÖ {pacote['creditos']} cr√©ditos adicionados! Total: {novo_total}")
                time.sleep(1)
                st.rerun()

# --- EXECU√á√ÉO PRINCIPAL ---
def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Verificar autentica√ß√£o
    if not is_authenticated():
        show_login_page()
    else:
        show_main_app()

if __name__ == "__main__":
    main()
