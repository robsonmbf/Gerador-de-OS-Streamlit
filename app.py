# üîê Gerador de Ordens de Servi√ßo (OS)

import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Pt
import zipfile
from io import BytesIO
import time
import re
import sys
import os
import datetime
import hashlib

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gerador de Ordens de Servi√ßo (OS)",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- DEFINI√á√ÉO DE CONSTANTES GLOBAIS ---
UNIDADES_DE_MEDIDA = ["dB(A)", "m/s¬≤", "ppm", "mg/m¬≥", "%", "¬∞C", "lx", "cal/cm¬≤", "¬µT", "kV/m", "W/m¬≤", "f/cm¬≥", "N√£o aplic√°vel"]

# --- AGENTES DE RISCO EXPANDIDOS E ORGANIZADOS POR CATEGORIA ---
RISCOS_FISICO = sorted([
    "Ambiente Artificialmente Frio",
    "Exposi√ß√£o ao Ru√≠do",
    "Ru√≠do (Cont√≠nuo ou Intermitente)",
    "Ru√≠do (Impacto)",
    "Exposi√ß√£o a Radia√ß√µes Ionizantes",
    "Exposi√ß√£o a Radia√ß√µes N√£o-ionizantes",
    "Radia√ß√µes Ionizantes",
    "Radia√ß√µes N√£o-Ionizantes",
    "Exposi√ß√£o a Temperatura Ambiente Baixa",
    "Exposi√ß√£o a Temperatura Ambiente Elevada",
    "Frio",
    "Calor",
    "Press√£o Atmosf√©rica Anormal (condi√ß√µes hiperb√°ricas)",
    "Press√µes Anormais",
    "Umidade",
    "Vibra√ß√£o de Corpo Inteiro (AREN)",
    "Vibra√ß√£o de Corpo Inteiro (VDVR)",
    "Vibra√ß√£o de Corpo Inteiro",
    "Vibra√ß√µes Localizadas (m√£o/bra√ßo)",
    "Vibra√ß√£o de M√£os e Bra√ßos"
])

RISCOS_QUIMICO = sorted([
    "Exposi√ß√£o a Produto Qu√≠mico",
    "Produtos Qu√≠micos em Geral",
    "Poeiras",
    "Fumos",
    "N√©voas",
    "Neblinas",
    "Gases",
    "Vapores"
])

RISCOS_BIOLOGICO = sorted([
    "√Ågua e/ou alimentos contaminados",
    "Contamina√ß√£o pelo Corona V√≠rus",
    "Contato com Fluido Org√¢nico (sangue, hemoderivados, secre√ß√µes, excre√ß√µes)",
    "Contato com Pessoas Doentes e/ou Material Infectocontagiante",
    "Exposi√ß√£o a Agentes Microbiol√≥gicos (fungos, bact√©rias, v√≠rus, protozo√°rios, parasitas)",
    "V√≠rus",
    "Bact√©rias",
    "Protozo√°rios",
    "Fungos",
    "Parasitas",
    "Bacilos"
])

RISCOS_ERGONOMICO = sorted([
    "Assento inadequado",
    "Ass√©dio de qualquer natureza no trabalho",
    "Cad√™ncia do trabalho imposta por um equipamento",
    "Compress√£o de partes do corpo por superf√≠cies r√≠gidas ou com quinas vivas",
    "Conflitos hier√°rquicos no trabalho",
    "Desequil√≠brio entre tempo de trabalho e tempo de repouso",
    "Dificuldades para cumprir ordens e determina√ß√µes da chefia relacionadas ao trabalho",
    "Eleva√ß√£o frequente de membros superiores",
    "Encosto do assento inadequado ou ausente",
    "Equipamentos e/ou m√°quinas sem meios de regulagem de ajustes ou sem condi√ß√µes de uso",
    "Equipamentos/mobili√°rio n√£o adaptados a antropometria do trabalhador",
    "Esfor√ßo f√≠sico intenso",
    "Exig√™ncia de concentra√ß√£o, aten√ß√£o e mem√≥ria",
    "Exposi√ß√£o a vibra√ß√£o de corpo inteiro",
    "Exposi√ß√£o a vibra√ß√µes localizadas (m√£o, bra√ßo)",
    "Falta de autonomia para a realiza√ß√£o de tarefas no trabalho",
    "Flex√µes da coluna vertebral frequentes",
    "Frequente a√ß√£o de empurrar/puxar cargas ou volumes",
    "Frequente deslocamento a p√© durante a jornada de trabalho",
    "Frequente execu√ß√£o de movimentos repetitivos",
    "Ilumina√ß√£o inadequada",
    "Insatisfa√ß√£o no trabalho",
    "Insufici√™ncia de capacita√ß√£o para a execu√ß√£o da tarefa",
    "Levantamento e transporte manual de cargas ou volumes",
    "Manuseio de ferramentas e/ou objetos pesados por longos per√≠odos",
    "Manuseio ou movimenta√ß√£o de cargas e volumes sem pega ou com pega pobre",
    "Mobili√°rio ou equipamento sem espa√ßo para movimenta√ß√£o de segmentos corporais",
    "Mobili√°rio sem meios de regulagem de ajustes",
    "Monotonia",
    "Necessidade de alcan√ßar objetos, documentos, controles, etc, al√©m das zonas de alcance ideais",
    "Necessidade de manter ritmos intensos de trabalho",
    "Piso escorregadio ou irregular",
    "Posto de trabalho improvisado/inadequado",
    "Posto de trabalho n√£o planejado/adaptado para a posi√ß√£o sentada",
    "Postura em p√© por longos per√≠odos",
    "Postura sentada por longos per√≠odos",
    "Posturas inc√¥modas/pouco confort√°veis por longos per√≠odos",
    "Press√£o sonora fora dos par√¢metros de conforto",
    "Problemas de relacionamento no trabalho",
    "Realiza√ß√£o de m√∫ltiplas tarefas com alta demanda mental/cognitiva",
    "Reflexos que causem desconforto ou prejudiquem a vis√£o",
    "Situa√ß√µes de estresse no local de trabalho",
    "Situa√ß√µes de sobrecarga de trabalho mental",
    "Temperatura efetiva fora dos par√¢metros de conforto",
    "Trabalho com necessidade de varia√ß√£o de turnos",
    "Trabalho com utiliza√ß√£o rigorosa de metas de produ√ß√£o",
    "Trabalho em condi√ß√µes de dif√≠cil comunica√ß√£o",
    "Trabalho intensivo com teclado ou outros dispositivos de entrada de dados",
    "Trabalho noturno",
    "Trabalho realizado sem pausas pr√©-definidas para descanso",
    "Trabalho remunerado por produ√ß√£o",
    "Umidade do ar fora dos par√¢metros de conforto",
    "Uso frequente de alavancas",
    "Uso frequente de escadas",
    "Uso frequente de for√ßa, press√£o, preens√£o, flex√£o, extens√£o ou tor√ß√£o dos segmentos corporais",
    "Uso frequente de pedais",
    "Velocidade do ar fora dos par√¢metros de conforto"
])

RISCOS_ACIDENTE = sorted([
    "Absor√ß√£o (por contato) de subst√¢ncia c√°ustica, t√≥xica ou nociva",
    "Afogamento, imers√£o, engolfamento",
    "Aprisionamento em, sob ou entre",
    "Aprisionamento em, sob ou entre desabamento ou desmoronamento de edifica√ß√£o, estrutura, barreira, etc",
    "Aprisionamento em, sob ou entre dois ou mais objetos em movimento (sem encaixe)",
    "Aprisionamento em, sob ou entre objetos em movimento convergente",
    "Aprisionamento em, sob ou entre um objeto parado e outro em movimento",
    "Arestas cortantes, superf√≠cies com rebarbas, farpas ou elementos de fixa√ß√£o expostos",
    "Ataque de ser vivo (inclusive humano)",
    "Ataque de ser vivo com pe√ßonha",
    "Ataque de ser vivo com transmiss√£o de doen√ßa",
    "Ataque de ser vivo por mordedura, picada, chifrada, coice, etc",
    "Atrito ou abras√£o",
    "Atrito ou abras√£o por corpo estranho no olho",
    "Atrito ou abras√£o por encostar em objeto",
    "Atrito ou abras√£o por manusear objeto",
    "Atropelamento",
    "Batida contra objeto parado ou em movimento",
    "Carga Suspensa",
    "Colis√£o entre ve√≠culos e/ou equipamentos autopropelidos",
    "Condi√ß√µes clim√°ticas adversas (sol, chuva, vento, etc)",
    "Contato com objeto ou subst√¢ncia a temperatura muito alta",
    "Contato com objeto ou subst√¢ncia a temperatura muito baixa",
    "Contato com objeto ou subst√¢ncia em movimento",
    "Desabamento/Desmoronamento de edifica√ß√£o, estrutura e/ou materiais diversos",
    "Elementos M√≥veis e/ou Rotativos",
    "Emerg√™ncias na circunvizinhan√ßa",
    "Equipamento pressurizado hidr√°ulico ou pressurizado",
    "Exposi√ß√£o a Energia El√©trica",
    "Ferramentas el√©tricas",
    "Ferramentas manuais",
    "Gases/vapores/poeiras (t√≥xicos ou n√£o t√≥xicos)",
    "Gases/vapores/poeiras inflam√°veis",
    "Impacto de pessoa contra objeto em movimento",
    "Impacto de pessoa contra objeto parado",
    "Impacto sofrido por pessoa",
    "Impacto sofrido por pessoa, de objeto em movimento",
    "Impacto sofrido por pessoa, de objeto projetado",
    "Impacto sofrido por pessoa, de objeto que cai",
    "Inc√™ndio/Explos√£o",
    "Ingest√£o de subst√¢ncia c√°ustica, t√≥xica ou nociva",
    "Inala√ß√£o de subst√¢ncia t√≥xica/nociva",
    "Inala√ß√£o, ingest√£o e/ou absor√ß√£o",
    "Objetos cortantes/perfurocortantes",
    "Pessoas n√£o autorizadas e/ou visitantes no local de trabalho",
    "Portas, escotilhas, tampas, bocas de visita, flanges",
    "Proje√ß√£o de Part√≠culas s√≥lidas e/ou l√≠quidas",
    "Queda de pessoa com diferen√ßa de n√≠vel maior que 2m",
    "Queda de pessoa com diferen√ßa de n√≠vel menor ou igual a 2m",
    "Queda de pessoa com diferen√ßa de n√≠vel de andaime, passarela, plataforma, etc",
    "Queda de pessoa com diferen√ßa de n√≠vel de escada (m√≥vel ou fixa)",
    "Queda de pessoa com diferen√ßa de n√≠vel de material empilhado",
    "Queda de pessoa com diferen√ßa de n√≠vel de ve√≠culo",
    "Queda de pessoa com diferen√ßa de n√≠vel em po√ßo, escava√ß√£o, abertura no piso, etc",
    "Queda de pessoa em mesmo n√≠vel",
    "Rea√ß√£o do corpo a seus movimentos (escorreg√£o sem queda, etc)",
    "Soterramento",
    "Subst√¢ncias t√≥xicas e/ou inflam√°veis",
    "Superf√≠cies, subst√¢ncias e/ou objetos aquecidos",
    "Superf√≠cies, subst√¢ncias e/ou objetos em baixa temperatura",
    "Tombamento de m√°quina/equipamento",
    "Tombamento, quebra e/ou ruptura de estrutura (fixa ou m√≥vel)",
    "Trabalho a c√©u aberto",
    "Trabalho com m√°quinas e/ou equipamentos",
    "Trabalho com m√°quinas port√°teis rotativas",
    "Trabalho em espa√ßos confinados",
    "Vidro (recipientes, portas, bancadas, janelas, objetos diversos)"
])

# Dicion√°rio para mapear categorias aos riscos
AGENTES_POR_CATEGORIA = {
    'fisico': RISCOS_FISICO,
    'quimico': RISCOS_QUIMICO,
    'biologico': RISCOS_BIOLOGICO,
    'ergonomico': RISCOS_ERGONOMICO,
    'acidente': RISCOS_ACIDENTE
}

CATEGORIAS_RISCO = {
    'fisico': 'üî• F√≠sicos',
    'quimico': '‚öóÔ∏è Qu√≠micos',
    'biologico': 'ü¶† Biol√≥gicos',
    'ergonomico': 'üèÉ Ergon√¥micos',
    'acidente': '‚ö†Ô∏è Acidentes'
}

# --- CSS DARK MINIMALISTA ---
st.markdown("""
<style>
    /* TEMA DARK MINIMALISTA - SEM CORES VIBRANTES */
    .stApp {
        background: #0d1117 !important;
        color: #e6edf3 !important;
    }
    
    .main {
        background: #0d1117 !important;
        color: #e6edf3 !important;
    }
    
    /* OCULTAR HEADER COMPLETAMENTE */
    header[data-testid="stHeader"] {
        height: 0px;
        max-height: 0px;
        overflow: hidden;
    }
    
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    
    /* T√çTULO PRINCIPAL - MINIMALISTA */
    .title-header {
        text-align: center;
        color: #f0f6fc;
        font-size: 2.5rem;
        font-weight: 300;
        margin: 2rem 0;
        letter-spacing: 1px;
    }
    
    /* FORMUL√ÅRIO DE LOGIN - MINIMALISTA */
    .login-container {
        max-width: 450px;
        margin: 2rem auto;
        padding: 2rem;
        background: #161b22;
        border-radius: 8px;
        border: 1px solid #30363d;
    }
    
    .login-title {
        text-align: center;
        color: #f0f6fc;
        font-size: 1.5rem;
        font-weight: 400;
        margin-bottom: 2rem;
    }
    
    /* BOT√ïES MINIMALISTAS */
    .stButton > button {
        background: #21262d;
        color: #f0f6fc;
        border: 1px solid #30363d;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        font-weight: 400;
        width: 100%;
        transition: all 0.2s ease;
    }
    
    .stButton > button:hover {
        background: #30363d;
        border-color: #484f58;
    }
    
    .stButton > button:focus {
        background: #30363d;
        border-color: #58a6ff;
        box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.1);
    }
    
    /* INPUTS MINIMALISTAS */
    .stTextInput > div > div > input {
        background: #0d1117 !important;
        color: #f0f6fc !important;
        border: 1px solid #30363d !important;
        border-radius: 6px !important;
        padding: 0.5rem !important;
        font-size: 14px !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #58a6ff !important;
        box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.1) !important;
        outline: none !important;
    }
    
    /* SELECTBOX MINIMALISTA */
    .stSelectbox > div > div {
        background: #0d1117 !important;
        color: #f0f6fc !important;
        border: 1px solid #30363d !important;
        border-radius: 6px !important;
    }
    
    .stSelectbox [data-baseweb="select"] {
        background: #0d1117 !important;
        border: 1px solid #30363d !important;
        border-radius: 6px !important;
    }
    
    /* MULTISELECT MINIMALISTA */
    .stMultiSelect > div > div {
        background: #0d1117 !important;
        color: #f0f6fc !important;
        border: 1px solid #30363d !important;
        border-radius: 6px !important;
    }
    
    .stMultiSelect [data-baseweb="select"] {
        background: #0d1117 !important;
        border: 1px solid #30363d !important;
        border-radius: 6px !important;
    }
    
    /* MENSAGENS MINIMALISTAS */
    .success-msg {
        background: rgba(46, 160, 67, 0.1);
        border: 1px solid #238636;
        border-radius: 6px;
        padding: 12px;
        color: #7ee787;
        margin: 1rem 0;
        font-size: 14px;
    }
    
    .error-msg {
        background: rgba(248, 81, 73, 0.1);
        border: 1px solid #da3633;
        border-radius: 6px;
        padding: 12px;
        color: #f85149;
        margin: 1rem 0;
        font-size: 14px;
    }
    
    .info-msg {
        background: rgba(56, 139, 253, 0.1);
        border: 1px solid #1f6feb;
        border-radius: 6px;
        padding: 12px;
        color: #79c0ff;
        margin: 1rem 0;
        font-size: 14px;
    }
    
    .warning-msg {
        background: rgba(187, 128, 9, 0.1);
        border: 1px solid #bb8009;
        border-radius: 6px;
        padding: 12px;
        color: #f2cc60;
        margin: 1rem 0;
        font-size: 14px;
    }
    
    /* TABS MINIMALISTAS */
    .stTabs [data-baseweb="tab-list"] {
        background: transparent;
        border-bottom: 1px solid #30363d;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: transparent;
        color: #7d8590;
        border: none;
        padding: 8px 16px;
    }
    
    .stTabs [aria-selected="true"] {
        background: transparent !important;
        color: #f0f6fc !important;
        border-bottom: 2px solid #58a6ff !important;
    }
    
    /* SIDEBAR MINIMALISTA */
    .css-1d391kg {
        background: #161b22 !important;
        border-right: 1px solid #30363d;
    }
    
    /* UPLOAD AREAS MINIMALISTAS */
    .upload-area {
        background: #161b22;
        border: 2px dashed #30363d;
        border-radius: 8px;
        padding: 2rem;
        text-align: center;
        margin: 1rem 0;
        color: #7d8590;
    }
    
    .upload-area:hover {
        border-color: #58a6ff;
        background: #0d1117;
    }
    
    /* CARDS MINIMALISTAS */
    .metric-card {
        background: #161b22;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        border: 1px solid #30363d;
        margin: 0.5rem 0;
    }
    
    .metric-card h3 {
        color: #f0f6fc;
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }
    
    .metric-card p {
        color: #7d8590;
        margin: 0;
        font-size: 14px;
    }
    
    /* EXPANSORES MINIMALISTAS */
    .streamlit-expanderHeader {
        background: #161b22 !important;
        border: 1px solid #30363d !important;
        border-radius: 6px !important;
        color: #f0f6fc !important;
    }
    
    .streamlit-expanderContent {
        background: #0d1117 !important;
        border: 1px solid #30363d !important;
        color: #f0f6fc !important;
        border-radius: 0 0 6px 6px !important;
    }
    
    /* TEXT AREAS MINIMALISTAS */
    .stTextArea > div > div > textarea {
        background: #0d1117 !important;
        color: #f0f6fc !important;
        border: 1px solid #30363d !important;
        border-radius: 6px !important;
    }
    
    .stTextArea > div > div > textarea:focus {
        border-color: #58a6ff !important;
        box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.1) !important;
    }
    
    /* RADIO BUTTONS MINIMALISTAS */
    .stRadio > div {
        background: transparent !important;
        color: #f0f6fc !important;
    }
    
    /* PROGRESS BAR MINIMALISTA */
    .stProgress > div > div > div {
        background: #58a6ff !important;
    }
    
    /* M√âTRICAS MINIMALISTAS */
    [data-testid="metric-container"] {
        background: #161b22;
        border: 1px solid #30363d;
        border-radius: 8px;
        padding: 1rem;
    }
    
    [data-testid="metric-container"] > div {
        color: #f0f6fc;
    }
    
    [data-testid="metric-container"] [data-testid="metric-value"] {
        color: #f0f6fc;
    }
    
    [data-testid="metric-container"] [data-testid="metric-label"] {
        color: #7d8590;
    }
    
    /* REMOVER CORES DE FUNDO PADR√ÉO */
    .stApp > div > div > div > div {
        background: transparent !important;
    }
</style>
""", unsafe_allow_html=True)

# --- VALIDA√á√ÉO DE EMAIL ---
def is_valid_email(email):
    """Valida se o email √© de um provedor real (Gmail, Outlook, etc.)"""
    if not email or '@' not in email:
        return False
    
    # Padr√£o b√°sico de email
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    if not re.match(email_pattern, email):
        return False
    
    # Verificar provedores v√°lidos
    valid_domains = [
        'gmail.com', 'outlook.com', 'hotmail.com', 'yahoo.com', 'yahoo.com.br',
        'uol.com.br', 'terra.com.br', 'bol.com.br', 'ig.com.br', 'globo.com',
        'live.com', 'msn.com', 'icloud.com', 'me.com', 'mac.com',
        'protonmail.com', 'zoho.com', 'yandex.com'
    ]
    
    domain = email.split('@')[1].lower()
    return domain in valid_domains

# --- SISTEMA DE AUTENTICA√á√ÉO ---
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def initialize_users():
    if 'users_db' not in st.session_state:
        st.session_state.users_db = {
            'robsonmbf@hotmail.com': {
                'id': 1,
                'password': hash_password('123456'),
                'nome': 'Robson',
                'empresa': 'Minha Empresa',
                'email': 'robsonmbf@hotmail.com',
                'credits': 999999,
                'is_admin': True
            }
        }

def authenticate_user(email, password):
    initialize_users()
    hashed_password = hash_password(password)
    
    if email in st.session_state.users_db:
        user_data = st.session_state.users_db[email]
        if user_data['password'] == hashed_password:
            return user_data
    return None

def register_user(email, password, nome, empresa):
    initialize_users()
    
    if email in st.session_state.users_db:
        return None
    
    user_id = len(st.session_state.users_db) + 1
    st.session_state.users_db[email] = {
        'id': user_id,
        'password': hash_password(password),
        'nome': nome,
        'empresa': empresa,
        'email': email,
        'credits': 100,
        'is_admin': False
    }
    return user_id

def get_user_credits(user_id):
    initialize_users()
    for user in st.session_state.users_db.values():
        if user['id'] == user_id:
            if user.get('is_admin', False):
                return "‚àû"
            return user['credits']
    return 0

def debit_credits(user_id, amount):
    initialize_users()
    for user in st.session_state.users_db.values():
        if user['id'] == user_id:
            if user.get('is_admin', False):
                return True
            user['credits'] = max(0, user['credits'] - amount)
            return True
    return False

def check_sufficient_credits(user_id, amount):
    initialize_users()
    for user in st.session_state.users_db.values():
        if user['id'] == user_id:
            if user.get('is_admin', False):
                return True
            return user['credits'] >= amount
    return False

# --- FUN√á√ïES AUXILIARES ---
def create_sample_data():
    sample_data = {
        'Nome': ['JO√ÉO SILVA SANTOS', 'MARIA OLIVEIRA COSTA', 'PEDRO ALVES FERREIRA'],
        'Setor': ['PRODUCAO DE LA DE ACO', 'ADMINISTRACAO DE RH', 'MANUTENCAO QUIMICA'],
        'Fun√ß√£o': ['OPERADOR PRODUCAO I', 'ANALISTA ADM PESSOAL PL', 'MECANICO MANUT II'],
        'Data de Admiss√£o': ['15/03/2020', '22/08/2019', '10/01/2021'],
        'Empresa': ['SUA EMPRESA', 'SUA EMPRESA', 'SUA EMPRESA'],
        'Unidade': ['Matriz', 'Matriz', 'Matriz'],
        'Descri√ß√£o de Atividades': [
            'Operar equipamentos de produ√ß√£o n√≠vel I, controlar par√¢metros operacionais, realizar inspe√ß√µes visuais e registrar dados de produ√ß√£o.',
            'Executar atividades de administra√ß√£o de pessoal, controlar documentos trabalhistas, elaborar relat√≥rios e dar suporte √†s equipes.',
            'Executar manuten√ß√£o preventiva e corretiva em equipamentos, diagnosticar falhas, trocar componentes e registrar interven√ß√µes.'
        ]
    }
    return pd.DataFrame(sample_data)

def validate_excel_structure(df):
    required_columns = ['Nome', 'Setor', 'Fun√ß√£o', 'Data de Admiss√£o', 'Empresa', 'Unidade', 'Descri√ß√£o de Atividades']
    missing_columns = [col for col in required_columns if col not in df.columns]
    
    if missing_columns:
        return False, f"Colunas obrigat√≥rias faltando: {', '.join(missing_columns)}"
    
    if df.empty:
        return False, "A planilha est√° vazia"
    
    return True, "Estrutura v√°lida"

def substituir_placeholders_no_documento(doc, dados_funcionario, agentes_risco, epis, medidas_preventivas, observacoes, medicoes=""):
    """
    Substitui os placeholders no documento template pelos dados reais
    CORRIGIDO: Se n√£o houver riscos selecionados, preenche com "Aus√™ncia de Fator de Risco"
    """
    try:
        # Dicion√°rio de substitui√ß√µes b√°sicas
        substituicoes = {
            '[NOME EMPRESA]': dados_funcionario.get('Empresa', ''),
            '[UNIDADE]': dados_funcionario.get('Unidade', ''),
            '[NOME FUNCION√ÅRIO]': dados_funcionario.get('Nome', ''),
            '[DATA DE ADMISS√ÉO]': dados_funcionario.get('Data de Admiss√£o', ''),
            '[SETOR]': dados_funcionario.get('Setor', ''),
            '[FUN√á√ÉO]': dados_funcionario.get('Fun√ß√£o', ''),
            '[DESCRI√á√ÉO DE ATIVIDADES]': dados_funcionario.get('Descri√ß√£o de Atividades', ''),
            '[MEDI√á√ïES]': medicoes if medicoes else "N√£o aplic√°vel para esta fun√ß√£o."
        }
        
        # Preparar textos dos riscos com "Aus√™ncia de Fator de Risco" quando vazio
        riscos_texto = {}
        danos_texto = {}
        
        for categoria in ['fisico', 'quimico', 'biologico', 'ergonomico', 'acidente']:
            categoria_upper = categoria.upper()
            if categoria == 'fisico':
                categoria_nome = 'F√çSICOS'
            elif categoria == 'quimico':
                categoria_nome = 'QU√çMICOS'
            elif categoria == 'biologico':
                categoria_nome = 'BIOL√ìGICOS'
            elif categoria == 'ergonomico':
                categoria_nome = 'ERGON√îMICOS'
            elif categoria == 'acidente':
                categoria_nome = 'ACIDENTE'
            
            # Montar texto dos riscos - CORRE√á√ÉO AQUI
            if categoria in agentes_risco and agentes_risco[categoria]:
                riscos_lista = []
                for risco in agentes_risco[categoria]:
                    risco_text = risco['agente']
                    if risco.get('intensidade'):
                        risco_text += f": {risco['intensidade']}"
                    if risco.get('unidade') and risco['unidade'] != 'N√£o aplic√°vel':
                        risco_text += f" {risco['unidade']}"
                    riscos_lista.append(risco_text)
                riscos_texto[f'[RISCOS {categoria_nome}]'] = '; '.join(riscos_lista)
                
                # Poss√≠veis danos (texto gen√©rico baseado na categoria)
                if categoria == 'fisico':
                    danos_texto[f'[POSS√çVEIS DANOS RISCOS {categoria_nome}]'] = "Perda auditiva, les√µes por vibra√ß√£o, queimaduras, hipotermia, hipertermia"
                elif categoria == 'quimico':
                    danos_texto[f'[POSS√çVEIS DANOS RISCOS {categoria_nome}]'] = "Intoxica√ß√£o, dermatoses, pneumoconioses, alergias respirat√≥rias"
                elif categoria == 'biologico':
                    danos_texto[f'[POSS√çVEIS DANOS RISCOS {categoria_nome}]'] = "Infec√ß√µes, doen√ßas infectocontagiosas, alergias"
                elif categoria == 'ergonomico':
                    danos_texto[f'[POSS√çVEIS DANOS RISCOS {categoria_nome}]'] = "LER/DORT, fadiga, estresse, dores musculares"
                elif categoria == 'acidente':
                    danos_texto[f'[POSS√çVEIS DANOS RISCOS {categoria_nome}]'] = "Fraturas, cortes, contus√µes, queimaduras, morte"
            else:
                # *** CORRE√á√ÉO PRINCIPAL: Usar "Aus√™ncia de Fator de Risco" em vez de "N√£o identificados" ***
                riscos_texto[f'[RISCOS {categoria_nome}]'] = "Aus√™ncia de Fator de Risco"
                danos_texto[f'[POSS√çVEIS DANOS RISCOS {categoria_nome}]'] = "N√£o aplic√°vel"
        
        # Adicionar riscos e danos √†s substitui√ß√µes
        substituicoes.update(riscos_texto)
        substituicoes.update(danos_texto)
        
        # Preparar texto dos EPIs
        if epis:
            substituicoes['[EPIS]'] = '; '.join(epis)
        else:
            substituicoes['[EPIS]'] = "Conforme an√°lise de risco espec√≠fica da fun√ß√£o"
        
        # Substituir nos par√°grafos
        for paragrafo in doc.paragraphs:
            for placeholder, valor in substituicoes.items():
                if placeholder in paragrafo.text:
                    paragrafo.text = paragrafo.text.replace(placeholder, valor)
        
        # Substituir nas tabelas (se houver)
        for tabela in doc.tables:
            for linha in tabela.rows:
                for celula in linha.cells:
                    for placeholder, valor in substituicoes.items():
                        if placeholder in celula.text:
                            celula.text = celula.text.replace(placeholder, valor)
        
        return doc
        
    except Exception as e:
        st.error(f"Erro ao substituir placeholders: {str(e)}")
        return None

def gerar_documento_os(dados_funcionario, agentes_risco, epis, medidas_preventivas, observacoes, uploaded_template=None):
    """
    Fun√ß√£o para gerar documento da OS - CORRIGIDA para usar template uploaded
    """
    try:
        # Se um template foi fornecido, usar ele
        if uploaded_template is not None:
            doc = Document(uploaded_template)
            # Substituir placeholders no template
            doc = substituir_placeholders_no_documento(
                doc, dados_funcionario, agentes_risco, epis, medidas_preventivas, observacoes
            )
        else:
            # C√≥digo original para criar documento do zero (fallback)
            doc = Document()
            
            titulo = doc.add_heading('ORDEM DE SERVI√áO', 0)
            titulo.alignment = 1
            
            subtitulo = doc.add_paragraph('Informa√ß√µes sobre Condi√ß√µes de Seguran√ßa e Sa√∫de no Trabalho - NR-01')
            subtitulo.alignment = 1
            
            doc.add_paragraph()
            
            # Informa√ß√µes do Funcion√°rio
            info_func = doc.add_paragraph()
            info_func.add_run(f"Empresa: {dados_funcionario.get('Empresa', '')}\t\t")
            info_func.add_run(f"Unidade: {dados_funcionario.get('Unidade', '')}")
            
            info_func2 = doc.add_paragraph()
            info_func2.add_run(f"Nome do Funcion√°rio: {dados_funcionario.get('Nome', '')}")
            
            info_func3 = doc.add_paragraph()
            info_func3.add_run(f"Data de Admiss√£o: {dados_funcionario.get('Data de Admiss√£o', '')}")
            
            info_func4 = doc.add_paragraph()
            info_func4.add_run(f"Setor de Trabalho: {dados_funcionario.get('Setor', '')}\t\t")
            info_func4.add_run(f"Fun√ß√£o: {dados_funcionario.get('Fun√ß√£o', '')}")
            
            doc.add_paragraph()
            
            doc.add_heading('TAREFAS DA FUN√á√ÉO', level=1)
            doc.add_paragraph(dados_funcionario.get('Descri√ß√£o de Atividades', 'Atividades relacionadas √† fun√ß√£o exercida.'))
            
            # CORRE√á√ÉO: Verificar se h√° riscos, sen√£o usar "Aus√™ncia de Fator de Risco"
            tem_riscos = any(agentes_risco.get(categoria, []) for categoria in agentes_risco.keys()) if agentes_risco else False
            
            doc.add_heading('AGENTES DE RISCOS OCUPACIONAIS', level=1)
            
            if tem_riscos:
                for categoria, riscos in agentes_risco.items():
                    if riscos:
                        categoria_titulo = categoria.replace('_', ' ').title()
                        doc.add_heading(f'Riscos {categoria_titulo}', level=2)
                        
                        for risco in riscos:
                            risco_para = doc.add_paragraph()
                            risco_para.add_run(f"‚Ä¢ {risco['agente']}")
                            if risco.get('intensidade'):
                                risco_para.add_run(f": {risco['intensidade']}")
                            if risco.get('unidade'):
                                risco_para.add_run(f" {risco['unidade']}")
            else:
                # Se n√£o h√° riscos, adicionar "Aus√™ncia de Fator de Risco"
                doc.add_paragraph("Aus√™ncia de Fator de Risco")
            
            if epis:
                doc.add_heading('EQUIPAMENTOS DE PROTE√á√ÉO INDIVIDUAL (EPIs)', level=1)
                for epi in epis:
                    doc.add_paragraph(f"‚Ä¢ {epi}", style='List Bullet')
            else:
                doc.add_heading('EQUIPAMENTOS DE PROTE√á√ÉO INDIVIDUAL (EPIs)', level=1)
                doc.add_paragraph("Conforme an√°lise de risco espec√≠fica da fun√ß√£o")
            
            if medidas_preventivas:
                doc.add_heading('MEDIDAS PREVENTIVAS E DE CONTROLE', level=1)
                for medida in medidas_preventivas:
                    doc.add_paragraph(f"‚Ä¢ {medida}", style='List Bullet')
            
            doc.add_heading('PROCEDIMENTOS EM SITUA√á√ïES DE EMERG√äNCIA', level=1)
            emergencia_texto = """‚Ä¢ Comunique imediatamente o acidente √† chefia imediata ou respons√°vel pela √°rea;
‚Ä¢ Preserve as condi√ß√µes do local de acidente at√© a comunica√ß√£o com a autoridade competente;
‚Ä¢ Procure atendimento m√©dico no ambulat√≥rio da empresa ou servi√ßo m√©dico de emerg√™ncia;
‚Ä¢ Siga as orienta√ß√µes do Plano de Emerg√™ncia da empresa;
‚Ä¢ Registre a ocorr√™ncia conforme procedimentos estabelecidos."""
            doc.add_paragraph(emergencia_texto)
            
            doc.add_heading('ORIENTA√á√ïES SOBRE GRAVE E IMINENTE RISCO', level=1)
            gir_texto = """‚Ä¢ Sempre que constatar condi√ß√£o de grave e iminente risco, interrompa imediatamente as atividades;
‚Ä¢ Comunique de forma urgente ao seu superior hier√°rquico;
‚Ä¢ Aguarde as provid√™ncias necess√°rias e autoriza√ß√£o para retorno;
‚Ä¢ √â direito do trabalhador recusar-se a trabalhar em condi√ß√µes de risco grave e iminente."""
            doc.add_paragraph(gir_texto)
            
            if observacoes:
                doc.add_heading('OBSERVA√á√ïES COMPLEMENTARES', level=1)
                doc.add_paragraph(observacoes)
            
            doc.add_paragraph()
            nota_legal = doc.add_paragraph()
            nota_legal.add_run("IMPORTANTE: ").bold = True
            nota_legal.add_run(
                "Conforme Art. 158 da CLT e NR-01, o descumprimento das disposi√ß√µes "
                "sobre seguran√ßa e sa√∫de no trabalho sujeita o empregado √†s penalidades "
                "legais, inclusive demiss√£o por justa causa."
            )
            
            doc.add_paragraph()
            doc.add_paragraph("_" * 40 + "\t\t" + "_" * 40)
            doc.add_paragraph("Funcion√°rio\t\t\t\t\tRespons√°vel pela √Årea")
            doc.add_paragraph(f"Data: {datetime.date.today().strftime('%d/%m/%Y')}")
        
        return doc
        
    except Exception as e:
        st.error(f"Erro ao gerar documento: {str(e)}")
        return None

# --- FUN√á√ÉO DE LOGIN ---
def show_login_page():
    st.markdown('<div class="title-header">Gerador de Ordens de Servi√ßo</div>', unsafe_allow_html=True)
    
    total_riscos = sum(len(riscos) for riscos in AGENTES_POR_CATEGORIA.values())
    
    st.markdown(f"""
    <div class="info-msg">
        <strong>Sistema Atualizado - Base Expandida de Riscos</strong><br><br>
        ‚úÖ <strong>{total_riscos} op√ß√µes</strong> de riscos ocupacionais organizados em 5 categorias<br>
        ‚úÖ <strong>Ergon√¥micos:</strong> {len(RISCOS_ERGONOMICO)} op√ß√µes espec√≠ficas<br>
        ‚úÖ <strong>Acidentes:</strong> {len(RISCOS_ACIDENTE)} op√ß√µes detalhadas<br>
        ‚úÖ <strong>F√≠sicos:</strong> {len(RISCOS_FISICO)} op√ß√µes ampliadas<br>
        ‚úÖ <strong>Qu√≠micos:</strong> {len(RISCOS_QUIMICO)} op√ß√µes espec√≠ficas<br>
        ‚úÖ <strong>Biol√≥gicos:</strong> {len(RISCOS_BIOLOGICO)} incluindo COVID-19<br><br>
        Sistema profissional conforme NR-01 com tema minimalista
    </div>
    """, unsafe_allow_html=True)
    
    login_tab, register_tab = st.tabs(["Login", "Criar Conta"])
    
    with login_tab:
        st.markdown('<div class="login-container">', unsafe_allow_html=True)
        st.markdown('<div class="login-title">Acesso ao Sistema</div>', unsafe_allow_html=True)
        
        # MOSTRAR DADOS DE ACESSO ADMIN
        st.markdown("""
        <div class="warning-msg">
            <strong>üëë Dados de Acesso Administrador:</strong><br>
            üìß <strong>Email:</strong> robsonmbf@hotmail.com<br>
            üîí <strong>Senha:</strong> 123456<br>
            üí≥ <strong>Cr√©ditos:</strong> Ilimitados
        </div>
        """, unsafe_allow_html=True)
        
        with st.form("login_form"):
            email = st.text_input("Email:", placeholder="seu@gmail.com")
            password = st.text_input("Senha:", type="password", placeholder="Sua senha")
            
            login_button = st.form_submit_button("Entrar no Sistema")
            
            if login_button:
                if email and password:
                    if is_valid_email(email):
                        user = authenticate_user(email, password)
                        if user:
                            st.session_state.user = user
                            st.session_state.authenticated = True
                            st.markdown('<div class="success-msg">Login realizado com sucesso</div>', unsafe_allow_html=True)
                            time.sleep(1)
                            st.rerun()
                        else:
                            st.markdown('<div class="error-msg">Email ou senha incorretos</div>', unsafe_allow_html=True)
                    else:
                        st.markdown('<div class="error-msg">Email deve ser de um provedor v√°lido (Gmail, Outlook, Yahoo, etc.)</div>', unsafe_allow_html=True)
                else:
                    st.markdown('<div class="error-msg">Por favor, preencha todos os campos</div>', unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with register_tab:
        st.markdown('<div class="login-container">', unsafe_allow_html=True)
        st.markdown('<div class="login-title">Criar Nova Conta</div>', unsafe_allow_html=True)
        
        with st.form("register_form"):
            col1, col2 = st.columns(2)
            with col1:
                nome = st.text_input("Nome:", placeholder="Seu nome completo")
            with col2:
                empresa = st.text_input("Empresa:", placeholder="Nome da empresa")
            
            email = st.text_input("Email:", placeholder="seu@gmail.com")
            
            col3, col4 = st.columns(2)
            with col3:
                password = st.text_input("Senha:", type="password", placeholder="M√≠nimo 6 caracteres")
            with col4:
                password_confirm = st.text_input("Confirmar:", type="password", placeholder="Confirme a senha")
            
            register_button = st.form_submit_button("Criar Conta")
            
            if register_button:
                if nome and empresa and email and password and password_confirm:
                    if is_valid_email(email):
                        if password == password_confirm:
                            if len(password) >= 6:
                                user_id = register_user(email, password, nome, empresa)
                                if user_id:
                                    st.markdown('<div class="success-msg">Conta criada com sucesso! Fa√ßa login para continuar</div>', unsafe_allow_html=True)
                                else:
                                    st.markdown('<div class="error-msg">Erro ao criar conta. Email j√° pode estar em uso</div>', unsafe_allow_html=True)
                            else:
                                st.markdown('<div class="error-msg">A senha deve ter pelo menos 6 caracteres</div>', unsafe_allow_html=True)
                        else:
                            st.markdown('<div class="error-msg">As senhas n√£o coincidem</div>', unsafe_allow_html=True)
                    else:
                        st.markdown('<div class="error-msg">Email deve ser de um provedor v√°lido (Gmail, Outlook, Yahoo, etc.)</div>', unsafe_allow_html=True)
                else:
                    st.markdown('<div class="error-msg">Por favor, preencha todos os campos</div>', unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)

def show_main_app(user):
    # Header do usu√°rio
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        st.markdown(f"# Gerador de OS - Bem-vindo, **{user['nome']}**")
    
    with col2:
        credits = get_user_credits(user['id'])
        st.metric("Cr√©ditos", credits)
    
    with col3:
        if st.button("Sair"):
            st.session_state.authenticated = False
            st.session_state.user = None
            st.rerun()
    
    st.markdown(f"**Empresa:** {user['empresa']}")
    
    # Mostrar status de admin se for o caso
    if user.get('is_admin', False):
        st.markdown("""
        <div class="warning-msg">
            <strong>Conta Administrador</strong><br>
            ‚Ä¢ Cr√©ditos ilimitados<br>
            ‚Ä¢ N√£o h√° cobran√ßa de cr√©ditos<br>
            ‚Ä¢ Acesso completo ao sistema
        </div>
        """, unsafe_allow_html=True)
    
    total_riscos = sum(len(riscos) for riscos in AGENTES_POR_CATEGORIA.values())
    st.markdown(f"""
    <div class="info-msg">
        <strong>Sistema Atualizado</strong><br><br>
        üìä <strong>Total:</strong> {total_riscos} op√ß√µes de riscos ocupacionais organizados em 5 categorias<br>
        ‚úÖ <strong>Preenchimento autom√°tico:</strong> "Aus√™ncia de Fator de Risco" quando necess√°rio
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.markdown("### Base de Riscos")
        st.markdown(f"**Total: {total_riscos} op√ß√µes**")
        
        for categoria, nome in CATEGORIAS_RISCO.items():
            qtd_riscos = len(AGENTES_POR_CATEGORIA[categoria])
            st.markdown(f"- {nome}: **{qtd_riscos}** op√ß√µes")
        
        st.markdown("---")
        st.markdown("### Informa√ß√µes da Conta")
        st.markdown(f"**Nome:** {user['nome']}")
        st.markdown(f"**Email:** {user['email']}")
        st.markdown(f"**Empresa:** {user['empresa']}")
        st.markdown(f"**Cr√©ditos:** {credits}")
        if user.get('is_admin', False):
            st.markdown("**Status:** Administrador")
        
        st.markdown("---")
        st.markdown("### Estrutura da Planilha")
        st.markdown("""
        **Colunas obrigat√≥rias:**
        - Nome, Setor, Fun√ß√£o
        - Data de Admiss√£o
        - Empresa, Unidade  
        - Descri√ß√£o de Atividades
        """)
        
        # Bot√£o para baixar planilha exemplo
        sample_df = create_sample_data()
        sample_buffer = BytesIO()
        sample_df.to_excel(sample_buffer, index=False)
        sample_buffer.seek(0)
        
        st.download_button(
            "Baixar Planilha Exemplo",
            data=sample_buffer.getvalue(),
            file_name="modelo_funcionarios.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
    
    # Se√ß√£o de upload de arquivos
    st.markdown("## Upload de Arquivos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="upload-area">
            <h4>Planilha de Funcion√°rios</h4>
            <p>Arquivo Excel (.xlsx) com dados dos funcion√°rios</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_excel = st.file_uploader(
            "Selecione a planilha Excel",
            type=['xlsx'],
            help="Planilha deve conter: Nome, Setor, Fun√ß√£o, Data de Admiss√£o, Empresa, Unidade, Descri√ß√£o de Atividades"
        )
    
    with col2:
        st.markdown("""
        <div class="upload-area">
            <h4>Modelo de OS (Opcional)</h4>
            <p>Template Word personalizado (.docx)</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_template = st.file_uploader(
            "Selecione template Word (opcional)",
            type=['docx'],
            help="Se n√£o informado, ser√° usado template padr√£o do sistema"
        )
    
    # Processar planilha se carregada
    if uploaded_excel is not None:
        try:
            df = pd.read_excel(uploaded_excel)
            is_valid, message = validate_excel_structure(df)
            
            if not is_valid:
                st.markdown(f'<div class="error-msg">{message}</div>', unsafe_allow_html=True)
                return
            
            st.markdown(f'<div class="success-msg">Planilha carregada: {len(df)} funcion√°rios encontrados</div>', unsafe_allow_html=True)
            
            # Estat√≠sticas da planilha
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{len(df)}</h3>
                    <p>Funcion√°rios</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{df['Setor'].nunique()}</h3>
                    <p>Setores</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{df['Fun√ß√£o'].nunique()}</h3>
                    <p>Fun√ß√µes</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                empresa_count = df['Empresa'].nunique() if 'Empresa' in df.columns else 1
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{empresa_count}</h3>
                    <p>Empresas</p>
                </div>
                """, unsafe_allow_html=True)
            
            # SELE√á√ÉO DE FUNCION√ÅRIOS COM FILTROS M√öLTIPLOS
            st.markdown("## Sele√ß√£o de Funcion√°rios")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # FILTRO POR SETORES (M√öLTIPLA SELE√á√ÉO)
                todos_setores = sorted(df['Setor'].dropna().unique().tolist())
                setores_selecionados = st.multiselect(
                    "Filtrar por Setores:",
                    todos_setores,
                    help="Selecione um ou mais setores. Deixe vazio para incluir todos."
                )
            
            with col2:
                # FILTRO POR FUN√á√ïES (M√öLTIPLA SELE√á√ÉO)
                todas_funcoes = sorted(df['Fun√ß√£o'].dropna().unique().tolist())
                funcoes_selecionadas = st.multiselect(
                    "Filtrar por Fun√ß√µes:",
                    todas_funcoes,
                    help="Selecione uma ou mais fun√ß√µes. Deixe vazio para incluir todas."
                )
            
            # APLICAR FILTROS
            df_filtrado = df.copy()
            
            # Filtrar por setores se selecionados
            if setores_selecionados:
                df_filtrado = df_filtrado[df_filtrado['Setor'].isin(setores_selecionados)]
            
            # Filtrar por fun√ß√µes se selecionadas
            if funcoes_selecionadas:
                df_filtrado = df_filtrado[df_filtrado['Fun√ß√£o'].isin(funcoes_selecionadas)]
            
            # Mostrar informa√ß√µes dos filtros aplicados
            if setores_selecionados or funcoes_selecionadas:
                filtros_aplicados = []
                if setores_selecionados:
                    filtros_aplicados.append(f"Setores: {', '.join(setores_selecionados)}")
                if funcoes_selecionadas:
                    filtros_aplicados.append(f"Fun√ß√µes: {', '.join(funcoes_selecionadas)}")
                
                st.markdown(f'<div class="info-msg"><strong>Filtros aplicados:</strong><br>‚Ä¢ {("<br>‚Ä¢ ".join(filtros_aplicados))}<br><strong>Funcion√°rios encontrados:</strong> {len(df_filtrado)}</div>', unsafe_allow_html=True)
            else:
                st.markdown(f'<div class="info-msg"><strong>Nenhum filtro aplicado</strong> - Mostrando todos os {len(df_filtrado)} funcion√°rios</div>', unsafe_allow_html=True)
            
            # MODO DE SELE√á√ÉO
            modo_selecao = st.radio(
                "Modo de Sele√ß√£o:",
                ["Funcion√°rio Individual", "M√∫ltiplos Funcion√°rios", "Todos os Funcion√°rios Filtrados"],
                help="Escolha como selecionar os funcion√°rios para gerar as OS"
            )
            
            # L√ìGICA DE SELE√á√ÉO
            funcionarios_selecionados = []
            
            if modo_selecao == "Funcion√°rio Individual":
                if len(df_filtrado) > 0:
                    funcionario_individual = st.selectbox(
                        "Selecione o funcion√°rio:",
                        [''] + df_filtrado['Nome'].tolist(),
                        help="Escolha um funcion√°rio espec√≠fico da lista filtrada"
                    )
                    if funcionario_individual:
                        funcionarios_selecionados = [funcionario_individual]
                else:
                    st.warning("Nenhum funcion√°rio encontrado com os filtros aplicados.")
            
            elif modo_selecao == "M√∫ltiplos Funcion√°rios":
                if len(df_filtrado) > 0:
                    funcionarios_selecionados = st.multiselect(
                        "Selecione m√∫ltiplos funcion√°rios:",
                        df_filtrado['Nome'].tolist(),
                        help="Escolha v√°rios funcion√°rios da lista filtrada"
                    )
                else:
                    st.warning("Nenhum funcion√°rio encontrado com os filtros aplicados.")
            
            else:  # Todos os funcion√°rios filtrados
                funcionarios_selecionados = df_filtrado['Nome'].tolist()
                if funcionarios_selecionados:
                    st.info(f"Ser√£o geradas OS para todos os {len(funcionarios_selecionados)} funcion√°rios filtrados.")
            
            # Configura√ß√£o de riscos se h√° funcion√°rios selecionados
            if funcionarios_selecionados:
                st.markdown(f'<div class="success-msg">{len(funcionarios_selecionados)} funcion√°rio(s) selecionado(s)</div>', unsafe_allow_html=True)
                
                st.markdown("## Configura√ß√£o de Riscos Ocupacionais")
                
                st.markdown("""
                <div class="warning-msg">
                    <strong>Importante:</strong><br>
                    ‚Ä¢ Se nenhum risco for selecionado, o sistema preencher√° automaticamente com <strong>"Aus√™ncia de Fator de Risco"</strong><br>
                    ‚Ä¢ Isso garante conformidade com as normas de seguran√ßa do trabalho
                </div>
                """, unsafe_allow_html=True)
                
                # Inicializar dados de sess√£o
                if 'agentes_risco' not in st.session_state:
                    st.session_state.agentes_risco = {categoria: [] for categoria in CATEGORIAS_RISCO.keys()}
                if 'epis_selecionados' not in st.session_state:
                    st.session_state.epis_selecionados = []
                if 'medidas_preventivas' not in st.session_state:
                    st.session_state.medidas_preventivas = []
                
                # Configurar riscos por categoria
                st.markdown("### Agentes de Riscos por Categoria")
                
                for categoria_key, categoria_nome in CATEGORIAS_RISCO.items():
                    qtd_opcoes = len(AGENTES_POR_CATEGORIA[categoria_key])
                    with st.expander(f"{categoria_nome} ({qtd_opcoes} op√ß√µes)", expanded=False):
                        
                        col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
                        
                        with col1:
                            agente_selecionado = st.selectbox(
                                "Agente de Risco:",
                                ['Selecione...'] + AGENTES_POR_CATEGORIA[categoria_key],
                                key=f"agente_{categoria_key}"
                            )
                        
                        with col2:
                            intensidade = st.text_input(
                                "Intensidade:",
                                key=f"intensidade_{categoria_key}",
                                placeholder="Ex: 85"
                            )
                        
                        with col3:
                            unidade = st.selectbox(
                                "Unidade:",
                                UNIDADES_DE_MEDIDA,
                                key=f"unidade_{categoria_key}"
                            )
                        
                        with col4:
                            if st.button(f"Adicionar", key=f"add_{categoria_key}"):
                                if agente_selecionado != 'Selecione...':
                                    novo_risco = {
                                        'agente': agente_selecionado,
                                        'intensidade': intensidade,
                                        'unidade': unidade
                                    }
                                    st.session_state.agentes_risco[categoria_key].append(novo_risco)
                                    st.markdown('<div class="success-msg">Risco adicionado</div>', unsafe_allow_html=True)
                                    st.rerun()
                        
                        # Mostrar riscos adicionados
                        if st.session_state.agentes_risco[categoria_key]:
                            st.markdown("**Riscos configurados:**")
                            for idx, risco in enumerate(st.session_state.agentes_risco[categoria_key]):
                                col1, col2 = st.columns([5, 1])
                                with col1:
                                    risco_text = f"‚Ä¢ {risco['agente']}"
                                    if risco['intensidade']:
                                        risco_text += f": {risco['intensidade']}"
                                    if risco['unidade'] and risco['unidade'] != 'N√£o aplic√°vel':
                                        risco_text += f" {risco['unidade']}"
                                    st.write(risco_text)
                                with col2:
                                    if st.button("Remover", key=f"remove_{categoria_key}_{idx}"):
                                        st.session_state.agentes_risco[categoria_key].pop(idx)
                                        st.rerun()
                
                # EPIs e Medidas Preventivas
                st.markdown("### EPIs e Medidas Preventivas")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**EPIs Obrigat√≥rios:**")
                    novo_epi = st.text_input("Adicionar EPI:", placeholder="Ex: Capacete, √≥culos...")
                    if st.button("Adicionar EPI") and novo_epi:
                        st.session_state.epis_selecionados.append(novo_epi)
                        st.rerun()
                    
                    for idx, epi in enumerate(st.session_state.epis_selecionados):
                        col_epi1, col_epi2 = st.columns([4, 1])
                        with col_epi1:
                            st.write(f"‚Ä¢ {epi}")
                        with col_epi2:
                            if st.button("X", key=f"remove_epi_{idx}"):
                                st.session_state.epis_selecionados.pop(idx)
                                st.rerun()
                
                with col2:
                    st.markdown("**Medidas Preventivas:**")
                    nova_medida = st.text_area("Adicionar Medida:", placeholder="Ex: Treinamentos, pausas...", height=100)
                    if st.button("Adicionar Medida") and nova_medida:
                        st.session_state.medidas_preventivas.append(nova_medida)
                        st.rerun()
                    
                    for idx, medida in enumerate(st.session_state.medidas_preventivas):
                        col_med1, col_med2 = st.columns([4, 1])
                        with col_med1:
                            medida_resumida = medida[:100] + "..." if len(medida) > 100 else medida
                            st.write(f"‚Ä¢ {medida_resumida}")
                        with col_med2:
                            if st.button("X", key=f"remove_med_{idx}"):
                                st.session_state.medidas_preventivas.pop(idx)
                                st.rerun()
                
                # Observa√ß√µes
                observacoes = st.text_area(
                    "Observa√ß√µes Complementares:",
                    placeholder="Informa√ß√µes espec√≠ficas do setor, procedimentos especiais, etc.",
                    height=80
                )
                
                # Bot√£o para gerar OS
                st.markdown("## Gerar Ordens de Servi√ßo")
                
                creditos_necessarios = len(funcionarios_selecionados)
                tem_creditos_suficientes = check_sufficient_credits(user['id'], creditos_necessarios)
                
                if tem_creditos_suficientes:
                    if user.get('is_admin', False):
                        button_text = f"Gerar {len(funcionarios_selecionados)} OS (Gratuito - Admin)"
                    else:
                        button_text = f"Gerar {len(funcionarios_selecionados)} OS ({creditos_necessarios} cr√©ditos)"
                    
                    if st.button(button_text, type="primary"):
                        
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        documentos_gerados = []
                        
                        # Processar cada funcion√°rio selecionado
                        for idx, nome_funcionario in enumerate(funcionarios_selecionados):
                            status_text.text(f"Gerando OS para: {nome_funcionario}")
                            
                            # Buscar dados do funcion√°rio
                            dados_funcionario = df_filtrado[df_filtrado['Nome'] == nome_funcionario].iloc[0].to_dict()
                            
                            # Gerar documento
                            doc = gerar_documento_os(
                                dados_funcionario=dados_funcionario,
                                agentes_risco=st.session_state.agentes_risco,
                                epis=st.session_state.epis_selecionados,
                                medidas_preventivas=st.session_state.medidas_preventivas,
                                observacoes=observacoes,
                                uploaded_template=uploaded_template
                            )
                            
                            if doc:
                                # Salvar documento em buffer
                                buffer = BytesIO()
                                doc.save(buffer)
                                buffer.seek(0)
                                
                                documentos_gerados.append({
                                    'nome': nome_funcionario.replace(' ', '_').replace('/', '_'),
                                    'buffer': buffer
                                })
                            
                            # Atualizar progresso
                            progress_bar.progress((idx + 1) / len(funcionarios_selecionados))
                            time.sleep(0.3)
                        
                        # Debitar cr√©ditos (s√≥ se n√£o for admin)
                        if not user.get('is_admin', False):
                            debit_credits(user['id'], creditos_necessarios)
                        
                        status_text.text("Gera√ß√£o conclu√≠da!")
                        
                        # Disponibilizar downloads
                        if documentos_gerados:
                            if len(documentos_gerados) == 1:
                                st.markdown('<div class="success-msg">Ordem de Servi√ßo gerada com sucesso</div>', unsafe_allow_html=True)
                                st.download_button(
                                    label="Download da Ordem de Servi√ßo",
                                    data=documentos_gerados[0]['buffer'].getvalue(),
                                    file_name=f"OS_{documentos_gerados[0]['nome']}.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    use_container_width=True
                                )
                            else:
                                st.markdown(f'<div class="success-msg">{len(documentos_gerados)} Ordens de Servi√ßo geradas com sucesso</div>', unsafe_allow_html=True)
                                
                                # Criar arquivo ZIP
                                zip_buffer = BytesIO()
                                with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                                    for doc_info in documentos_gerados:
                                        zip_file.writestr(
                                            f"OS_{doc_info['nome']}.docx",
                                            doc_info['buffer'].getvalue()
                                        )
                                
                                zip_buffer.seek(0)
                                
                                st.download_button(
                                    label=f"Download de {len(documentos_gerados)} Ordens de Servi√ßo (ZIP)",
                                    data=zip_buffer.getvalue(),
                                    file_name=f"Lote_OS_{datetime.date.today().strftime('%d%m%Y')}.zip",
                                    mime="application/zip",
                                    use_container_width=True
                                )
                                
                            # Mostrar cr√©ditos restantes (apenas se n√£o for admin)
                            if not user.get('is_admin', False):
                                creditos_restantes = get_user_credits(user['id'])
                                st.markdown(f'<div class="info-msg">{creditos_necessarios} cr√©ditos foram debitados. Cr√©ditos restantes: {creditos_restantes}</div>', unsafe_allow_html=True)
                            else:
                                st.markdown(f'<div class="info-msg">Gera√ß√£o realizada sem custo (conta administrador)</div>', unsafe_allow_html=True)
                        else:
                            st.markdown('<div class="error-msg">Erro: Nenhum documento foi gerado. Verifique as configura√ß√µes</div>', unsafe_allow_html=True)
                        
                        time.sleep(2)
                        st.rerun()
                else:
                    creditos_usuario = get_user_credits(user['id'])
                    st.markdown(f'<div class="error-msg">Cr√©ditos insuficientes. Voc√™ precisa de {creditos_necessarios} cr√©ditos, mas possui apenas {creditos_usuario}</div>', unsafe_allow_html=True)
        
        except Exception as e:
            st.markdown(f'<div class="error-msg">Erro ao processar planilha: {str(e)}</div>', unsafe_allow_html=True)
    
    else:
        # Instru√ß√µes iniciais
        total_riscos = sum(len(riscos) for riscos in AGENTES_POR_CATEGORIA.values())
        st.markdown(f"""
        <div class="info-msg">
            <h4>Como usar o sistema:</h4>
            <ol>
                <li><strong>Fa√ßa upload</strong> da planilha Excel com dados dos funcion√°rios</li>
                <li><strong>Fa√ßa upload</strong> do template Word (opcional) - use seu modelo personalizado</li>
                <li><strong>Selecione setores</strong> (m√∫ltipla sele√ß√£o dispon√≠vel)</li>
                <li><strong>Selecione fun√ß√µes</strong> (m√∫ltipla sele√ß√£o dispon√≠vel)</li>
                <li><strong>Escolha</strong> o modo de sele√ß√£o de funcion√°rios</li>
                <li><strong>Configure</strong> os riscos ocupacionais espec√≠ficos</li>
                <li><strong>Adicione</strong> EPIs e medidas preventivas</li>
                <li><strong>Gere</strong> as Ordens de Servi√ßo conforme NR-01</li>
            </ol>
            
            <p><strong>Funcionalidades implementadas:</strong></p>
            <ul>
                <li>Filtro m√∫ltiplo por setores - Selecione v√°rios setores simultaneamente</li>
                <li>Filtro m√∫ltiplo por fun√ß√µes - Selecione v√°rias fun√ß√µes simultaneamente</li>
                <li>Template personalizado - Upload do seu modelo Word</li>
                <li>Preenchimento autom√°tico - "Aus√™ncia de Fator de Risco" quando necess√°rio</li>
                <li>Valida√ß√£o de email - Apenas emails de provedores v√°lidos</li>
                <li>Tema minimalista - Interface clean e profissional</li>
                <li>{total_riscos} op√ß√µes de riscos organizados em 5 categorias</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

# --- L√ìGICA PRINCIPAL ---
def main():
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    if 'user' not in st.session_state:
        st.session_state.user = None
    
    if st.session_state.authenticated and st.session_state.user:
        show_main_app(st.session_state.user)
    else:
        show_login_page()

if __name__ == "__main__":
    main()
