import streamlit as st
import pandas as pd
from docx import Document
import zipfile
from io import BytesIO
import time
import re
import sys
import os

# Adicionar o diret√≥rio atual ao path para importar m√≥dulos locais
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.models import DatabaseManager
from database.auth import AuthManager
from database.user_data import UserDataManager

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gerador de Ordens de Servi√ßo (OS)",
    page_icon="üìÑ",
    layout="wide",
)

# --- DEFINI√á√ÉO DE CONSTANTES GLOBAIS ---
UNIDADES_DE_MEDIDA = ["dB(A)", "m/s¬≤", "ppm", "mg/m¬≥", "%", "¬∞C", "lx", "cal/cm¬≤", "¬µT", "kV/m", "W/m¬≤", "f/cm¬≥", "N√£o aplic√°vel"]
AGENTES_DE_RISCO = sorted([
    "Ru√≠do (Cont√≠nuo ou Intermitente)", "Ru√≠do (Impacto)", "Vibra√ß√£o de Corpo Inteiro", "Vibra√ß√£o de M√£os e Bra√ßos",
    "Radia√ß√µes Ionizantes", "Radia√ß√µes N√£o-Ionizantes", "Frio", "Calor", "Press√µes Anormais", "Umidade", "Poeiras", 
    "Fumos", "N√©voas", "Neblinas", "Gases", "Vapores", "Produtos Qu√≠micos em Geral", "V√≠rus", "Bact√©rias", 
    "Protozo√°rios", "Fungos", "Parasitas", "Bacilos"
])
CATEGORIAS_RISCO = {
    'fisico': 'üî• F√≠sicos',
    'quimico': '‚öóÔ∏è Qu√≠micos',
    'biologico': 'ü¶† Biol√≥gicos',
    'ergonomico': 'üèÉ Ergon√¥micos',
    'acidente': '‚ö†Ô∏è Acidentes'
}

# --- Inicializa√ß√£o dos Gerenciadores ---
@st.cache_resource
def init_managers():
    db_manager = DatabaseManager()
    auth_manager = AuthManager(db_manager)
    user_data_manager = UserDataManager(db_manager)
    return db_manager, auth_manager, user_data_manager

db_manager, auth_manager, user_data_manager = init_managers()

# --- CSS PERSONALIZADO ---
st.markdown("""
<style>
    [data-testid="stSidebar"] {display: none;}
    .main-header {text-align: center; padding-bottom: 20px;}
    .auth-container {max-width: 400px; margin: 0 auto; padding: 2rem; border: 1px solid #ddd; border-radius: 10px; background-color: #f9f9f9;}
    .user-info {background-color: #262730; color: white; padding: 1rem; border-radius: 5px; margin-bottom: 1rem; border: 1px solid #3DD56D;}
</style>
""", unsafe_allow_html=True)

# --- FUN√á√ÉO CORRIGIDA DE SUBSTITUI√á√ÉO DE PLACEHOLDERS ---
def substituir_placeholders(doc, contexto):
    def substituir_em_paragrafo(paragrafo, contexto):
        texto = paragrafo.text
        for chave, valor in contexto.items():
            if chave in texto:
                texto = texto.replace(chave, str(valor))
        if paragrafo.runs:
            paragrafo.runs[0].text = texto
            for extra_run in paragrafo.runs[1:]:
                extra_run.text = ""
    
    for tabela in doc.tables:
        for linha in tabela.rows:
            for celula in linha.cells:
                for p in celula.paragraphs:
                    substituir_em_paragrafo(p, contexto)
    for p in doc.paragraphs:
        substituir_em_paragrafo(p, contexto)

# --- GERAR OS ---
def gerar_os(funcionario, df_pgr, riscos_selecionados, epis_manuais, medicoes_manuais, riscos_manuais, modelo_doc_carregado):
    doc = Document(modelo_doc_carregado)
    riscos_info = df_pgr[df_pgr['risco'].isin(riscos_selecionados)]
    riscos_por_categoria = {cat: [] for cat in CATEGORIAS_RISCO.keys()}
    danos_por_categoria = {cat: [] for cat in CATEGORIAS_RISCO.keys()}

    for _, risco_row in riscos_info.iterrows():
        categoria = str(risco_row.get("categoria", "")).lower()
        if categoria in riscos_por_categoria:
            riscos_por_categoria[categoria].append(str(risco_row.get("risco", "")))
            danos = risco_row.get("possiveis_danos")
            if pd.notna(danos):
                danos_por_categoria[categoria].append(str(danos))

    if riscos_manuais:
        map_categorias_rev = {v: k for k, v in CATEGORIAS_RISCO.items()}
        for risco_manual in riscos_manuais:
            categoria_display = risco_manual.get('category')
            categoria_alvo = map_categorias_rev.get(categoria_display)
            if categoria_alvo:
                riscos_por_categoria[categoria_alvo].append(risco_manual.get('risk_name', ''))
                if risco_manual.get('possible_damages'):
                    danos_por_categoria[categoria_alvo].append(risco_manual.get('possible_damages'))

    for cat in danos_por_categoria:
        danos_por_categoria[cat] = sorted(list(set(danos_por_categoria[cat])))

    # Medi√ß√µes
    medicoes_ordenadas = sorted(medicoes_manuais, key=lambda med: med.get('agent', ''))
    medicoes_formatadas = []
    if medicoes_ordenadas:
        max_len = max(len(med.get('agent', '') or '') for med in medicoes_ordenadas)
        for med in medicoes_ordenadas:
            agente = med.get('agent', 'N/A')
            valor = med.get('value', 'N/A')
            unidade = med.get('unit', '')
            epi = med.get('epi', '')
            padding = ' ' * (max_len - len(agente))
            epi_info = f" | EPI: {epi}" if epi and str(epi).strip() else ""
            medicoes_formatadas.append(f"{agente}:{padding}\t{valor} {unidade}{epi_info}")
    medicoes_texto = "\n".join(medicoes_formatadas) if medicoes_formatadas else "N√£o aplic√°vel"

    # Campos simples
    data_admissao = "N√£o informado"
    if 'data_de_admissao' in funcionario and pd.notna(funcionario['data_de_admissao']):
        try:
            data_admissao = pd.to_datetime(funcionario['data_de_admissao']).strftime('%d/%m/%Y')
        except Exception:
            data_admissao = str(funcionario['data_de_admissao'])

    descricao_atividades = "N√£o informado"
    if 'descricao_de_atividades' in funcionario and pd.notna(funcionario['descricao_de_atividades']):
        descricao_atividades = str(funcionario['descricao_de_atividades'])

    def tratar_lista_vazia(lista, separador=", "):
        if not lista or all(not str(item).strip() for item in lista):
            return "N√£o identificado"
        return separador.join(sorted(list(set(str(item) for item in lista if item and str(item).strip()))))

    contexto = {
        "[NOME EMPRESA]": str(funcionario.get("empresa", "N/A")), 
        "[UNIDADE]": str(funcionario.get("unidade", "N/A")),
        "[NOME FUNCION√ÅRIO]": str(funcionario.get("nome_do_funcionario", "N/A")), 
        "[DATA DE ADMISS√ÉO]": data_admissao,
        "[SETOR]": str(funcionario.get("setor", "N/A")), 
        "[FUN√á√ÉO]": str(funcionario.get("funcao", "N/A")),
        "[DESCRI√á√ÉO DE ATIVIDADES]": descricao_atividades,
        "[RISCOS F√çSICOS]": tratar_lista_vazia(riscos_por_categoria["fisico"]),
        "[RISCOS DE ACIDENTE]": tratar_lista_vazia(riscos_por_categoria["acidente"]),
        "[RISCOS QU√çMICOS]": tratar_lista_vazia(riscos_por_categoria["quimico"]),
        "[RISCOS BIOL√ìGICOS]": tratar_lista_vazia(riscos_por_categoria["biologico"]),
        "[RISCOS ERGON√îMICOS]": tratar_lista_vazia(riscos_por_categoria["ergonomico"]),
        "[POSS√çVEIS DANOS RISCOS F√çSICOS]": tratar_lista_vazia(danos_por_categoria["fisico"], "; "),
        "[POSS√çVEIS DANOS RISCOS ACIDENTE]": tratar_lista_vazia(danos_por_categoria["acidente"], "; "),
        "[POSS√çVEIS DANOS RISCOS QU√çMICOS]": tratar_lista_vazia(danos_por_categoria["quimico"], "; "),
        "[POSS√çVEIS DANOS RISCOS BIOL√ìGICOS]": tratar_lista_vazia(danos_por_categoria["biologico"], "; "),
        "[POSS√çVEIS DANOS RISCOS ERGON√îMICOS]": tratar_lista_vazia(danos_por_categoria["ergonomico"], "; "),
        "[EPIS]": tratar_lista_vazia([epi['epi_name'] for epi in epis_manuais]),
        "[MEDI√á√ïES]": medicoes_texto,
    }

    substituir_placeholders(doc, contexto)
    return doc

# --- RESTANTE DO APP (login, sele√ß√£o, gera√ß√£o de OS em lote, etc.) ---
# (Mantive tudo igual ao seu original, apenas corrigi as fun√ß√µes acima)
