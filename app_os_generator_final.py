import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Inches

import os
import zipfile
from io import BytesIO
import base64
import tempfile

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gerador de Ordens de Servi√ßo (OS)",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Inicializa√ß√£o do Session State ---
if 'descricoes' not in st.session_state:
    st.session_state.descricoes = {}

# --- Fun√ß√µes de L√≥gica de Neg√≥cio ---

def normalizar_colunas(df):
    """Normaliza os nomes das colunas de um DataFrame."""
    if df is None:
        return None
    df.columns = (
        df.columns.str.lower()
        .str.strip()
        .str.replace(" ", "_")
        .str.replace("√ß", "c").str.replace("√£", "a").str.replace("√©", "e")
        .str.normalize("NFKD").str.encode("ascii", errors="ignore").str.decode("utf-8")
    )
    # Renomeia colunas espec√≠ficas da planilha PGR para um padr√£o interno
    rename_map = {
        'perigo__(fator_de_risco/agente_nocivo/situacao_perigosa)': 'risco',
        'perigo_(fator_de_risco/agente_nocivo/situacao_perigosa)': 'risco',
        'possiveis_danos_ou_agravos_a_saude': 'possiveis_danos'
    }
    df = df.rename(columns=rename_map)

    if 'categoria' in df.columns:
        df['categoria'] = df['categoria'].str.normalize("NFKD").str.encode("ascii", errors="ignore").str.decode("utf-8").str.lower()
    return df

def mapear_e_renomear_colunas_funcionarios(df):
    """Tenta adivinhar e renomear colunas da planilha de funcion√°rios."""
    mapeamento = {
        'nome_do_funcionario': ['nome', 'funcionario', 'colaborador', 'nome_completo'],
        'funcao': ['funcao', 'cargo', 'carga'],
        'data_de_admissao': ['data_admissao', 'data_de_admissao', 'admissao'],
        'setor': ['setor', 'area', 'departamento'],
        'matricula': ['matricula', 'registro', 'id'],
    }
    colunas_renomeadas = {}
    for nome_padrao, nomes_possiveis in mapeamento.items():
        for nome_possivel in nomes_possiveis:
            if nome_possivel in df.columns:
                colunas_renomeadas[nome_possivel] = nome_padrao
                break
    df = df.rename(columns=colunas_renomeadas)
    return df

@st.cache_data
def carregar_planilha(arquivo):
    """Carrega e processa uma planilha gen√©rica."""
    if arquivo is None:
        return None
    try:
        df = pd.read_excel(arquivo)
        df = normalizar_colunas(df)
        return df
    except Exception as e:
        st.error(f"Erro ao ler o ficheiro Excel: {e}")
        return None

def replace_text_in_paragraph(paragraph, contexto):
    """Substitui placeholders em um √∫nico par√°grafo."""
    for key, value in contexto.items():
        if key in paragraph.text:
            for run in paragraph.runs:
                if key in run.text:
                    run.text = run.text.replace(key, str(value))

def substituir_placeholders(doc, contexto):
    """Substitui os placeholders em todo o documento (par√°grafos e tabelas)."""
    for p in doc.paragraphs:
        replace_text_in_paragraph(p, contexto)
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for p in cell.paragraphs:
                    replace_text_in_paragraph(p, contexto)

def gerar_os(funcionario, df_pgr, modelo_path, descricao_atividades, riscos_selecionados, epis_manuais, medicoes_manuais, perigo_manual, danos_manuais, categoria_manual, logo_path=None):
    """Gera uma √∫nica Ordem de Servi√ßo para um funcion√°rio."""
    doc = Document(modelo_path)

    if logo_path:
        try:
            header_table = doc.tables[0]
            cell = header_table.cell(0, 0)
            cell.text = "" 
            p = cell.paragraphs[0]
            run = p.add_run()
            run.add_picture(logo_path, width=Inches(2.0))
        except IndexError:
            st.warning("Aviso: N√£o foi encontrada uma tabela de cabe√ßalho no modelo para inserir a logo.")
            p = doc.paragraphs[0]
            run = p.insert_paragraph_before().add_run()
            run.add_picture(logo_path, width=Inches(2.0))

    riscos_info = df_pgr[df_pgr['risco'].isin(riscos_selecionados)]
    
    riscos_por_categoria = {"fisico": [], "quimico": [], "biologico": [], "ergonomico": [], "acidente": []}
    danos_por_categoria = {"fisico": [], "quimico": [], "biologico": [], "ergonomico": [], "acidente": []}
    epis_recomendados = set()
    
    for _, risco_row in riscos_info.iterrows():
        categoria = str(risco_row.get("categoria", "")).strip().lower()
        risco_nome = str(risco_row.get("risco", "")).strip()
        if categoria in riscos_por_categoria:
            riscos_por_categoria[categoria].append(risco_nome)
            danos = risco_row.get("possiveis_danos")
            epis = risco_row.get("epis_recomendados")
            if pd.notna(danos): danos_por_categoria[categoria].append(str(danos))
            if pd.notna(epis): epis_recomendados.update([epi.strip() for epi in str(epis).split(',')])

    if perigo_manual and categoria_manual:
        map_categorias = {"Acidentes": "acidente", "Biol√≥gicos": "biologico", "Ergon√¥micos": "ergonomico", "F√≠sicos": "fisico", "Qu√≠micos": "quimico"}
        categoria_alvo = map_categorias.get(categoria_manual)
        if categoria_alvo:
            riscos_por_categoria[categoria_alvo].append(perigo_manual)
            if danos_manuais:
                danos_por_categoria[categoria_alvo].append(danos_manuais)

    if epis_manuais:
        epis_extras = [epi.strip() for epi in epis_manuais.split(',')]
        epis_recomendados.update(epis_extras)

    medicoes_lista = []
    if 'medicoes' in df_pgr.columns:
        medicoes_df = df_pgr[df_pgr['risco'].isin(riscos_selecionados)]
        medicoes_lista = [f"{row['risco']}: {row['medicoes']}" for _, row in medicoes_df.iterrows() if 'medicoes' in row and pd.notna(row['medicoes'])]

    if medicoes_manuais:
        medicoes_lista.extend([med.strip() for med in medicoes_manuais.split('\n') if med.strip()])

    data_admissao = "N√£o informado"
    if 'data_de_admissao' in funcionario and pd.notna(funcionario['data_de_admissao']):
        try:
            data_admissao = pd.to_datetime(funcionario['data_de_admissao']).strftime('%d/%m/%Y')
        except Exception:
            data_admissao = str(funcionario['data_de_admissao'])

    contexto = {
        "[NOME EMPRESA]": str(funcionario.get("empresa", "N/A")), "[UNIDADE]": str(funcionario.get("unidade", "N/A")),
        "[NOME FUNCION√ÅRIO]": str(funcionario.get("nome_do_funcionario", "N/A")), "[DATA DE ADMISS√ÉO]": data_admissao,
        "[SETOR]": str(funcionario.get("setor", "N/A")), "[FUN√á√ÉO]": str(funcionario.get("funcao", "N/A")),
        "[DESCRI√á√ÉO DE ATIVIDADES]": descricao_atividades or "N√£o informado",
        "[RISCOS F√çSICOS]": ", ".join(riscos_por_categoria["fisico"]) or "Nenhum",
        "[RISCOS DE ACIDENTE]": ", ".join(riscos_por_categoria["acidente"]) or "Nenhum",
        "[RISCOS QU√çMICOS]": ", ".join(riscos_por_categoria["quimico"]) or "Nenhum",
        "[RISCOS BIOL√ìGICOS]": ", ".join(riscos_por_categoria["biologico"]) or "Nenhum",
        "[RISCOS ERGON√îMICOS]": ", ".join(riscos_por_categoria["ergonomico"]) or "Nenhum",
        "[POSS√çVEIS DANOS RISCOS F√çSICOS]": "; ".join(set(danos_por_categoria["fisico"])) or "Nenhum",
        "[POSS√çVEIS DANOS RISCOS ACIDENTE]": "; ".join(set(danos_por_categoria["acidente"])) or "Nenhum",
        "[POSS√çVEIS DANOS RISCOS QU√çMICOS]": "; ".join(set(danos_por_categoria["quimico"])) or "Nenhum",
        "[POSS√çVEIS DANOS RISCOS BIOL√ìGICOS]": "; ".join(set(danos_por_categoria["biologico"])) or "Nenhum",
        "[POSS√çVEIS DANOS RISCOS ERGON√îMICOS]": "; ".join(set(danos_por_categoria["ergonomico"])) or "Nenhum",
        "[EPIS]": ", ".join(sorted(list(epis_recomendados))) or "Nenhum",
        "[MEDI√á√ïES]": "\n".join(medicoes_lista) or "Nenhuma medi√ß√£o aplic√°vel.",
    }
    
    substituir_placeholders(doc, contexto)
    return doc

# --- Interface do Streamlit ---
st.title("üìÑ Gerador de Ordens de Servi√ßo (OS)")

# --- Upload de Arquivos ---
st.sidebar.header("1. Carregar Arquivos")
arquivo_funcionarios = st.sidebar.file_uploader("Planilha de Funcion√°rios", type="xlsx", help="Ficheiro .xlsx obrigat√≥rio com os dados dos funcion√°rios.")
arquivo_modelo = st.sidebar.file_uploader("Modelo de OS (Word)", type="docx", help="Ficheiro .docx obrigat√≥rio que servir√° de modelo.")

arquivo_logo = st.sidebar.file_uploader("Logo da Empresa (Opcional)", type=["png", "jpg", "jpeg"])

# --- Carregamento e Processamento dos Dados ---
df_pgr = pd.DataFrame([{'categoria': 'fisico', 'risco': 'Ru√≠do', 'possiveis_danos': 'Perda auditiva, zumbido, estresse, irritabilidade.'}, {'categoria': 'fisico', 'risco': 'Vibra√ß√£o', 'possiveis_danos': 'Doen√ßas osteomusculares, problemas circulat√≥rios.'}, {'categoria': 'fisico', 'risco': 'Calor', 'possiveis_danos': 'Desidrata√ß√£o, insola√ß√£o, c√£ibras, exaust√£o, interma√ß√£o.'}, {'categoria': 'fisico', 'risco': 'Frio', 'possiveis_danos': 'Hipotermia, congelamento, doen√ßas respirat√≥rias.'}, {'categoria': 'fisico', 'risco': 'Radia√ß√µes Ionizantes', 'possiveis_danos': 'C√¢ncer, muta√ß√µes gen√©ticas, queimaduras.'}, {'categoria': 'fisico', 'risco': 'Radia√ß√µes N√£o Ionizantes', 'possiveis_danos': 'Queimaduras, les√µes oculares, c√¢ncer de pele.'}, {'categoria': 'fisico', 'risco': 'Press√µes Anormais', 'possiveis_danos': 'Doen√ßa descompressiva, barotrauma.'}, {'categoria': 'quimico', 'risco': 'Poeiras', 'possiveis_danos': 'Pneumoconioses, irrita√ß√£o respirat√≥ria, alergias.'}, {'categoria': 'quimico', 'risco': 'Fumos', 'possiveis_danos': 'Doen√ßas respirat√≥rias, intoxica√ß√µes.'}, {'categoria': 'quimico', 'risco': 'N√©voas', 'possiveis_danos': 'Irrita√ß√£o respirat√≥ria, dermatites.'}, {'categoria': 'quimico', 'risco': 'Gases', 'possiveis_danos': 'Asfixia, intoxica√ß√µes, irrita√ß√£o respirat√≥ria.'}, {'categoria': 'quimico', 'risco': 'Vapores', 'possiveis_danos': 'Irrita√ß√£o respirat√≥ria, intoxica√ß√µes, dermatites.'}, {'categoria': 'quimico', 'risco': 'Subst√¢ncias Qu√≠micas (l√≠quidos e s√≥lidos)', 'possiveis_danos': 'Queimaduras, irrita√ß√µes, intoxica√ß√µes, dermatites, c√¢ncer.'}, {'categoria': 'biologico', 'risco': 'Bact√©rias', 'possiveis_danos': 'Infec√ß√µes, doen√ßas infecciosas.'}, {'categoria': 'biologico', 'risco': 'Fungos', 'possiveis_danos': 'Micoses, alergias, infec√ß√µes respirat√≥rias.'}, {'categoria': 'biologico', 'risco': 'V√≠rus', 'possiveis_danos': 'Doen√ßas virais, infec√ß√µes.'}, {'categoria': 'biologico', 'risco': 'Parasitas', 'possiveis_danos': 'Doen√ßas parasit√°rias, infec√ß√µes.'}, {'categoria': 'biologico', 'risco': 'Protozo√°rios', 'possiveis_danos': 'Doen√ßas parasit√°rias.'}, {'categoria': 'ergonomico', 'risco': 'Levantamento e Transporte Manual de Peso', 'possiveis_danos': 'Les√µes musculoesquel√©ticas, dores na coluna.'}, {'categoria': 'ergonomico', 'risco': 'Posturas Inadequadas', 'possiveis_danos': 'Dores musculares, les√µes na coluna, LER/DORT.'}, {'categoria': 'ergonomico', 'risco': 'Repetitividade', 'possiveis_danos': 'LER/DORT, tendinites, s√≠ndrome do t√∫nel do carpo.'}, {'categoria': 'ergonomico', 'risco': 'Jornada de Trabalho Prolongada', 'possiveis_danos': 'Fadiga, estresse, acidentes de trabalho.'}, {'categoria': 'ergonomico', 'risco': 'Monotonia e Ritmo Excessivo', 'possiveis_danos': 'Estresse, fadiga mental, desmotiva√ß√£o.'}, {'categoria': 'ergonomico', 'risco': 'Controle R√≠gido de Produtividade', 'possiveis_danos': 'Estresse, ansiedade, burnout.'}, {'categoria': 'ergonomico', 'risco': 'Ilumina√ß√£o Inadequada', 'possiveis_danos': 'Fadiga visual, dores de cabe√ßa.'}, {'categoria': 'ergonomico', 'risco': 'Mobili√°rio Inadequado', 'possiveis_danos': 'Dores musculares, les√µes na coluna.'}, {'categoria': 'acidente', 'risco': 'Arranjo F√≠sico Inadequado', 'possiveis_danos': 'Quedas, colis√µes, esmagamentos.'}, {'categoria': 'acidente', 'risco': 'M√°quinas e Equipamentos sem Prote√ß√£o', 'possiveis_danos': 'Amputa√ß√µes, cortes, esmagamentos, prensamentos.'}, {'categoria': 'acidente', 'risco': 'Ferramentas Inadequadas ou Defeituosas', 'possiveis_danos': 'Cortes, perfura√ß√µes, fraturas.'}, {'categoria': 'acidente', 'risco': 'Eletricidade', 'possiveis_danos': 'Choque el√©trico, queimaduras, fibrila√ß√£o ventricular.'}, {'categoria': 'acidente', 'risco': 'Inc√™ndio e Explos√£o', 'possiveis_danos': 'Queimaduras, asfixia, les√µes por impacto.'}, {'categoria': 'acidente', 'risco': 'Animais Pe√ßonhentos', 'possiveis_danos': 'Picadas, mordidas, rea√ß√µes al√©rgicas, envenenamento.'}, {'categoria': 'acidente', 'risco': 'Armazenamento Inadequado', 'possiveis_danos': 'Quedas de materiais, esmagamentos, soterramentos.'}, {'categoria': 'acidente', 'risco': 'Outros (especificar)', 'possiveis_danos': 'Variados, dependendo do risco espec√≠fico.'}, {'categoria': 'fisico', 'risco': 'Umidade', 'possiveis_danos': 'Doen√ßas respirat√≥rias, dermatites.'}, {'categoria': 'quimico', 'risco': 'Agrot√≥xicos', 'possiveis_danos': 'Intoxica√ß√µes, dermatites, c√¢ncer.'}, {'categoria': 'biologico', 'risco': 'Parasitas e Protozo√°rios', 'possiveis_danos': 'Doen√ßas parasit√°rias.'}, {'categoria': 'ergonomico', 'risco': 'Ritmo de Trabalho Excessivo', 'possiveis_danos': 'Estresse, fadiga, LER/DORT.'}, {'categoria': 'acidente', 'risco': 'Trabalho em Altura', 'possiveis_danos': 'Quedas, fraturas, morte.'}, {'categoria': 'acidente', 'risco': 'Espa√ßos Confinados', 'possiveis_danos': 'Asfixia, intoxica√ß√µes, explos√µes.'}, {'categoria': 'acidente', 'risco': 'Condu√ß√£o de Ve√≠culos', 'possiveis_danos': 'Acidentes de tr√¢nsito, les√µes diversas.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a Agentes Biol√≥gicos', 'possiveis_danos': 'Infec√ß√µes, doen√ßas.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a Agentes Qu√≠micos', 'possiveis_danos': 'Intoxica√ß√µes, queimaduras.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a Agentes F√≠sicos', 'possiveis_danos': 'Les√µes diversas.'}, {'categoria': 'acidente', 'risco': 'Agress√£o F√≠sica', 'possiveis_danos': 'Les√µes f√≠sicas e psicol√≥gicas.'}, {'categoria': 'acidente', 'risco': 'Assalto/Roubo', 'possiveis_danos': 'Les√µes f√≠sicas e psicol√≥gicas.'}, {'categoria': 'acidente', 'risco': 'Atropelamento', 'possiveis_danos': 'Les√µes diversas, morte.'}, {'categoria': 'acidente', 'risco': 'Choque contra', 'possiveis_danos': 'Contus√µes, fraturas.'}, {'categoria': 'acidente', 'risco': 'Contato com superf√≠cie, subst√¢ncia ou objeto quente', 'possiveis_danos': 'Queimaduras.'}, {'categoria': 'acidente', 'risco': 'Contato com superf√≠cie, subst√¢ncia ou objeto frio', 'possiveis_danos': 'Queimaduras, hipotermia.'}, {'categoria': 'acidente', 'risco': 'Corte/Lacera√ß√£o', 'possiveis_danos': 'Ferimentos, hemorragias.'}, {'categoria': 'acidente', 'risco': 'Esmagamento', 'possiveis_danos': 'Fraturas, les√µes internas, amputa√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a ru√≠do', 'possiveis_danos': 'Perda auditiva.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a vibra√ß√£o', 'possiveis_danos': 'Doen√ßas osteomusculares.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a calor', 'possiveis_danos': 'Desidrata√ß√£o, insola√ß√£o.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a frio', 'possiveis_danos': 'Hipotermia, congelamento.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a radia√ß√µes', 'possiveis_danos': 'Queimaduras, c√¢ncer.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a press√µes anormais', 'possiveis_danos': 'Barotrauma.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a poeiras', 'possiveis_danos': 'Pneumoconioses.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a fumos', 'possiveis_danos': 'Doen√ßas respirat√≥rias.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a n√©voas', 'possiveis_danos': 'Irrita√ß√£o respirat√≥ria.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a gases', 'possiveis_danos': 'Asfixia, intoxica√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a vapores', 'possiveis_danos': 'Irrita√ß√£o respirat√≥ria.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a subst√¢ncias qu√≠micas', 'possiveis_danos': 'Queimaduras, intoxica√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a bact√©rias', 'possiveis_danos': 'Infec√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a fungos', 'possiveis_danos': 'Micoses.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a v√≠rus', 'possiveis_danos': 'Doen√ßas virais.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a parasitas', 'possiveis_danos': 'Doen√ßas parasit√°rias.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a protozo√°rios', 'possiveis_danos': 'Doen√ßas parasit√°rias.'}, {'categoria': 'acidente', 'risco': 'Esfor√ßo f√≠sico intenso', 'possiveis_danos': 'Les√µes musculoesquel√©ticas.'}, {'categoria': 'acidente', 'risco': 'Postura inadequada', 'possiveis_danos': 'Dores musculares.'}, {'categoria': 'acidente', 'risco': 'Repetitividade de movimentos', 'possiveis_danos': 'LER/DORT.'}, {'categoria': 'acidente', 'risco': 'Jornada de trabalho prolongada', 'possiveis_danos': 'Fadiga, estresse.'}, {'categoria': 'acidente', 'risco': 'Monotonia', 'possiveis_danos': 'Estresse, desmotiva√ß√£o.'}, {'categoria': 'acidente', 'risco': 'Ritmo excessivo', 'possiveis_danos': 'Estresse, ansiedade.'}, {'categoria': 'acidente', 'risco': 'Ilumina√ß√£o inadequada', 'possiveis_danos': 'Fadiga visual.'}, {'categoria': 'acidente', 'risco': 'Mobili√°rio inadequado', 'possiveis_danos': 'Dores musculares.'}, {'categoria': 'acidente', 'risco': 'Arranjo f√≠sico inadequado', 'possiveis_danos': 'Quedas, colis√µes.'}, {'categoria': 'acidente', 'risco': 'M√°quinas e equipamentos sem prote√ß√£o', 'possiveis_danos': 'Amputa√ß√µes, cortes.'}, {'categoria': 'acidente', 'risco': 'Ferramentas inadequadas', 'possiveis_danos': 'Cortes, perfura√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Eletricidade', 'possiveis_danos': 'Choque el√©trico.'}, {'categoria': 'acidente', 'risco': 'Inc√™ndio', 'possiveis_danos': 'Queimaduras, asfixia.'}, {'categoria': 'acidente', 'risco': 'Explos√£o', 'possiveis_danos': 'Queimaduras, les√µes por impacto.'}, {'categoria': 'acidente', 'risco': 'Animais pe√ßonhentos', 'possiveis_danos': 'Picadas, mordidas.'}, {'categoria': 'acidente', 'risco': 'Armazenamento inadequado', 'possiveis_danos': 'Quedas de materiais.'}, {'categoria': 'acidente', 'risco': 'Outros', 'possiveis_danos': 'Variados.'}, {'categoria': 'acidente', 'risco': 'Abertura no piso', 'possiveis_danos': 'Queda de pessoa com diferen√ßa de n√≠vel.'}, {'categoria': 'acidente', 'risco': 'Agress√£o de animais', 'possiveis_danos': 'Mordidas, arranh√µes, infec√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Agress√£o de pessoas', 'possiveis_danos': 'Les√µes f√≠sicas, traumas psicol√≥gicos.'}, {'categoria': 'acidente', 'risco': 'Armazenamento de produtos qu√≠micos', 'possiveis_danos': 'Vazamentos, derramamentos, inc√™ndios, explos√µes.'}, {'categoria': 'acidente', 'risco': 'Aus√™ncia de sinaliza√ß√£o', 'possiveis_danos': 'Acidentes diversos.'}, {'categoria': 'acidente', 'risco': 'Caminh√£o/Carreta', 'possiveis_danos': 'Atropelamento, colis√£o, esmagamento.'}, {'categoria': 'acidente', 'risco': 'Carga e descarga de materiais', 'possiveis_danos': 'Quedas, esmagamentos, les√µes por esfor√ßo.'}, {'categoria': 'acidente', 'risco': 'Choque el√©trico', 'possiveis_danos': 'Queimaduras, parada card√≠aca.'}, {'categoria': 'acidente', 'risco': 'Colis√£o', 'possiveis_danos': 'Contus√µes, fraturas, les√µes internas.'}, {'categoria': 'acidente', 'risco': 'Contato com m√°quinas e/ou equipamentos', 'possiveis_danos': 'Prensamento, corte, esmagamento.'}, {'categoria': 'acidente', 'risco': 'Contato com objetos cortantes/perfurocortantes', 'possiveis_danos': 'Cortes, perfura√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Contato com produtos qu√≠micos', 'possiveis_danos': 'Queimaduras, irrita√ß√µes, intoxica√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Desabamento/Soterramento', 'possiveis_danos': 'Asfixia, esmagamento, morte.'}, {'categoria': 'acidente', 'risco': 'Empilhadeira', 'possiveis_danos': 'Atropelamento, colis√£o, esmagamento.'}, {'categoria': 'acidente', 'risco': 'Escada (m√≥vel ou fixa)', 'possiveis_danos': 'Quedas, fraturas.'}, {'categoria': 'acidente', 'risco': 'Explos√£o', 'possiveis_danos': 'Queimaduras, les√µes por impacto, morte.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a agentes biol√≥gicos', 'possiveis_danos': 'Infec√ß√µes, doen√ßas.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a agentes qu√≠micos', 'possiveis_danos': 'Intoxica√ß√µes, queimaduras.'}, {'categoria': 'acidente', 'risco': 'Exposi√ß√£o a agentes f√≠sicos', 'possiveis_danos': 'Les√µes diversas.'}, {'categoria': 'acidente', 'risco': 'Faca/Estilete', 'possiveis_danos': 'Cortes, perfura√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Ferramentas manuais', 'possiveis_danos': 'Cortes, contus√µes.'}, {'categoria': 'acidente', 'risco': 'Gases inflam√°veis', 'possiveis_danos': 'Inc√™ndio, explos√£o.'}, {'categoria': 'acidente', 'risco': 'Impacto de objetos', 'possiveis_danos': 'Contus√µes, fraturas.'}, {'categoria': 'acidente', 'risco': 'Inc√™ndio', 'possiveis_danos': 'Queimaduras, asfixia, morte.'}, {'categoria': 'acidente', 'risco': 'Ingest√£o de subst√¢ncia c√°ustica, t√≥xica ou nociva.', 'possiveis_danos': 'Intoxica√ß√£o, envenenamento, queimadura, irrita√ß√£o ou rea√ß√£o al√©rgica.'}, {'categoria': 'acidente', 'risco': 'Inala√ß√£o, ingest√£o e/ou absor√ß√£o.', 'possiveis_danos': 'Intoxica√ß√£o, envenenamento, queimadura, irrita√ß√£o ou rea√ß√£o al√©rgica.'}, {'categoria': 'acidente', 'risco': 'Inc√™ndio/Explos√£o', 'possiveis_danos': 'Queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau, asfixia,  arremessos, cortes, escoria√ß√µes, luxa√ß√µes, fraturas.'}, {'categoria': 'acidente', 'risco': 'Objetos cortantes/perfurocortantes', 'possiveis_danos': 'Corte, lacera√ß√£o, ferida contusa, punctura (ferida aberta), perfura√ß√£o.'}, {'categoria': 'acidente', 'risco': 'Pessoas n√£o autorizadas e/ou visitantes no local de trabalho', 'possiveis_danos': 'Escoria√ß√£o, ferimento, corte, luxa√ß√£o, fratura, entre outros danos devido √†s caracter√≠sticas do local e atividades realizadas.'}, {'categoria': 'acidente', 'risco': 'Portas, escotilhas, tampas, "bocas de visita", flanges', 'possiveis_danos': 'Prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes, exposi√ß√£o √† gases t√≥xicos.'}, {'categoria': 'acidente', 'risco': 'Proje√ß√£o de Part√≠culas s√≥lidas e/ou l√≠quidas', 'possiveis_danos': 'Ferimento, corte, queimadura, perfura√ß√£o, intoxica√ß√£o.'}, {'categoria': 'acidente', 'risco': 'Queda de pessoa com diferen√ßa de n√≠vel de andaime, passarela, plataforma, etc.', 'possiveis_danos': 'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.'}, {'categoria': 'acidente', 'risco': 'Queda de pessoa com diferen√ßa de n√≠vel de escada (m√≥vel ou fixa).', 'possiveis_danos': 'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.'}, {'categoria': 'acidente', 'risco': 'Queda de pessoa com diferen√ßa de n√≠vel de material empilhado.', 'possiveis_danos': 'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.'}, {'categoria': 'acidente', 'risco': 'Queda de pessoa com diferen√ßa de n√≠vel de ve√≠culo.', 'possiveis_danos': 'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.'}, {'categoria': 'acidente', 'risco': 'Queda de pessoa com diferen√ßa de n√≠vel em po√ßo, escava√ß√£o, abertura no piso, etc.', 'possiveis_danos': 'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.'}, {'categoria': 'acidente', 'risco': 'Queda de pessoa com diferen√ßa de n√≠vel <= 2m', 'possiveis_danos': 'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.'}, {'categoria': 'acidente', 'risco': 'Queda de pessoa com diferen√ßa de n√≠vel > 2m', 'possiveis_danos': 'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.'}, {'categoria': 'acidente', 'risco': 'Queda de pessoa em mesmo n√≠vel', 'possiveis_danos': 'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas.'}, {'categoria': 'acidente', 'risco': 'Rea√ß√£o do corpo a seus movimentos (escorreg√£o sem queda, etc.)', 'possiveis_danos': 'Tor√ß√µes, distens√ß√µes, rupturas ou outras les√µes musculares internas.'}, {'categoria': 'acidente', 'risco': 'Vidro (recipientes, portas, bancadas, janelas, objetos diversos).', 'possiveis_danos': 'Corte, ferimento, perfura√ß√£o.'}, {'categoria': 'acidente', 'risco': 'Soterramento', 'possiveis_danos': 'Asfixia, desconforto respirat√≥rio, n√≠vel de consci√™ncia alterado, letargia, palidez, pele azulada, tosse, transtorno neurol√≥gico.'}, {'categoria': 'acidente', 'risco': 'Subst√¢ncias t√≥xicas e/ou inflam√°veis', 'possiveis_danos': 'Intoxica√ß√£o, asfixia, queimaduras de  1¬∫, 2¬∫ ou 3¬∫ grau.'}, {'categoria': 'acidente', 'risco': 'Superf√≠cies, subst√¢ncias e/ou objetos aquecidos ', 'possiveis_danos': 'Queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau.'}, {'categoria': 'acidente', 'risco': 'Superf√≠cies, subst√¢ncias e/ou objetos em baixa temperatura ', 'possiveis_danos': 'Queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau.'}, {'categoria': 'acidente', 'risco': 'Tombamento, quebra e/ou ruptura de estrutura (fixa ou m√≥vel)', 'possiveis_danos': 'Prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Tombamento de m√°quina/equipamento', 'possiveis_danos': 'Prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Trabalho √† c√©u aberto', 'possiveis_danos': 'Interma√ß√£o, insola√ß√£o, c√£ibra, exaust√£o, desidrata√ß√£o, resfriados.'}, {'categoria': 'acidente', 'risco': 'Trabalho em espa√ßos confinados', 'possiveis_danos': 'Asfixia, hiper√≥xia, contamina√ß√£o por poeiras e/ou gases t√≥xicos, queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau, arremessos, cortes, escoria√ß√µes, luxa√ß√µes, fraturas.'}, {'categoria': 'acidente', 'risco': 'Trabalho com m√°quinas port√°teis rotativas.', 'possiveis_danos': 'Cortes, ferimentos, escoria√ß√µes, amputa√ß√µes.'}, {'categoria': 'acidente', 'risco': 'Trabalho com m√°quinas e/ou equipamentos', 'possiveis_danos': 'Prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes, choque el√©trico.'}])
df_funcionarios_raw = carregar_planilha(arquivo_funcionarios)
df_funcionarios = mapear_e_renomear_colunas_funcionarios(df_funcionarios_raw) if df_funcionarios_raw is not None else None

# --- Valida√ß√£o e Entrada de Dados Faltantes ---
colunas_ok = False
if df_funcionarios is not None:
    colunas_necessarias = ['nome_do_funcionario', 'funcao', 'setor', 'data_de_admissao']
    colunas_faltantes = [col for col in colunas_necessarias if col not in df_funcionarios.columns]

    if colunas_faltantes:
        st.error(f"**Erro na Planilha de Funcion√°rios!**\n\n"
                 f"As seguintes colunas obrigat√≥rias n√£o foram reconhecidas: **{', '.join(colunas_faltantes)}**.\n\n"
                 f"Verifique o seu ficheiro .xlsx.")
    else:
        if 'empresa' not in df_funcionarios.columns:
            empresa_input = st.text_input("Nome da Empresa", help="Esta informa√ß√£o n√£o foi encontrada na planilha.")
            if empresa_input: df_funcionarios['empresa'] = empresa_input

        if 'unidade' not in df_funcionarios.columns:
            unidade_input = st.text_input("Nome da Unidade/Filial", help="Esta informa√ß√£o n√£o foi encontrada na planilha.")
            if unidade_input: df_funcionarios['unidade'] = unidade_input

        if 'empresa' in df_funcionarios.columns and 'unidade' in df_funcionarios.columns:
            colunas_ok = True

# --- Interface Principal (s√≥ aparece se as colunas estiverem OK) ---
if colunas_ok:
    st.sidebar.header("2. Sele√ß√£o e Filtros")
    empresa_selecionada = st.sidebar.selectbox("Empresa", df_funcionarios["empresa"].unique())
    unidade_selecionada = st.sidebar.selectbox("Unidade", df_funcionarios[df_funcionarios["empresa"] == empresa_selecionada]["unidade"].unique())
    setor_selecionado = st.sidebar.selectbox("Setor", df_funcionarios[(df_funcionarios["empresa"] == empresa_selecionada) & (df_funcionarios["unidade"] == unidade_selecionada)]["setor"].unique())
    funcao_selecionada = st.sidebar.selectbox("Fun√ß√£o", df_funcionarios[(df_funcionarios["empresa"] == empresa_selecionada) & (df_funcionarios["unidade"] == unidade_selecionada) & (df_funcionarios["setor"] == setor_selecionado)]["funcao"].unique())

    # Contagem de funcion√°rios na hierarquia selecionada
    funcionarios_filtrados = df_funcionarios[
        (df_funcionarios["empresa"] == empresa_selecionada) &
        (df_funcionarios["unidade"] == unidade_selecionada) &
        (df_funcionarios["setor"] == setor_selecionado) &
        (df_funcionarios["funcao"] == funcao_selecionada)
    ]
    total_funcionarios = len(funcionarios_filtrados)
    
    # Exibir contagem na sidebar
    st.sidebar.info(f"**Funcion√°rios encontrados:** {total_funcionarios}")
    
    if total_funcionarios == 0:
        st.sidebar.warning("Nenhum funcion√°rio encontrado para esta sele√ß√£o.")

    st.subheader("Informa√ß√µes da Fun√ß√£o")
    descricao_atividades_input = st.text_area(f"Descri√ß√£o das Atividades da Fun√ß√£o: **{funcao_selecionada}**",
                                              value=st.session_state.descricoes.get(funcao_selecionada, ""), height=150)
    st.session_state.descricoes[funcao_selecionada] = descricao_atividades_input
    
    col1, col2 = st.columns(2)
    with col1:
        epis_manuais_input = st.text_input("Adicionar EPIs", help="Adicione EPIs extras separados por v√≠rgula (,).")
    with col2:
        medicoes_manuais_input = st.text_area("Adicionar Medi√ß√µes", height=100, help="Adicione medi√ß√µes extras, uma por linha.")
    
    with st.expander("Adicionar Risco Manualmente"):
        perigo_manual_input = st.text_input("Perigo (Fator de Risco/Agente Nocivo/Situa√ß√£o Perigosa)")
        danos_manuais_input = st.text_input("Poss√≠veis Danos ou Agravos √† Sa√∫de")
        categoria_manual_input = st.selectbox("Selecione a Categoria para o Risco Manual",
                                              options=["Acidentes", "Biol√≥gicos", "Ergon√¥micos", "F√≠sicos", "Qu√≠micos"])

    st.subheader("Sele√ß√£o de Riscos")
    categorias = {"F√≠sicos": "fisico", "Qu√≠micos": "quimico", "Biol√≥gicos": "biologico", "Ergon√¥micos": "ergonomico", "Acidentes": "acidente"}
    riscos_selecionados_total = []
    
    # Filtra a planilha PGR pela fun√ß√£o selecionada
    riscos_da_funcao = df_pgr[df_pgr['funcao'] == funcao_selecionada] if 'funcao' in df_pgr.columns else df_pgr.copy()

    for nome_exibicao, nome_categoria in categorias.items():
        with st.expander(f"Riscos {nome_exibicao}"):
            # Lista apenas os riscos da fun√ß√£o selecionada para a categoria atual
            riscos_para_selecao = riscos_da_funcao[riscos_da_funcao['categoria'] == nome_categoria]['risco'].unique().tolist()
            
            # Se n√£o h√° riscos cadastrados para esta categoria, permite adi√ß√£o manual
            if not riscos_para_selecao:
                st.info(f"Nenhum risco de {nome_exibicao.lower()} cadastrado para esta fun√ß√£o. Voc√™ pode adicionar riscos manualmente abaixo.")
                
                # Campo para adicionar riscos manualmente
                riscos_manuais_key = f"riscos_manuais_{nome_categoria}"
                if riscos_manuais_key not in st.session_state:
                    st.session_state[riscos_manuais_key] = []
                
                col1, col2 = st.columns([3, 1])
                with col1:
                    novo_risco = st.text_input(f"Adicionar risco {nome_exibicao.lower()}", key=f"input_{nome_categoria}")
                with col2:
                    if st.button("Adicionar", key=f"btn_{nome_categoria}"):
                        if novo_risco and novo_risco not in st.session_state[riscos_manuais_key]:
                            st.session_state[riscos_manuais_key].append(novo_risco)
                            st.rerun()
                
                # Exibe os riscos adicionados manualmente
                if st.session_state[riscos_manuais_key]:
                    st.write(f"Riscos {nome_exibicao.lower()} adicionados:")
                    for i, risco in enumerate(st.session_state[riscos_manuais_key]):
                        col1, col2 = st.columns([4, 1])
                        with col1:
                            st.write(f"‚Ä¢ {risco}")
                        with col2:
                            if st.button("Remover", key=f"remove_{nome_categoria}_{i}"):
                                st.session_state[riscos_manuais_key].remove(risco)
                                st.rerun()
                
                # Multiselect com os riscos adicionados manualmente
                selecionados = st.multiselect(f"Selecione os riscos de {nome_exibicao.lower()}",
                                              options=st.session_state[riscos_manuais_key], default=[], key=f"riscos_{nome_categoria}")
            else:
                # Multiselect normal com os riscos da planilha
                selecionados = st.multiselect(f"Selecione os riscos de {nome_exibicao.lower()}",
                                              options=riscos_para_selecao, default=[], key=f"riscos_{nome_categoria}")
            
            riscos_selecionados_total.extend(selecionados)

    st.sidebar.header("3. Selecionar Funcion√°rios")
    nomes_funcionarios = funcionarios_filtrados["nome_do_funcionario"].tolist()
    selecionar_todos = st.sidebar.checkbox("Selecionar Todos os Funcion√°rios")
    if selecionar_todos:
        funcionarios_selecionados = nomes_funcionarios
    else:
        funcionarios_selecionados = st.sidebar.multiselect("Escolha os funcion√°rios", options=nomes_funcionarios, default=[])

    st.header("4. Gera√ß√£o dos Documentos")
    if st.button("üöÄ Gerar OS", type="primary"):
        if not all([arquivo_funcionarios, arquivo_modelo]):
            st.error("Erro: Por favor, carregue os ficheiros de Funcion√°rios e Modelo de OS.")
        elif not funcionarios_selecionados:
            st.warning("Aten√ß√£o: Nenhum funcion√°rio foi selecionado.")
        else:
            with st.spinner("A gerar documentos..."):
                with tempfile.TemporaryDirectory() as tmpdirname:
                    zip_path = os.path.join(tmpdirname, "ordens_servico.zip")
                    with zipfile.ZipFile(zip_path, "w") as zipf:
                        for nome_func in funcionarios_selecionados:
                            dados_funcionario = funcionarios_filtrados[funcionarios_filtrados["nome_do_funcionario"] == nome_func].iloc[0]
                            doc_gerado = gerar_os(
                                dados_funcionario, df_pgr, 
                                arquivo_modelo, descricao_atividades_input, 
                                riscos_selecionados_total, epis_manuais_input, 
                                medicoes_manuais_input, perigo_manual_input, 
                                danos_manuais_input, categoria_manual_input, logo_path=arquivo_logo
                            )
                            
                            nome_arquivo_docx = f"OS_{nome_func.replace(' ', '_')}.docx"
                            caminho_docx = os.path.join(tmpdirname, nome_arquivo_docx)
                            doc_gerado.save(caminho_docx)
                            zipf.write(caminho_docx, os.path.basename(caminho_docx))


                    
                    with open(zip_path, "rb") as f:
                        st.download_button(
                            label="üì• Baixar Ficheiro ZIP",
                            data=f.read(),
                            file_name="Ordens_de_Servico.zip",
                            mime="application/zip"
                        )

elif df_funcionarios is None:
    st.warning("‚ö†Ô∏è **Planilha de Funcion√°rios n√£o carregada!**\n\nPor favor, carregue a planilha de funcion√°rios para continuar.")

else:
    st.info("‚è≥ **Aguardando informa√ß√µes...**\n\nPreencha os campos obrigat√≥rios para continuar.")

