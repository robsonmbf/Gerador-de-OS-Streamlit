import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import zipfile
from io import BytesIO
import time
import re
from datetime import datetime
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.models import DatabaseManager
from database.auth import AuthManager
from database.user_data import UserDataManager

# Configura√ß√£o
st.set_page_config(
    page_title="Gerador de OS",
    page_icon="üìã",
    layout="wide",
)

# CSS Melhorado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .user-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin-bottom: 1rem;
    }
    .metric-box {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        border: 2px solid #e9ecef;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    .metric-box h3 {
        color: #667eea;
        margin: 0;
        font-size: 2rem;
    }
    .metric-box p {
        color: #6c757d;
        margin: 0;
        font-size: 0.9rem;
    }
    .risk-category {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        border-left: 4px solid;
    }
    .risk-fisico { border-left-color: #dc3545; }
    .risk-quimico { border-left-color: #fd7e14; }
    .risk-biologico { border-left-color: #28a745; }
    .risk-ergonomico { border-left-color: #007bff; }
    .risk-acidente { border-left-color: #ffc107; }
    .risk-manual { border-left-color: #6f42c1; }
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    .stTabs [data-baseweb="tab"] {
        border-radius: 8px 8px 0 0;
        padding: 10px 20px;
    }
</style>
""", unsafe_allow_html=True)

# Constantes
UNIDADES_DE_MEDIDA = ["dB(A)", "m/s¬≤", "m/s¬π¬∑‚Å∑‚Åµ", "ppm", "mg/m¬≥", "%", "¬∞C", "lx", "cal/cm¬≤", "¬µT", "kV/m", "W/m¬≤", "f/cm¬≥", "N√£o aplic√°vel"]
CATEGORIAS_RISCO = {
    'fisico': 'üî• F√≠sicos',
    'quimico': '‚öóÔ∏è Qu√≠micos',
    'biologico': 'ü¶† Biol√≥gicos',
    'ergonomico': 'üèÉ Ergon√¥micos',
    'acidente': '‚ö†Ô∏è Acidentes'
}

# Dados PGR (mantidos conforme original)
RISCOS_PGR_DADOS = {
    'quimico': {
        'riscos': ['Exposi√ß√£o a Produto Qu√≠mico'],
        'danos': ['Irrita√ß√£o/les√£o ocular, na pele e mucosas; Dermatites; Queimadura Qu√≠mica; Intoxica√ß√£o; N√°useas; V√¥mitos.']
    },
    'fisico': {
        'riscos': ['Ambiente Artificialmente Frio', 'Exposi√ß√£o ao Ru√≠do', 'Vibra√ß√µes Localizadas (m√£o/bra√ßo)', 
                   'Vibra√ß√£o de Corpo Inteiro (AREN)', 'Vibra√ß√£o de Corpo Inteiro (VDVR)', 'Exposi√ß√£o √† Radia√ß√µes Ionizantes',
                   'Exposi√ß√£o √† Radia√ß√µes N√£o-ionizantes', 'Exposi√ß√£o √† Temperatura Ambiente Elevada', 
                   'Exposi√ß√£o √† Temperatura Ambiente Baixa', 'Press√£o Atmosf√©rica Anormal (condi√ß√µes hiperb√°ricas)', 'Umidade'],
        'danos': ['Estresse, desconforto, dorm√™ncia, rigidez nas partes com maior intensidade de exposi√ß√£o ao frio.',
                  'Perda Auditiva Induzida pelo Ru√≠do Ocupacional (PAIRO).', 'Altera√ß√µes articulares e vasomotoras.',
                  'Altera√ß√µes no sistema digestivo, sistema musculoesquel√©tico, sistema nervoso.', 
                  'Altera√ß√µes no sistema digestivo, sistema musculoesquel√©tico, sistema nervoso.',
                  'Dano √†s c√©lulas do corpo humano, causando doen√ßas graves, inclusive fatais, como c√¢ncer.',
                  'Depress√£o imunol√≥gica, fotoenvelhecimento, les√µes oculares.', 
                  'Desidrata√ß√£o, erup√ß√µes cut√¢neas, c√£ibras, fadiga f√≠sica.',
                  'Estresse, desconforto, dorm√™ncia, rigidez nas partes expostas ao frio.',
                  'Barotrauma pulmonar, les√£o de tecido pulmonar ou pneumot√≥rax.', 
                  'Doen√ßas do aparelho respirat√≥rio, quedas, doen√ßas de pele.']
    },
    'biologico': {
        'riscos': ['√Ågua e/ou alimentos contaminados', 'Contato com Fluido Org√¢nico (sangue, hemoderivados)', 
                   'Contato com Pessoas Doentes e/ou Material Infectocontagiante', 'Contamina√ß√£o pelo Corona V√≠rus',
                   'Exposi√ß√£o √† Agentes Microbiol√≥gicos (fungos, bact√©rias, v√≠rus)'],
        'danos': ['Intoxica√ß√£o, diarreias, infec√ß√µes intestinais.', 'Doen√ßas infectocontagiosas.', 
                  'Doen√ßas infectocontagiosas.', 'COVID-19, podendo causar gripes, febre, tosse seca.',
                  'Doen√ßas infectocontagiosas, dermatites, irrita√ß√£o.']
    },
    'ergonomico': {
        'riscos': ['Posturas inc√¥modas/pouco confort√°veis por longos per√≠odos', 'Postura sentada por longos per√≠odos',
                   'Postura em p√© por longos per√≠odos', 'Frequente deslocamento √† p√© durante √† jornada',
                   'Esfor√ßo f√≠sico intenso', 'Levantamento e transporte manual de cargas',
                   'Frequente execu√ß√£o de movimentos repetitivos', 'Uso frequente de for√ßa, press√£o, preens√£o'],
        'danos': ['Dist√∫rbios musculoesquel√©ticos em m√∫sculos e articula√ß√µes dos membros superiores, inferiores e coluna.',
                  'Sobrecarga dos membros superiores e coluna vertebral; Dor localizada.',
                  'Sobrecarga corporal, dores nos membros inferiores e coluna vertebral.',
                  'Sobrecarga corporal, dores nos membros inferiores e coluna.', 
                  'Dist√∫rbios musculoesquel√©ticos; Fadiga, Dor localizada.',
                  'Dist√∫rbios musculoesquel√©ticos; Fadiga, Dor localizada.',
                  'Dist√∫rbios osteomusculares em m√∫sculos e articula√ß√µes dos membros.',
                  'Sobrecarga muscular, fadiga, dor localizada.']
    },
    'acidente': {
        'riscos': ['Absor√ß√£o (por contato) de subst√¢ncia c√°ustica, t√≥xica', 'Afogamento, imers√£o, engolfamento',
                   'Aprisionamento em, sob ou entre', 'Ataque de ser vivo por mordedura, picada',
                   'Atrito ou abras√£o por encostar em objeto', 'Atropelamento', 'Batida contra objeto parado',
                   'Carga Suspensa', 'Colis√£o entre ve√≠culos e/ou equipamentos', 'Exposi√ß√£o √† Energia El√©trica',
                   'Inc√™ndio/Explos√£o', 'Objetos cortantes/perfurocortantes', 'Queda de pessoa com diferen√ßa de n√≠vel'],
        'danos': ['Intoxica√ß√£o, envenenamento, queimadura, irrita√ß√£o.', 'Asfixia, desconforto respirat√≥rio.',
                  'Compress√£o/esmagamento de partes do corpo, cortes, escoria√ß√µes, fraturas.',
                  'Perfura√ß√µes, cortes, arranh√µes, escoria√ß√µes.', 'Cortes, ferimentos, esfoladura.',
                  'Compress√£o/esmagamento de partes do corpo, cortes, fraturas.', 'Cortes, escoria√ß√µes, fraturas.',
                  'Esmagamento, prensamento de partes do corpo.', 'Compress√£o/esmagamento, cortes, fraturas.',
                  'Choque el√©trico e eletropless√£o (eletrocuss√£o).', 'Queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau, asfixia.',
                  'Corte, lacera√ß√£o, ferida contusa, punctura (ferida aberta).', 'Escoria√ß√µes, ferimentos, fraturas, morte.']
    }
}

def get_danos_por_riscos_pgr(categoria, riscos_selecionados):
    """Retorna danos associados aos riscos selecionados"""
    if categoria not in RISCOS_PGR_DADOS or not riscos_selecionados:
        return ""
    
    danos_lista = []
    riscos_categoria = RISCOS_PGR_DADOS[categoria]["riscos"]
    danos_categoria = RISCOS_PGR_DADOS[categoria]["danos"]
    
    for risco in riscos_selecionados:
        if risco in riscos_categoria:
            indice = riscos_categoria.index(risco)
            if indice < len(danos_categoria):
                danos_lista.append(danos_categoria[indice])
    
    return "; ".join(danos_lista) if danos_lista else ""

# Inicializa√ß√£o
@st.cache_resource
def init_managers():
    db_manager = DatabaseManager()
    auth_manager = AuthManager(db_manager)
    user_data_manager = UserDataManager(db_manager)
    return db_manager, auth_manager, user_data_manager

db_manager, auth_manager, user_data_manager = init_managers()

def show_login_page():
    st.markdown('<div class="main-header"><h1>üîê Gerador de Ordens de Servi√ßo</h1><p>Sistema Profissional de Gest√£o de OS</p></div>', unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs(["üîë Login", "üìù Cadastro"])
    
    with tab1:
        with st.form("login_form"):
            email = st.text_input("üìß Email", placeholder="seu@email.com")
            password = st.text_input("üîí Senha", type="password")
            
            if st.form_submit_button("üöÄ Entrar", use_container_width=True, type="primary"):
                if email and password:
                    success, message, session_data = auth_manager.login_user(email, password)
                    if success:
                        st.session_state.authenticated = True
                        st.session_state.user_data = session_data
                        st.session_state.user_data_loaded = False
                        st.success(message)
                        time.sleep(0.5)
                        st.rerun()
                    else:
                        st.error(message)
                else:
                    st.warning("Preencha todos os campos")
    
    with tab2:
        with st.form("register_form"):
            reg_email = st.text_input("üìß Email", placeholder="seu@email.com", key="reg_email")
            reg_password = st.text_input("üîí Senha (m√≠n. 6 caracteres)", type="password", key="reg_password")
            reg_password_confirm = st.text_input("üîí Confirmar Senha", type="password")
            
            if st.form_submit_button("‚úÖ Criar Conta", use_container_width=True, type="primary"):
                if reg_email and reg_password and reg_password_confirm:
                    if reg_password != reg_password_confirm:
                        st.error("‚ùå As senhas n√£o coincidem")
                    else:
                        success, message = auth_manager.register_user(reg_email, reg_password)
                        if success:
                            st.success(message)
                            st.info("‚úÖ Agora voc√™ pode fazer login!")
                        else:
                            st.error(message)
                else:
                    st.warning("Preencha todos os campos")

def check_authentication():
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'user_data' not in st.session_state:
        st.session_state.user_data = None
    if st.session_state.authenticated and st.session_state.user_data:
        session_token = st.session_state.user_data.get('session_token')
        if session_token:
            is_valid, _ = auth_manager.validate_session(session_token)
            if not arquivo_funcionarios or not arquivo_modelo_os:
        st.info("üìã Carregue os documentos para continuar")
        return
    
    df_funcionarios_raw = carregar_planilha(arquivo_funcionarios)
    if df_funcionarios_raw is None:
        st.stop()

    df_funcionarios = mapear_e_renomear_colunas_funcionarios(df_funcionarios_raw)

    # Sele√ß√£o de funcion√°rios
    with st.container(border=True):
        st.markdown('#### üë• 2. Selecionar Funcion√°rios')
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown('<div class="metric-box"><h3>üìä</h3><p>Total de Funcion√°rios</p><h3>' + str(len(df_funcionarios)) + '</h3></div>', unsafe_allow_html=True)
        
        with col2:
            setores = sorted(df_funcionarios['setor'].dropna().unique().tolist()) if 'setor' in df_funcionarios.columns else []
            st.markdown('<div class="metric-box"><h3>üè¢</h3><p>Setores</p><h3>' + str(len(setores)) + '</h3></div>', unsafe_allow_html=True)
        
        with col3:
            funcoes = sorted(df_funcionarios['funcao'].dropna().unique().tolist()) if 'funcao' in df_funcionarios.columns else []
            st.markdown('<div class="metric-box"><h3>üíº</h3><p>Fun√ß√µes</p><h3>' + str(len(funcoes)) + '</h3></div>', unsafe_allow_html=True)
        
        st.markdown("---")
        
        setor_sel = st.multiselect("üè¢ Filtrar por Setor(es)", setores, help="Selecione um ou mais setores")
        df_filtrado_setor = df_funcionarios[df_funcionarios['setor'].isin(setor_sel)] if setor_sel else df_funcionarios
        
        funcoes_disponiveis = sorted(df_filtrado_setor['funcao'].dropna().unique().tolist()) if 'funcao' in df_filtrado_setor.columns else []
        funcoes_formatadas = []
        if setor_sel:
            for funcao in funcoes_disponiveis:
                concluido = all((s, funcao) in st.session_state.cargos_concluidos for s in setor_sel)
                if concluido:
                    funcoes_formatadas.append(f"{funcao} ‚úÖ")
                else:
                    funcoes_formatadas.append(funcao)
        else:
            funcoes_formatadas = funcoes_disponiveis
        
        funcao_sel_formatada = st.multiselect("üíº Filtrar por Fun√ß√£o/Cargo(s)", funcoes_formatadas)
        funcao_sel = [f.replace(" ‚úÖ", "") for f in funcao_sel_formatada]
        
        df_final_filtrado = df_filtrado_setor[df_filtrado_setor['funcao'].isin(funcao_sel)] if funcao_sel else df_filtrado_setor
        
        if len(df_final_filtrado) > 0:
            st.success(f"‚úÖ **{len(df_final_filtrado)} funcion√°rio(s) selecionado(s)**")
            with st.expander("üëÄ Visualizar funcion√°rios selecionados"):
                st.dataframe(df_final_filtrado[['nome_do_funcionario', 'setor', 'funcao']], use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Nenhum funcion√°rio selecionado")

    # Configura√ß√£o de riscos
    with st.container(border=True):
        st.markdown('#### ‚ö†Ô∏è 3. Configurar Riscos Ocupacionais')
        st.info("üí° Configure os riscos que ser√£o aplicados a TODOS os funcion√°rios selecionados")

        tab_fisico, tab_quimico, tab_biologico, tab_ergonomico, tab_acidente, tab_manual = st.tabs([
            "üî• F√≠sicos", "‚öóÔ∏è Qu√≠micos", "ü¶† Biol√≥gicos", "üèÉ Ergon√¥micos", "‚ö†Ô∏è Acidentes", "‚ûï Manual"
        ])

        riscos_selecionados_pgr = {}

        with tab_fisico:
            st.markdown('<div class="risk-category risk-fisico"><h4>üî• Riscos F√≠sicos</h4></div>', unsafe_allow_html=True)
            if 'fisico' in RISCOS_PGR_DADOS:
                st.caption(f"üìã {len(RISCOS_PGR_DADOS['fisico']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['fisico'] = st.multiselect(
                    "Selecione os riscos:",
                    options=RISCOS_PGR_DADOS['fisico']['riscos'],
                    key="riscos_pgr_fisico"
                )
                if riscos_selecionados_pgr['fisico']:
                    danos = get_danos_por_riscos_pgr('fisico', riscos_selecionados_pgr['fisico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        with tab_quimico:
            st.markdown('<div class="risk-category risk-quimico"><h4>‚öóÔ∏è Riscos Qu√≠micos</h4></div>', unsafe_allow_html=True)
            if 'quimico' in RISCOS_PGR_DADOS:
                st.caption(f"üìã {len(RISCOS_PGR_DADOS['quimico']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['quimico'] = st.multiselect(
                    "Selecione os riscos:",
                    options=RISCOS_PGR_DADOS['quimico']['riscos'],
                    key="riscos_pgr_quimico"
                )
                if riscos_selecionados_pgr['quimico']:
                    danos = get_danos_por_riscos_pgr('quimico', riscos_selecionados_pgr['quimico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        with tab_biologico:
            st.markdown('<div class="risk-category risk-biologico"><h4>ü¶† Riscos Biol√≥gicos</h4></div>', unsafe_allow_html=True)
            if 'biologico' in RISCOS_PGR_DADOS:
                st.caption(f"üìã {len(RISCOS_PGR_DADOS['biologico']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['biologico'] = st.multiselect(
                    "Selecione os riscos:",
                    options=RISCOS_PGR_DADOS['biologico']['riscos'],
                    key="riscos_pgr_biologico"
                )
                if riscos_selecionados_pgr['biologico']:
                    danos = get_danos_por_riscos_pgr('biologico', riscos_selecionados_pgr['biologico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        with tab_ergonomico:
            st.markdown('<div class="risk-category risk-ergonomico"><h4>üèÉ Riscos Ergon√¥micos</h4></div>', unsafe_allow_html=True)
            if 'ergonomico' in RISCOS_PGR_DADOS:
                st.caption(f"üìã {len(RISCOS_PGR_DADOS['ergonomico']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['ergonomico'] = st.multiselect(
                    "Selecione os riscos:",
                    options=RISCOS_PGR_DADOS['ergonomico']['riscos'],
                    key="riscos_pgr_ergonomico"
                )
                if riscos_selecionados_pgr['ergonomico']:
                    danos = get_danos_por_riscos_pgr('ergonomico', riscos_selecionados_pgr['ergonomico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        with tab_acidente:
            st.markdown('<div class="risk-category risk-acidente"><h4>‚ö†Ô∏è Riscos de Acidente</h4></div>', unsafe_allow_html=True)
            if 'acidente' in RISCOS_PGR_DADOS:
                st.caption(f"üìã {len(RISCOS_PGR_DADOS['acidente']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['acidente'] = st.multiselect(
                    "Selecione os riscos:",
                    options=RISCOS_PGR_DADOS['acidente']['riscos'],
                    key="riscos_pgr_acidente"
                )
                if riscos_selecionados_pgr['acidente']:
                    danos = get_danos_por_riscos_pgr('acidente', riscos_selecionados_pgr['acidente'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        with tab_manual:
            st.markdown('<div class="risk-category risk-manual"><h4>‚ûï Riscos Personalizados</h4></div>', unsafe_allow_html=True)
            with st.form("form_risco_manual", clear_on_submit=True):
                risco_manual_nome = st.text_input("üìù Descri√ß√£o do Risco")
                categoria_manual = st.selectbox("üè∑Ô∏è Categoria", list(CATEGORIAS_RISCO.values()))
                danos_manuais = st.text_area("‚öïÔ∏è Poss√≠veis Danos (Opcional)")
                
                if st.form_submit_button("‚ûï Adicionar Risco", type="primary", use_container_width=True):
                    if risco_manual_nome and categoria_manual:
                        user_data_manager.add_manual_risk(user_id, categoria_manual, risco_manual_nome, danos_manuais)
                        st.session_state.user_data_loaded = False
                        st.success("‚úÖ Risco adicionado!")
                        time.sleep(0.5)
                        st.rerun()
            
            if st.session_state.riscos_manuais_adicionados:
                st.markdown("**üìã Riscos manuais salvos:**")
                for r in st.session_state.riscos_manuais_adicionados:
                    col1, col2 = st.columns([5, 1])
                    col1.markdown(f"‚Ä¢ **{r['risk_name']}** ({r['category']})")
                    if col2.button("üóëÔ∏è", key=f"rem_risco_{r['id']}", help="Remover"):
                        user_data_manager.remove_manual_risk(user_id, r['id'])
                        st.session_state.user_data_loaded = False
                        st.rerun()

        # Resumo de riscos
        total_riscos_pgr = sum(len(riscos) for riscos in riscos_selecionados_pgr.values())
        total_riscos = total_riscos_pgr + len(st.session_state.riscos_manuais_adicionados)
        
        if total_riscos > 0:
            with st.expander(f"üìä Resumo de Riscos Selecionados ({total_riscos} total)", expanded=True):
                for categoria_key, categoria_display in CATEGORIAS_RISCO.items():
                    riscos_lista = []
                    if categoria_key in riscos_selecionados_pgr and riscos_selecionados_pgr[categoria_key]:
                        riscos_lista.extend(riscos_selecionados_pgr[categoria_key])
                    
                    for risco_manual in st.session_state.riscos_manuais_adicionados:
                        if risco_manual['category'] == categoria_display:
                            riscos_lista.append(f"{risco_manual['risk_name']} (Manual)")
                    
                    if riscos_lista:
                        st.markdown(f"**{categoria_display}** ({len(riscos_lista)})")
                        for risco in sorted(list(set(riscos_lista))):
                            st.markdown(f"‚Ä¢ {risco}")

    # Medi√ß√µes e EPIs
    with st.container(border=True):
        st.markdown('#### üõ°Ô∏è 4. Medi√ß√µes e EPIs')
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üìä Medi√ß√µes Ambientais**")
            with st.form("form_medicao", clear_on_submit=True):
                agente = st.text_input("üî¨ Agente/Fonte")
                valor = st.text_input("üìà Valor Medido")
                unidade = st.selectbox("üìè Unidade", UNIDADES_DE_MEDIDA)
                epi_med = st.text_input("ü¶∫ EPI Associado (Opcional)")
                
                if st.form_submit_button("‚ûï Adicionar", use_container_width=True):
                    if agente and valor:
                        user_data_manager.add_measurement(user_id, agente, valor, unidade, epi_med)
                        st.session_state.user_data_loaded = False
                        st.success("‚úÖ Medi√ß√£o adicionada!")
                        time.sleep(0.5)
                        st.rerun()
            
            if st.session_state.medicoes_adicionadas:
                st.markdown("**üìã Medi√ß√µes salvas:**")
                for med in st.session_state.medicoes_adicionadas:
                    col_a, col_b = st.columns([5, 1])
                    col_a.markdown(f"‚Ä¢ {med['agent']}: {med['value']} {med['unit']}")
                    if col_b.button("üóëÔ∏è", key=f"rem_med_{med['id']}", help="Remover"):
                        user_data_manager.remove_measurement(user_id, med['id'])
                        st.session_state.user_data_loaded = False
                        st.rerun()
        
        with col2:
            st.markdown("**ü¶∫ EPIs Gerais**")
            with st.form("form_epi", clear_on_submit=True):
                epi_nome = st.text_input("üõ°Ô∏è Nome do EPI")
                
                if st.form_submit_button("‚ûï Adicionar", use_container_width=True):
                    if epi_nome:
                        user_data_manager.add_epi(user_id, epi_nome)
                        st.session_state.user_data_loaded = False
                        st.success("‚úÖ EPI adicionado!")
                        time.sleep(0.5)
                        st.rerun()
            
            if st.session_state.epis_adicionados:
                st.markdown("**üìã EPIs salvos:**")
                for epi in st.session_state.epis_adicionados:
                    col_a, col_b = st.columns([5, 1])
                    col_a.markdown(f"‚Ä¢ {epi['epi_name']}")
                    if col_b.button("üóëÔ∏è", key=f"rem_epi_{epi['id']}", help="Remover"):
                        user_data_manager.remove_epi(user_id, epi['id'])
                        st.session_state.user_data_loaded = False
                        st.rerun()

    # Bot√£o de gera√ß√£o
    st.markdown("---")
    
    if len(df_final_filtrado) == 0:
        st.warning("‚ö†Ô∏è Selecione funcion√°rios para gerar as OS")
    elif total_riscos == 0:
        st.warning("‚ö†Ô∏è Configure pelo menos um risco ocupacional")
    else:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button(
                f"üöÄ GERAR {len(df_final_filtrado)} ORDEM(S) DE SERVI√áO",
                type="primary",
                use_container_width=True
            ):
                with st.spinner(f"‚è≥ Gerando {len(df_final_filtrado)} documentos..."):
                    documentos_gerados = []
                    combinacoes_processadas = set()
                    
                    progress_bar = st.progress(0)
                    status = st.empty()
                    
                    for idx, (_, func) in enumerate(df_final_filtrado.iterrows()):
                        status.text(f"Processando: {func.get('nome_do_funcionario', 'N/A')} ({idx+1}/{len(df_final_filtrado)})")
                        
                        combinacoes_processadas.add((func['setor'], func['funcao']))
                        
                        # CORRE√á√ÉO: Passar riscos_selecionados_pgr (dict) ao inv√©s de lista
                        doc = gerar_os(
                            func,
                            riscos_selecionados_pgr,  # Dict por categoria
                            st.session_state.epis_adicionados,
                            st.session_state.medicoes_adicionadas,
                            st.session_state.riscos_manuais_adicionados,
                            arquivo_modelo_os
                        )
                        
                        doc_io = BytesIO()
                        doc.save(doc_io)
                        doc_io.seek(0)
                        
                        nome_limpo = re.sub(r'[^\w\s-]', '', func.get("nome_do_funcionario", "Func")).strip().replace(" ", "_")
                        caminho = f"{func.get('setor', 'Setor')}/{func.get('funcao', 'Funcao')}/OS_{nome_limpo}.docx"
                        documentos_gerados.append((caminho, doc_io.getvalue()))
                        
                        progress_bar.progress((idx + 1) / len(df_final_filtrado))
                    
                    st.session_state.cargos_concluidos.update(combinacoes_processadas)
                    
                    status.empty()
                    progress_bar.empty()
                    
                    if documentos_gerados:
                        zip_buffer = BytesIO()
                        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                            for nome_arquivo, conteudo in documentos_gerados:
                                zip_file.writestr(nome_arquivo, conteudo)
                        
                        nome_zip = f"OS_Geradas_{time.strftime('%Y%m%d_%H%M%S')}.zip"
                        
                        st.success(f"üéâ **{len(documentos_gerados)} Ordens de Servi√ßo geradas com sucesso!**")
                        st.balloons()
                        
                        st.download_button(
                            label="üì• BAIXAR TODAS AS OS (.zip)",
                            data=zip_buffer.getvalue(),
                            file_name=nome_zip,
                            mime="application/zip",
                            type="primary",
                            use_container_width=True
                        )

if __name__ == "__main__":
    main() is_valid:
                st.session_state.authenticated = False
                st.session_state.user_data = None
                st.rerun()

def logout_user():
    if st.session_state.user_data and st.session_state.user_data.get('session_token'):
        auth_manager.logout_user(st.session_state.user_data['session_token'])
    st.session_state.authenticated = False
    st.session_state.user_data = None
    st.session_state.user_data_loaded = False
    st.rerun()

def show_user_info():
    if st.session_state.get('authenticated'):
        user_email = st.session_state.user_data.get('email', 'N/A')
        col1, col2 = st.columns([3, 1])
        with col1:
            st.markdown(f'<div class="user-card">üë§ <strong>{user_email}</strong></div>', unsafe_allow_html=True)
        with col2:
            if st.button("üö™ Sair", type="secondary", use_container_width=True):
                logout_user()

def init_user_session_state():
    if st.session_state.get('authenticated') and not st.session_state.get('user_data_loaded'):
        user_id = st.session_state.user_data.get('user_id')
        if user_id:
            st.session_state.medicoes_adicionadas = user_data_manager.get_user_measurements(user_id)
            st.session_state.epis_adicionados = user_data_manager.get_user_epis(user_id)
            st.session_state.riscos_manuais_adicionados = user_data_manager.get_user_manual_risks(user_id)
            st.session_state.user_data_loaded = True
    
    if 'medicoes_adicionadas' not in st.session_state:
        st.session_state.medicoes_adicionadas = []
    if 'epis_adicionados' not in st.session_state:
        st.session_state.epis_adicionados = []
    if 'riscos_manuais_adicionados' not in st.session_state:
        st.session_state.riscos_manuais_adicionados = []
    if 'cargos_concluidos' not in st.session_state:
        st.session_state.cargos_concluidos = set()

def normalizar_texto(texto):
    if not isinstance(texto, str): return ""
    return re.sub(r'[\s\W_]+', '', texto.lower().strip())

def mapear_e_renomear_colunas_funcionarios(df):
    df_copia = df.copy()
    mapeamento = {
        'nome_do_funcionario': ['nomedofuncionario', 'nome', 'funcionario', 'funcion√°rio'],
        'funcao': ['funcao', 'fun√ß√£o', 'cargo'],
        'data_de_admissao': ['datadeadmissao', 'dataadmissao', 'admissao', 'admiss√£o'],
        'setor': ['setordetrabalho', 'setor', 'area', '√°rea'],
        'descricao_de_atividades': ['descricaodeatividades', 'atividades', 'descri√ß√£odeatividades'],
        'empresa': ['empresa'],
        'unidade': ['unidade']
    }
    colunas_renomeadas = {}
    colunas_df_normalizadas = {normalizar_texto(col): col for col in df_copia.columns}
    for nome_padrao, nomes_possiveis in mapeamento.items():
        for nome_possivel in nomes_possiveis:
            if nome_possivel in colunas_df_normalizadas:
                coluna_original = colunas_df_normalizadas[nome_possivel]
                colunas_renomeadas[coluna_original] = nome_padrao
                break
    df_copia.rename(columns=colunas_renomeadas, inplace=True)
    return df_copia

@st.cache_data
def carregar_planilha(arquivo):
    if arquivo is None: return None
    try:
        return pd.read_excel(arquivo)
    except Exception as e:
        st.error(f"Erro ao ler arquivo Excel: {e}")
        return None

def substituir_placeholders(doc, contexto):
    """Substitui placeholders preservando formata√ß√£o"""
    def aplicar_formatacao_padrao(run):
        run.font.name = 'Segoe UI'
        run.font.size = Pt(9)
        return run

    def processar_paragrafo(p):
        texto_original = p.text
        
        if "[MEDI√á√ïES]" in texto_original:
            for run in p.runs:
                run.text = ''
            p.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
            medicoes_valor = contexto.get("[MEDI√á√ïES]", "N√£o aplic√°vel")
            if medicoes_valor == "N√£o aplic√°vel" or not medicoes_valor.strip():
                run = aplicar_formatacao_padrao(p.add_run("N√£o aplic√°vel"))
                run.font.bold = False
            else:
                linhas = medicoes_valor.split('\n')
                for i, linha in enumerate(linhas):
                    if not linha.strip(): continue
                    if i > 0: p.add_run().add_break()
                    if ":" in linha:
                        partes = linha.split(":", 1)
                        agente = partes[0].strip() + ":"
                        valor = partes[1].strip()
                        run_agente = aplicar_formatacao_padrao(p.add_run(agente + " "))
                        run_agente.font.bold = True
                        run_valor = aplicar_formatacao_padrao(p.add_run(valor))
                        run_valor.font.bold = False
                    else:
                        run = aplicar_formatacao_padrao(p.add_run(linha))
                        run.font.bold = False
            return

        placeholders_no_paragrafo = [key for key in contexto if key in texto_original]
        if not placeholders_no_paragrafo:
            return

        estilo_rotulo = {
            'bold': p.runs[0].bold if p.runs else False,
            'italic': p.runs[0].italic if p.runs else False,
            'underline': p.runs[0].underline if p.runs else False,
        }

        texto_final = texto_original
        for key in placeholders_no_paragrafo:
            texto_final = texto_final.replace(key, str(contexto[key]))
        
        p.clear()

        texto_restante = texto_final
        for key in placeholders_no_paragrafo:
            valor_placeholder = str(contexto[key])
            partes = texto_restante.split(valor_placeholder, 1)
            
            if partes[0]:
                run_rotulo = aplicar_formatacao_padrao(p.add_run(partes[0]))
                run_rotulo.font.bold = estilo_rotulo['bold']
                run_rotulo.font.italic = estilo_rotulo['italic']
                run_rotulo.underline = estilo_rotulo['underline']

            run_valor = aplicar_formatacao_padrao(p.add_run(valor_placeholder))
            run_valor.font.bold = False
            run_valor.font.italic = False
            run_valor.font.underline = False
            
            texto_restante = partes[1] if len(partes) > 1 else ""

        if texto_restante:
            run_final = aplicar_formatacao_padrao(p.add_run(texto_restante))
            run_final.font.bold = estilo_rotulo['bold']
            run_final.font.italic = estilo_rotulo['italic']
            run_final.underline = estilo_rotulo['underline']

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for p in cell.paragraphs:
                    processar_paragrafo(p)
    for p in doc.paragraphs:
        processar_paragrafo(p)

def gerar_os(funcionario, riscos_pgr_por_categoria, epis_manuais, medicoes_manuais, riscos_manuais, modelo_doc):
    """
    CORRE√á√ÉO PRINCIPAL: Agora recebe riscos_pgr_por_categoria (dict) ao inv√©s de lista simples
    """
    doc = Document(modelo_doc)
    
    riscos_por_categoria = {cat: [] for cat in CATEGORIAS_RISCO.keys()}
    danos_por_categoria = {cat: [] for cat in CATEGORIAS_RISCO.keys()}

    # CORRE√á√ÉO: Processar riscos PGR por categoria
    for categoria, riscos_lista in riscos_pgr_por_categoria.items():
        if riscos_lista and categoria in RISCOS_PGR_DADOS:
            riscos_por_categoria[categoria].extend(riscos_lista)
            danos = get_danos_por_riscos_pgr(categoria, riscos_lista)
            if danos:
                danos_por_categoria[categoria].append(danos)

    # Processar riscos manuais
    if riscos_manuais:
        map_categorias_rev = {v: k for k, v in CATEGORIAS_RISCO.items()}
        for risco_manual in riscos_manuais:
            categoria_display = risco_manual.get('category')
            categoria_alvo = map_categorias_rev.get(categoria_display)
            if categoria_alvo:
                riscos_por_categoria[categoria_alvo].append(risco_manual.get('risk_name', ''))
                if risco_manual.get('possible_damages'):
                    danos_por_categoria[categoria_alvo].append(risco_manual.get('possible_damages'))

    # Limpar duplicatas
    for cat in danos_por_categoria:
        danos_por_categoria[cat] = sorted(list(set(danos_por_categoria[cat])))

    # Formatar medi√ß√µes
    medicoes_formatadas = []
    for med in medicoes_manuais:
        agente = str(med.get('agent', '')).strip()
        valor = str(med.get('value', '')).strip()
        unidade = str(med.get('unit', '')).strip()
        epi_associado = str(med.get('epi_name', med.get('epi', ''))).strip()
       
        if agente and agente not in ['', 'N/A', 'nan', 'None'] and valor and valor not in ['', 'N/A', 'nan', 'None']:
            linha = f"{agente}: {valor}"
            if unidade and unidade not in ['', 'N/A', 'nan', 'None']:
                linha += f" {unidade}"
            if epi_associado and epi_associado not in ['', 'N/A', 'nan', 'None']:
                linha += f" | EPI: {epi_associado}"
            medicoes_formatadas.append(linha)
    medicoes_texto = "\n".join(medicoes_formatadas) if medicoes_formatadas else "N√£o aplic√°vel"

    # Processar data de admiss√£o
    data_admissao = "N√£o informado"
    if 'data_de_admissao' in funcionario and pd.notna(funcionario['data_de_admissao']):
        try: 
            data_admissao = pd.to_datetime(funcionario['data_de_admissao']).strftime('%d/%m/%Y')
        except: 
            data_admissao = str(funcionario['data_de_admissao'])

    # Processar descri√ß√£o de atividades
    descricao_atividades = "N√£o informado"
    if 'descricao_de_atividades' in funcionario and pd.notna(funcionario['descricao_de_atividades']):
        descricao_atividades = str(funcionario['descricao_de_atividades']).strip()

    if descricao_atividades in ["N√£o informado", "", "nan"]:
        funcao = str(funcionario.get('funcao', 'N/A'))
        setor = str(funcionario.get('setor', 'N/A'))
        if funcao != 'N/A' and setor != 'N/A':
            descricao_atividades = f"Atividades relacionadas √† fun√ß√£o de {funcao} no setor {setor}."
        else:
            descricao_atividades = "Atividades conforme definido pela chefia imediata."

    def tratar_lista_vazia(lista, separador=", "):
        if not lista or all(not item.strip() for item in lista): 
            return "N√£o identificado"
        return separador.join(sorted(list(set(item for item in lista if item and item.strip()))))

    # Contexto
    contexto = {
        "[NOME EMPRESA]": str(funcionario.get("empresa", "N/A")), 
        "[UNIDADE]": str(funcionario.get("unidade", "N/A")),
        "[NOME FUNCION√ÅRIO]": str(funcionario.get("nome_do_funcionario", "N/A")), 
        "[DATA DE ADMISS√ÉO]": data_admissao,
        "[SETOR]": str(funcionario.get("setor", "N/A")), 
        "[FUN√á√ÉO]": str(funcionario.get("funcao", "N/A")),
        "[DESCRI√á√ÉO DE ATIVIDADES]": descricao_atividades,
        "[RISCOS F√çSICOS]": tratar_lista_vazia(riscos_por_categoria["fisico"]),
        "[RISCOS DE ACIDENTE]": tratar_lista_vazia(riscos_por_categoria["acidente"]),
        "[RISCOS QU√çMICOS]": tratar_lista_vazia(riscos_por_categoria["quimico"]),
        "[RISCOS BIOL√ìGICOS]": tratar_lista_vazia(riscos_por_categoria["biologico"]),
        "[RISCOS ERGON√îMICOS]": tratar_lista_vazia(riscos_por_categoria["ergonomico"]),
        "[POSS√çVEIS DANOS RISCOS F√çSICOS]": tratar_lista_vazia(danos_por_categoria["fisico"], "; "),
        "[POSS√çVEIS DANOS RISCOS ACIDENTE]": tratar_lista_vazia(danos_por_categoria["acidente"], "; "),
        "[POSS√çVEIS DANOS RISCOS QU√çMICOS]": tratar_lista_vazia(danos_por_categoria["quimico"], "; "),
        "[POSS√çVEIS DANOS RISCOS BIOL√ìGICOS]": tratar_lista_vazia(danos_por_categoria["biologico"], "; "),
        "[POSS√çVEIS DANOS RISCOS ERGON√îMICOS]": tratar_lista_vazia(danos_por_categoria["ergonomico"], "; "),
        "[EPIS]": tratar_lista_vazia([epi['epi_name'] for epi in epis_manuais]),
        "[MEDI√á√ïES]": medicoes_texto,
    }

    substituir_placeholders(doc, contexto)
    return doc

def main():
    check_authentication()
    init_user_session_state()
    
    if not st.session_state.get('authenticated'):
        show_login_page()
        return
    
    user_id = st.session_state.user_data['user_id']
    show_user_info()
    
    st.markdown('<div class="main-header"><h1>üìã Gerador de Ordens de Servi√ßo</h1><p>Sistema Profissional de Gest√£o de OS</p></div>', unsafe_allow_html=True)

    # Upload de documentos
    with st.container(border=True):
        st.markdown("#### üìÇ 1. Documentos Base")
        col1, col2 = st.columns(2)
        with col1:
            arquivo_funcionarios = st.file_uploader("üìä Planilha de Funcion√°rios (.xlsx)", type="xlsx")
        with col2:
            arquivo_modelo_os = st.file_uploader("üìÑ Modelo de OS (.docx)", type="docx")

    if not
