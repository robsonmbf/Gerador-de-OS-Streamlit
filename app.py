import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from io import BytesIO
import datetime

# Dados simplificados dos Riscos PGR (principais de cada categoria)
RISCOS_PGR_DADOS = {
    'F√≠sico': {
        'riscos': [
            'Exposi√ß√£o ao Ru√≠do',
            'Vibra√ß√µes Localizadas (m√£o/bra√ßo)', 
            'Vibra√ß√£o de Corpo Inteiro (AREN)',
            'Vibra√ß√£o de Corpo Inteiro (VDVR)',
            'Exposi√ß√£o √† Temperatura Ambiente Elevada',
            'Exposi√ß√£o √† Temperatura Ambiente Baixa',
            'Exposi√ß√£o √† Radia√ß√µes Ionizantes',
            'Exposi√ß√£o √† Radia√ß√µes N√£o-ionizantes',
            'Press√£o Atmosf√©rica Anormal',
            'Umidade',
            'Ambiente Artificialmente Frio'
        ],
        'danos': [
            'Perda Auditiva Induzida pelo Ru√≠do Ocupacional (PAIRO)',
            'Altera√ß√µes articulares e vasomotoras',
            'Altera√ß√µes no sistema digestivo, musculoesquel√©tico, nervoso, vis√£o, enjoos, n√°useas, palidez',
            'Altera√ß√µes no sistema digestivo, musculoesquel√©tico, nervoso, vis√£o, enjoos, n√°useas, palidez',
            'Desidrata√ß√£o, erup√ß√µes cut√¢neas, c√£ibras, fadiga f√≠sica, problemas cardiocirculat√≥rios',
            'Estresse, desconforto, dorm√™ncia, rigidez, redu√ß√£o da destreza, formigamento',
            'Dano √†s c√©lulas do corpo humano, causando doen√ßas graves, inclusive c√¢ncer',
            'Depress√£o imunol√≥gica, fotoenvelhecimento, les√µes oculares, doen√ßas graves',
            'Barotrauma pulmonar, les√£o de tecido pulmonar, embolia arterial gasosa',
            'Doen√ßas do aparelho respirat√≥rio, quedas, doen√ßas de pele, doen√ßas circulat√≥rias',
            'Estresse, desconforto, dorm√™ncia, rigidez, redu√ß√£o da destreza'
        ]
    },
    'Qu√≠mico': {
        'riscos': ['Exposi√ß√£o a Produto Qu√≠mico'],
        'danos': ['Irrita√ß√£o/les√£o ocular, na pele e mucosas; Dermatites; Queimadura Qu√≠mica; Intoxica√ß√£o; N√°useas; V√¥mitos']
    },
    'Biol√≥gico': {
        'riscos': [
            '√Ågua e/ou alimentos contaminados',
            'Contato com Fluido Org√¢nico',
            'Contato com Pessoas Doentes e/ou Material Infectocontagiante',
            'Contamina√ß√£o pelo Corona V√≠rus',
            'Exposi√ß√£o √† Agentes Microbiol√≥gicos'
        ],
        'danos': [
            'Intoxica√ß√£o, diarreias, infec√ß√µes intestinais',
            'Doen√ßas infectocontagiosas',
            'Doen√ßas infectocontagiosas',
            'COVID-19, gripes, febre, tosse seca, cansa√ßo, dores, dor de garganta, diarreia',
            'Doen√ßas infectocontagiosas, dermatites, irrita√ß√£o, desconforto, infec√ß√£o respirat√≥ria'
        ]
    },
    'Ergon√¥mico': {
        'riscos': [
            'Posturas inc√¥modas por longos per√≠odos',
            'Postura sentada por longos per√≠odos',
            'Postura em p√© por longos per√≠odos',
            'Esfor√ßo f√≠sico intenso',
            'Levantamento e transporte manual de cargas',
            'Movimentos repetitivos',
            'Trabalho com necessidade de ritmos intensos',
            'Trabalho noturno',
            'Ilumina√ß√£o inadequada',
            'Temperatura fora dos par√¢metros de conforto'
        ],
        'danos': [
            'Dist√∫rbios musculoesquel√©ticos em m√∫sculos e articula√ß√µes',
            'Sobrecarga dos membros superiores e coluna vertebral, dor localizada',
            'Sobrecarga corporal, dores nos membros inferiores e coluna, cansa√ßo f√≠sico',
            'Dist√∫rbios musculoesquel√©ticos, fadiga, dor localizada, redu√ß√£o da produtividade',
            'Dist√∫rbios musculoesquel√©ticos, fadiga, dor localizada, redu√ß√£o da produtividade',
            'Dist√∫rbios osteomusculares em m√∫sculos e articula√ß√µes dos membros utilizados',
            'Sobrecarga e fadiga f√≠sica e cognitiva, redu√ß√£o da percep√ß√£o de risco',
            'Altera√ß√µes psicofisiol√≥gicas e/ou sociais',
            'Fadiga visual e cognitiva, desconforto, redu√ß√£o da percep√ß√£o de riscos',
            'Irritabilidade, estresse, dores de cabe√ßa, perda de foco no trabalho'
        ]
    },
    'Acidente': {
        'riscos': [
            'Exposi√ß√£o √† Energia El√©trica',
            'Queda de pessoa com diferen√ßa de n√≠vel',
            'Queda de pessoa em mesmo n√≠vel',
            'Objetos cortantes/perfurocortantes',
            'Inc√™ndio/Explos√£o',
            'M√°quinas e equipamentos sem prote√ß√£o',
            'Trabalho em altura',
            'Trabalho em espa√ßos confinados',
            'Atropelamento',
            'Impacto de objeto que cai'
        ],
        'danos': [
            'Choque el√©trico e eletropless√£o (eletrocuss√£o)',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas',
            'Corte, lacera√ß√£o, ferida contusa, punctura (ferida aberta), perfura√ß√£o',
            'Queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau, asfixia, arremessos, cortes, escoria√ß√µes',
            'Prensamento, aprisionamento, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte',
            'Asfixia, hiper√≥xia, contamina√ß√£o, queimadura, arremessos, cortes, escoria√ß√µes',
            'Compress√£o/esmagamento, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes',
            'Esmagamento, prensamento, aprisionamento, cortes, escoria√ß√µes, luxa√ß√µes, fraturas'
        ]
    }
}

def get_danos_por_riscos_pgr(categoria, riscos_selecionados):
    """Retorna os danos associados aos riscos selecionados da planilha PGR"""
    if categoria not in RISCOS_PGR_DADOS or not riscos_selecionados:
        return ""

    danos_lista = []
    riscos_categoria = RISCOS_PGR_DADOS[categoria]["riscos"]
    danos_categoria = RISCOS_PGR_DADOS[categoria]["danos"]

    for risco in riscos_selecionados:
        if risco in riscos_categoria:
            indice = riscos_categoria.index(risco)
            if indice < len(danos_categoria):
                danos_lista.append(danos_categoria[indice])

    return "; ".join(danos_lista) if danos_lista else ""

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="üìã Gerador de Ordem de Servi√ßo - NR01",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .stApp {
        background-color: #1a1a1a;
        color: #ffffff;
    }
    .stSelectbox > div > div {
        background-color: #2d2d2d;
        color: #ffffff;
    }
    .stTextArea > div > div > textarea {
        background-color: #2d2d2d;
        color: #ffffff;
    }
    .stButton > button {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
    }
    .stButton > button:hover {
        background-color: #45a049;
    }
    .stMultiSelect > div > div {
        background-color: #2d2d2d;
        color: #ffffff;
    }
</style>
""", unsafe_allow_html=True)

def create_sample_data():
    """Cria dados de exemplo para demonstra√ß√£o"""
    sample_data = {
        'Nome': ['JO√ÉO SILVA SANTOS', 'MARIA OLIVEIRA COSTA', 'PEDRO ALVES FERREIRA'],
        'Setor': ['PRODUCAO DE LA DE ACO', 'ADMINISTRACAO DE RH', 'MANUTENCAO QUIMICA'],
        'Fun√ß√£o': ['OPERADOR PRODUCAO I', 'ANALISTA ADM PESSOAL PL', 'MECANICO MANUT II'],
        'Data de Admiss√£o': ['15/03/2020', '22/08/2019', '10/01/2021'],
        'Empresa': ['SUA EMPRESA', 'SUA EMPRESA', 'SUA EMPRESA'],
        'Unidade': ['Matriz', 'Matriz', 'Matriz'],
        'Descri√ß√£o de Atividades': [
            'Operar equipamentos de produ√ß√£o n√≠vel I, controlar par√¢metros operacionais, realizar inspe√ß√µes visuais e registrar dados de produ√ß√£o.',
            'Executar atividades de administra√ß√£o de pessoal, controlar documentos trabalhistas, elaborar relat√≥rios e dar suporte √†s equipes.',
            'Executar manuten√ß√£o preventiva e corretiva em equipamentos, diagnosticar falhas, trocar componentes e registrar interven√ß√µes.'
        ]
    }
    return pd.DataFrame(sample_data)

def validate_excel_structure(df):
    """Valida se a planilha tem a estrutura necess√°ria"""
    required_columns = ['Nome', 'Setor', 'Fun√ß√£o', 'Data de Admiss√£o', 'Empresa', 'Unidade', 'Descri√ß√£o de Atividades']
    missing_columns = [col for col in required_columns if col not in df.columns]

    if missing_columns:
        return False, f"Colunas obrigat√≥rias faltando: {', '.join(missing_columns)}"

    if df.empty:
        return False, "A planilha est√° vazia"

    return True, "Estrutura v√°lida"

def create_os_document(employee_data, riscos_data, medidas_data, assessment_data, measurements_data):
    """Cria o documento da Ordem de Servi√ßo"""
    doc = Document()

    # T√≠tulo principal
    heading = doc.add_heading('ORDEM DE SERVI√áO - SEGURAN√áA E MEDICINA DO TRABALHO', level=1)
    heading.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Informa√ß√µes do funcion√°rio
    doc.add_heading('DADOS DO FUNCION√ÅRIO', level=2)

    info_table = doc.add_table(rows=6, cols=2)
    info_table.style = 'Table Grid'

    # Preencher tabela de informa√ß√µes
    info_data = [
        ('Nome:', employee_data.get('Nome', 'N/A')),
        ('Setor:', employee_data.get('Setor', 'N/A')),
        ('Fun√ß√£o:', employee_data.get('Fun√ß√£o', 'N/A')),
        ('Data de Admiss√£o:', employee_data.get('Data de Admiss√£o', 'N/A')),
        ('Empresa:', employee_data.get('Empresa', 'N/A')),
        ('Unidade:', employee_data.get('Unidade', 'N/A'))
    ]

    for i, (label, value) in enumerate(info_data):
        info_table.cell(i, 0).text = label
        info_table.cell(i, 1).text = str(value)
        info_table.cell(i, 0).paragraphs[0].runs[0].bold = True

    # Descri√ß√£o das atividades
    doc.add_heading('DESCRI√á√ÉO DAS ATIVIDADES', level=2)
    desc_para = doc.add_paragraph(employee_data.get('Descri√ß√£o de Atividades', 'N√£o informado'))

    # Agentes de riscos ocupacionais
    heading = doc.add_heading('AGENTES DE RISCOS OCUPACIONAIS - NR01 item 1.4.1 b) I / item 1.4.4 a)', level=2)

    # Usar os danos da planilha PGR quando dispon√≠veis
    for tipo_risco, riscos_texto in riscos_data.items():
        if riscos_texto and riscos_texto.strip():
            # Separar os riscos individuais
            riscos_lista = [r.strip() for r in riscos_texto.split(';') if r.strip()]

            # Buscar danos espec√≠ficos da planilha PGR
            danos_pgr = get_danos_por_riscos_pgr(tipo_risco, riscos_lista)

            para = doc.add_paragraph()
            para.add_run(f"‚û§ {tipo_risco}: ").bold = True

            if danos_pgr:
                para.add_run(danos_pgr)
            else:
                # Fallback para danos gen√©ricos se n√£o encontrar na planilha PGR
                danos_genericos = {
                    'F√≠sico': 'Perda auditiva, fadiga, stress t√©rmico',
                    'Qu√≠mico': 'Intoxica√ß√£o, irrita√ß√£o, dermatoses', 
                    'Acidente': 'Ferimentos, fraturas, queimaduras',
                    'Ergon√¥mico': 'Dores musculares, LER/DORT, fadiga',
                    'Biol√≥gico': 'Infec√ß√µes, alergias, doen√ßas'
                }
                para.add_run(danos_genericos.get(tipo_risco, 'Poss√≠veis danos relacionados a este tipo de risco'))

    # Medidas de controle
    heading = doc.add_heading('MEIOS PARA PREVENIR E CONTROLAR RISCOS - NR01 item 1.4.4 b)', level=2)

    for categoria, medidas in medidas_data.items():
        if medidas.strip():
            para = doc.add_paragraph()
            para.add_run(f"‚û§ {categoria}: ").bold = True
            para.add_run(medidas)

    # Data e assinatura
    doc.add_paragraph('\n')
    doc.add_paragraph(f'Data: {datetime.datetime.now().strftime("%d/%m/%Y")}')
    doc.add_paragraph('\n\n')
    doc.add_paragraph('_' * 50)
    doc.add_paragraph('Assinatura do Respons√°vel pela Seguran√ßa')

    return doc

def main():
    st.title("üìã Gerador de Ordem de Servi√ßo - NR01")
    st.markdown("Sistema para gera√ß√£o de Ordens de Servi√ßo de Seguran√ßa e Medicina do Trabalho")

    # Sidebar para upload ou dados de exemplo
    st.sidebar.header("üìä Dados dos Funcion√°rios")

    option = st.sidebar.radio(
        "Escolha a fonte dos dados:",
        ["üì§ Upload de planilha Excel", "üß™ Usar dados de exemplo"]
    )

    df = None

    if option == "üì§ Upload de planilha Excel":
        uploaded_file = st.sidebar.file_uploader(
            "Carregue a planilha com os dados dos funcion√°rios",
            type=['xlsx', 'xls'],
            help="A planilha deve conter as colunas: Nome, Setor, Fun√ß√£o, Data de Admiss√£o, Empresa, Unidade, Descri√ß√£o de Atividades"
        )

        if uploaded_file is not None:
            try:
                df = pd.read_excel(uploaded_file)
                is_valid, message = validate_excel_structure(df)

                if is_valid:
                    st.sidebar.success(f"‚úÖ Planilha carregada: {len(df)} funcion√°rios")
                else:
                    st.sidebar.error(f"‚ùå {message}")
                    df = None
            except Exception as e:
                st.sidebar.error(f"‚ùå Erro ao carregar planilha: {str(e)}")

    else:  # Usar dados de exemplo
        df = create_sample_data()
        st.sidebar.success("‚úÖ Usando dados de exemplo")

    if df is not None:
        # Sele√ß√£o de funcion√°rios
        st.subheader("üë• Sele√ß√£o de Funcion√°rios")

        selected_employees = st.multiselect(
            "Selecione os funcion√°rios para gerar as OS:",
            options=df['Nome'].tolist(),
            default=df['Nome'].tolist()[0:1] if len(df) > 0 else [],
            help="Voc√™ pode selecionar m√∫ltiplos funcion√°rios"
        )

        if selected_employees:
            st.success(f"‚úÖ {len(selected_employees)} funcion√°rio(s) selecionado(s)")

            # Interface de Riscos baseada na planilha PGR
            st.subheader("üìã Sele√ß√£o de Riscos Ocupacionais (PGR)")
            st.info("Selecione os riscos aplic√°veis baseados na planilha PGR:")

            # Criar tabs para cada categoria
            tab_fisico, tab_quimico, tab_biologico, tab_ergonomico, tab_acidente = st.tabs([
                "üî• F√≠sicos", "‚öóÔ∏è Qu√≠micos", "ü¶† Biol√≥gicos", "üèÉ Ergon√¥micos", "‚ö†Ô∏è Acidentes"
            ])

            riscos_selecionados_pgr = {}

            # Tab F√≠sicos
            with tab_fisico:
                st.write(f"**Riscos F√≠sicos Dispon√≠veis:** {len(RISCOS_PGR_DADOS['F√≠sico']['riscos'])} op√ß√µes")
                riscos_selecionados_pgr['F√≠sico'] = st.multiselect(
                    "Selecione os Riscos F√≠sicos:",
                    options=RISCOS_PGR_DADOS['F√≠sico']['riscos'],
                    key="riscos_pgr_fisico",
                    help="Riscos f√≠sicos da planilha PGR"
                )
                if riscos_selecionados_pgr['F√≠sico']:
                    danos = get_danos_por_riscos_pgr('F√≠sico', riscos_selecionados_pgr['F√≠sico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

            # Tab Qu√≠micos  
            with tab_quimico:
                st.write(f"**Riscos Qu√≠micos Dispon√≠veis:** {len(RISCOS_PGR_DADOS['Qu√≠mico']['riscos'])} op√ß√µes")
                riscos_selecionados_pgr['Qu√≠mico'] = st.multiselect(
                    "Selecione os Riscos Qu√≠micos:",
                    options=RISCOS_PGR_DADOS['Qu√≠mico']['riscos'],
                    key="riscos_pgr_quimico",
                    help="Riscos qu√≠micos da planilha PGR"
                )
                if riscos_selecionados_pgr['Qu√≠mico']:
                    danos = get_danos_por_riscos_pgr('Qu√≠mico', riscos_selecionados_pgr['Qu√≠mico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

            # Tab Biol√≥gicos
            with tab_biologico:
                st.write(f"**Riscos Biol√≥gicos Dispon√≠veis:** {len(RISCOS_PGR_DADOS['Biol√≥gico']['riscos'])} op√ß√µes")
                riscos_selecionados_pgr['Biol√≥gico'] = st.multiselect(
                    "Selecione os Riscos Biol√≥gicos:",
                    options=RISCOS_PGR_DADOS['Biol√≥gico']['riscos'],
                    key="riscos_pgr_biologico",
                    help="Riscos biol√≥gicos da planilha PGR"
                )
                if riscos_selecionados_pgr['Biol√≥gico']:
                    danos = get_danos_por_riscos_pgr('Biol√≥gico', riscos_selecionados_pgr['Biol√≥gico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

            # Tab Ergon√¥micos
            with tab_ergonomico:
                st.write(f"**Riscos Ergon√¥micos Dispon√≠veis:** {len(RISCOS_PGR_DADOS['Ergon√¥mico']['riscos'])} op√ß√µes")
                riscos_selecionados_pgr['Ergon√¥mico'] = st.multiselect(
                    "Selecione os Riscos Ergon√¥micos:",
                    options=RISCOS_PGR_DADOS['Ergon√¥mico']['riscos'],
                    key="riscos_pgr_ergonomico",
                    help="Riscos ergon√¥micos da planilha PGR"
                )
                if riscos_selecionados_pgr['Ergon√¥mico']:
                    danos = get_danos_por_riscos_pgr('Ergon√¥mico', riscos_selecionados_pgr['Ergon√¥mico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

            # Tab Acidentes
            with tab_acidente:
                st.write(f"**Riscos de Acidente Dispon√≠veis:** {len(RISCOS_PGR_DADOS['Acidente']['riscos'])} op√ß√µes")
                riscos_selecionados_pgr['Acidente'] = st.multiselect(
                    "Selecione os Riscos de Acidente:",
                    options=RISCOS_PGR_DADOS['Acidente']['riscos'],
                    key="riscos_pgr_acidente",
                    help="Riscos de acidente da planilha PGR"
                )
                if riscos_selecionados_pgr['Acidente']:
                    danos = get_danos_por_riscos_pgr('Acidente', riscos_selecionados_pgr['Acidente'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

            # Converter para o formato esperado pelo resto do c√≥digo
            riscos = {}
            for categoria, lista_riscos in riscos_selecionados_pgr.items():
                if lista_riscos:
                    riscos[categoria] = "; ".join(lista_riscos)
                else:
                    riscos[categoria] = ""

            # Medidas de controle
            st.subheader("üõ°Ô∏è Medidas de Controle")

            col3, col4 = st.columns([1, 1])

            with col3:
                medidas = {}
                medidas['EPC (Prote√ß√£o Coletiva)'] = st.text_area(
                    "üè≠ Equipamentos de Prote√ß√£o Coletiva:",
                    placeholder="Ex: Ventila√ß√£o, isolamento ac√∫stico, prote√ß√µes em m√°quinas",
                    height=80
                )
                medidas['Administrativas'] = st.text_area(
                    "üìã Medidas Administrativas:",
                    placeholder="Ex: Treinamentos, procedimentos, pausas, rota√ß√£o de tarefas",
                    height=80
                )

            with col4:
                medidas['EPI (Prote√ß√£o Individual)'] = st.text_area(
                    "ü¶∫ Equipamentos de Prote√ß√£o Individual:",
                    placeholder="Ex: Protetor auricular, luvas, capacete, √≥culos de prote√ß√£o",
                    height=80
                )
                medidas['Monitoramento'] = st.text_area(
                    "üìä Monitoramento:",
                    placeholder="Ex: Avalia√ß√µes ambientais, exames m√©dicos, inspe√ß√µes",
                    height=80
                )

            # Bot√£o para gerar documentos
            st.subheader("üìÑ Gera√ß√£o de Documentos")

            col5, col6 = st.columns([1, 1])

            with col5:
                if st.button("üìã Gerar Ordens de Servi√ßo", type="primary"):
                    if any(riscos.values()) or any(medidas.values()):
                        documents = []

                        for employee_name in selected_employees:
                            employee_data = df[df['Nome'] == employee_name].iloc[0].to_dict()

                            doc = create_os_document(
                                employee_data,
                                riscos,
                                medidas,
                                {},  # assessment_data - n√£o usado nesta vers√£o simplificada
                                {}   # measurements_data - n√£o usado nesta vers√£o simplificada
                            )

                            # Salvar documento em mem√≥ria
                            doc_buffer = BytesIO()
                            doc.save(doc_buffer)
                            doc_buffer.seek(0)

                            documents.append({
                                'name': f"OS_{employee_name.replace(' ', '_')}.docx",
                                'data': doc_buffer.getvalue()
                            })

                        # Download individual ou em lote
                        if len(documents) == 1:
                            st.download_button(
                                label="üì• Baixar Ordem de Servi√ßo",
                                data=documents[0]['data'],
                                file_name=documents[0]['name'],
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                            )
                        else:
                            # Criar ZIP com m√∫ltiplos documentos
                            import zipfile
                            zip_buffer = BytesIO()

                            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                                for doc_info in documents:
                                    zip_file.writestr(doc_info['name'], doc_info['data'])

                            zip_buffer.seek(0)

                            st.download_button(
                                label=f"üì• Baixar {len(documents)} Ordens de Servi√ßo (ZIP)",
                                data=zip_buffer.getvalue(),
                                file_name=f"OS_Lote_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                                mime="application/zip"
                            )

                        st.success(f"‚úÖ {len(documents)} documento(s) gerado(s) com sucesso!")

                    else:
                        st.error("‚ùå √â necess√°rio preencher pelo menos um risco ou medida de controle.")

            with col6:
                st.info("üí° **Dica:** Selecione os riscos e medidas aplic√°veis, depois clique em gerar para criar as Ordens de Servi√ßo.")

    else:
        st.info("üëÜ Carregue uma planilha ou use os dados de exemplo para come√ßar.")

if __name__ == "__main__":
    main()
