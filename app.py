import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import zipfile
from io import BytesIO
import time
import re
import sys
import os

# Adicionar o diret√≥rio atual ao path para importar m√≥dulos locais
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.models import DatabaseManager
from database.auth import AuthManager
from database.user_data import UserDataManager

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gerador de Ordens de Servi√ßo (OS)",
    page_icon="üìÑ",
    layout="wide",
)

# --- DEFINI√á√ÉO DE CONSTANTES GLOBAIS ---
UNIDADES_DE_MEDIDA = ["dB(A)", "m/s¬≤", "m/s¬π‚Å∑‚Åµ", "ppm", "mg/m¬≥", "%", "¬∞C", "lx", "cal/cm¬≤", "¬µT", "kV/m", "W/m¬≤", "f/cm¬≥", "N√£o aplic√°vel"]
AGENTES_DE_RISCO = sorted([
    "Ru√≠do (Cont√≠nuo ou Intermitente)", "Ru√≠do (Impacto)", "Vibra√ß√£o de Corpo Inteiro", "Vibra√ß√£o de M√£os e Bra√ßos",
    "Radia√ß√µes Ionizantes", "Radia√ß√µes N√£o-Ionizantes", "Frio", "Calor", "Press√µes Anormais", "Umidade", "Poeiras", 
    "Fumos", "N√©voas", "Neblinas", "Gases", "Vapores", "Produtos Qu√≠micos em Geral", "V√≠rus", "Bact√©rias", 
    "Protozo√°rios", "Fungos", "Parasitas", "Bacilos"
])
CATEGORIAS_RISCO = {'fisico': 'üî• F√≠sicos', 'quimico': '‚öóÔ∏è Qu√≠micos', 'biologico': 'ü¶† Biol√≥gicos', 'ergonomico': 'üèÉ Ergon√¥micos', 'acidente': '‚ö†Ô∏è Acidentes'}
# Dados dos Riscos baseados na planilha PGR
RISCOS_PGR_DADOS = {
    'quimico': {
        'riscos': [
            'Exposi√ß√£o a Produto Qu√≠mico',
        ],
        'danos': [
            'Irrita√ß√£o/les√£o ocular, na pele e mucosas; Dermatites; Queimadura Qu√≠mica; Intoxica√ß√£o; N√°useas; V√¥mitos.',
        ]
    },
    'fisico': {
        'riscos': [
            'Ambiente Artificialmente Frio',
            'Exposi√ß√£o ao Ru√≠do',
            'Vibra√ß√µes Localizadas (m√£o/bra√ßo)',
            'Vibra√ß√£o de Corpo Inteiro (AREN)',
            'Vibra√ß√£o de Corpo Inteiro (VDVR)',
            'Exposi√ß√£o √† Radia√ß√µes Ionizantes',
            'Exposi√ß√£o √† Radia√ß√µes N√£o-ionizantes',
            'Exposi√ß√£o √† Temperatura Ambiente Elevada',
            'Exposi√ß√£o √† Temperatura Ambiente Baixa',
            'Press√£o Atmosf√©rica Anormal (condi√ß√µes hiperb√°ricas)',
            'Umidade',
        ],
        'danos': [
            'Estresse, desconforto, dorm√™ncia, rigidez nas partes com maior intensidade de exposi√ß√£o ao frio, redu√ß√£o da destreza, formigamento, redu√ß√£o da sensibilidade dos dedos e flexibilidade das articula√ß√µes.',
            'Perda Auditiva Induzida pelo Ru√≠do Ocupacional (PAIRO).',
            'Altera√ß√µes articulares e vasomotoras.',
            'Altera√ß√µes no sistema digestivo, sistema musculoesquel√©tico, sistema nervoso, altera√ß√µes na vis√£o, enjoos, n√°useas, palidez.',
            'Altera√ß√µes no sistema digestivo, sistema musculoesquel√©tico, sistema nervoso, altera√ß√µes na vis√£o, enjoos, n√°useas, palidez.',
            'Dano √†s c√©lulas do corpo humano, causando doen√ßas graves, inclusive fatais, como c√¢ncer.',
            'Depress√£o imunol√≥gica, fotoenvelhecimento, les√µes oculares como ceratoconjuntivite, pter√≠gio e catarata; Doen√ßas graves, inclusives fatais, como c√¢ncer.',
            'Desidrata√ß√£o, erup√ß√µes cut√¢neas, c√£ibras, fadiga f√≠sica, problemas cardiocirculat√≥rios, dist√∫rbios psicol√≥gicos.',
            'Estresse, desconforto, dorm√™ncia, rigidez nas partes com maior intensidade de exposi√ß√£o ao frio, redu√ß√£o da destreza, formigamento, redu√ß√£o da sensibilidade dos dedos e flexibilidade das articula√ß√µes.',
            'Barotrauma pulmonar, les√£o de tecido pulmonar ou pneumot√≥rax, embolia arterial gasosa, barotrauma de ouvido, barotrauma sinusal, barotrauma dental, barotrauma facial, doen√ßa descompressiva.',
            'Doen√ßas do aparelho respirat√≥rio, quedas, doen√ßas de pele, doen√ßas circulat√≥rias, entre outras.',
        ]
    },
    'biologico': {
        'riscos': [
            '√Ågua e/ou alimentos contaminados',
            'Contato com Fluido Org√¢nico (sangue, hemoderivados, secre√ß√µes, excre√ß√µes)',
            'Contato com Pessoas Doentes e/ou Material Infectocontagiante',
            'Contamina√ß√£o pelo Corona V√≠rus',
            'Exposi√ß√£o √† Agentes Microbiol√≥gicos (fungos, bact√©rias, v√≠rus, protozo√°rios, parasitas)',
        ],
        'danos': [
            'Intoxica√ß√£o, diarreias, infec√ß√µes intestinais.',
            'Doen√ßas infectocontagiosas.',
            'Doen√ßas infectocontagiosas.',
            'COVID-19, podendo causar gripes, febre, tosse seca, cansa√ßo, dores e desconfortos, dor de garganta, diarreia, perda de paladar ou olfato, dificuldade de respirar ou falta de ar, dor ou press√£o no peito, perda de fala ou movimentos.',
            'Doen√ßas infectocontagiosas, dermatites, irrita√ß√£o, desconforto, infec√ß√£o do sistema respirat√≥rio.',
        ]
    },
    'ergonomico': {
        'riscos': [
            'Posturas inc√¥modas/pouco confort√°veis por longos per√≠odos',
            'Postura sentada por longos per√≠odos',
            'Postura em p√© por longos per√≠odos',
            'Frequente deslocamento √† p√© durante √† jornada de trabalho',
            'Esfor√ßo f√≠sico intenso',
            'Levantamento e transporte manual de cargas ou volumes',
            'Frequente a√ß√£o de empurrar/puxar cargas ou volumes',
            'Frequente execu√ß√£o de movimentos repetitivos',
            'Manuseio de ferramentas e/ou objetos pesados por longos per√≠odos',
            'Uso frequente de for√ßa, press√£o, preens√£o, flex√£o, extens√£o ou tor√ß√£o dos segmentos corporais',
            'Compress√£o de partes do corpo por superf√≠cies r√≠gidas ou com quinas vivas',
            'Flex√µes da coluna vertebral frequentes',
            'Uso frequente de pedais',
            'Uso frequente de alavancas',
            'Eleva√ß√£o frequente de membros superiores',
            'Manuseio ou movimenta√ß√£o de cargas e volumes sem pega ou com \"pega pobre\"',
            'Exposi√ß√£o √† vibra√ß√£o de corpo inteiro',
            'Exposi√ß√£o √† vibra√ß√µes localizadas (m√£o, bra√ßo)',
            'Uso frequente de escadas',
            'Trabalho intensivo com teclado ou outros dispositivos de entrada de dados',
            'Posto de trabalho improvisado/inadequado',
            'Mobili√°rio sem meios de regulagem de ajustes',
            'Equipamentos e/ou m√°quinas sem meios de regulagem de ajustes ou sem condi√ß√µes de uso',
            'Posto de trabalho n√£o planejado/adaptado para √† posi√ß√£o sentada',
            'Assento inadequado',
            'Encosto do assento inadequado ou ausente',
            'Mobili√°rio ou equipamento sem espa√ßo para movimenta√ß√£o de segmentos corporais',
            'Necessidade de alcan√ßar objetos, documentos, controles, etc, al√©m das zonas de alcance ideais',
            'Equipamentos/mobili√°rio n√£o adaptados √† antropometria do trabalhador',
            'Trabalho realizado sem pausas pr√©-definidas para descanso',
            'Necessidade de manter ritmos intensos de trabalho',
            'Trabalho com necessidade de varia√ß√£o de turnos',
            'Monotonia',
            'Trabalho noturno',
            'Insufici√™ncia de capacita√ß√£o para √† execu√ß√£o da tarefa',
            'Trabalho com utiliza√ß√£o rigorosa de metas de produ√ß√£o',
            'Trabalho remunerado por produ√ß√£o',
            'Cad√™ncia do trabalho imposta por um equipamento',
            'Desequil√≠brio entre tempo de trabalho e tempo de repouso',
            'Press√£o sonora fora dos par√¢metros de conforto',
            'Temperatura efetiva fora dos par√¢metros de conforto',
            'Velocidade do ar fora dos par√¢metros de conforto',
            'Umidade do ar fora dos par√¢metros de conforto',
            'Ilumina√ß√£o inadequada',
            'Reflexos que causem desconforto ou prejudiquem √† vis√£o',
            'Piso escorregadio ou irregular',
            'Situa√ß√µes de estresse no local de trabalho',
            'Situa√ß√µes de sobrecarga de trabalho mental',
            'Exig√™ncia de concentra√ß√£o, aten√ß√£o e mem√≥ria',
            'Trabalho em condi√ß√µes de dif√≠cil comunica√ß√£o',
            'Conflitos hier√°rquicos no trabalho',
            'Problemas de relacionamento no trabalho',
            'Ass√©dio de qualquer natureza no trabalho',
            'Dificuldades para cumprir ordens e determina√ß√µes da chefia relacionadas ao trabalho',
            'Realiza√ß√£o de m√∫ltiplas tarefas com alta demanda mental/cognitiva',
            'Insatisfa√ß√£o no trabalho',
            'Falta de autonomia para a realiza√ß√£o de tarefas no trabalho',
        ],
        'danos': [
            'Dist√∫rbios musculoesquel√©ticos em m√∫sculos e articula√ß√µes dos membros superiores, inferiores e coluna.',
            'Sobrecarga dos membros superiores e coluna vertebral; Aumento na press√£o dos discos intervertebrais; Dor localizada.',
            'Sobrecarga corporal, dores nos membros inferiores e em alguns casos na coluna vertebral e cansa√ßo f√≠sico.',
            'Sobrecarga corporal, dores nos membros inferiores e em alguns casos na coluna vertebral e cansa√ßo f√≠sico.',
            'Dist√∫rbios musculoesquel√©ticos; Fadiga, Dor localizada; Redu√ß√£o da produtividade e da percep√ß√£o de risco.',
            'Dist√∫rbios musculoesquel√©ticos; Fadiga, Dor localizada; Redu√ß√£o da produtividade e da percep√ß√£o de risco.',
            'Dist√∫rbios musculoesquel√©ticos em m√∫sculos e articula√ß√µes dos membros superiores, inferiores e coluna lombar.',
            'Dist√∫rbios osteomusculares em m√∫sculos e articula√ß√µes dos membros utilizados na execu√ß√£o dos movimentos repetitivos.',
            'Fadiga muscular; Dor localizada; Les√µes musculares; Redu√ß√£o da produtividade e da percep√ß√£o de risco.',
            'Sobrecarga muscular, fadiga, dor localizada e perda de produtividade.',
            'Restri√ß√£o localizada tempor√°ria do fluxo cardiovascular.',
            'Tens√£o na parte inferior das costas (coluna lombar), podendo causar fadiga, dor localizada e/ou les√µes musculoesquel√©ticas.',
            'Dist√∫rbio musculoesquel√©ticos em m√∫sculos e articula√ß√µes dos membros inferiores.',
            'Dist√∫rbios musculoesquel√©ticos em m√∫sculos e articula√ß√µes dos membros superiores.',
            'Sobrecarga na regi√£o do pesco√ßo, ombros e bra√ßos, podendo causar fadiga e/ou dor localizada.',
            'Sobrecarga corporal, aumento da for√ßa durante o manuseio, fadiga, dor localizada e perda de produtividade.',
            'Altera√ß√µes no sistema digestivo, sistema musculoesquel√©tico, sistema nervoso, altera√ß√µes na vis√£o, enjoos, n√°useas, palidez.',
            'Altera√ß√µes articulares e vasomotoras.',
            'Dist√∫rbios musculoesquel√©ticos em m√∫sculos e articula√ß√µes dos membros inferiores.',
            'Sobrecarga nas articula√ß√µes das m√£os, punhos e antebra√ßos, podendo causar les√µes como artrite e dificuldade de flex√£o.',
            'Ado√ß√£o de movimentos e posturas inadequadas; Fadiga muscular; Dor localizada; Dist√∫rbios musculoesquel√©ticos.',
            'Ado√ß√£o de movimentos e posturas inadequadas; Fadiga muscular; Dor localizada; Dist√∫rbios musculoesquel√©ticos.',
            'Ado√ß√£o de movimentos e posturas inadequadas; Fadiga muscular; Dor localizada; Dist√∫rbios musculoesquel√©ticos.',
            'Sobrecarga dos membros superiores e coluna vertebral; Aumento na press√£o dos discos intervertebrais; Dor localizada.',
            'Sobrecarga corporal e dores nos membros superiores, inferiores e coluna vertebral.',
            'Sobrecarga corporal e dores na regi√£o da coluna vertebral.',
            'Ado√ß√£o de movimentos e posturas inadequadas; Fadiga muscular; Dor localizada; Dist√∫rbios musculoesquel√©ticos.',
            'Ado√ß√£o de movimentos e posturas inadequadas; Fadiga muscular; Dor localizada; Dist√∫rbios musculoesquel√©ticos.',
            'Ado√ß√£o de movimentos e posturas inadequadas; Fadiga muscular; Dor localizada; Dist√∫rbios musculoesquel√©ticos.',
            'Altera√ß√µes psicofisiol√≥gicas; Sobrecarga e fadiga f√≠sica e cognitiva; Perda de Produtividade e Redu√ß√£o da Percep√ß√£o de Riscos.',
            'Sobrecarga e fadiga f√≠sica e cognitiva; Redu√ß√£o da Percep√ß√£o de Risco.',
            'Altera√ß√µes psicofisiol√≥gicas e/ou sociais.',
            'Fadiga cognitiva; Sonol√™ncia; Morosidade e Redu√ß√£o da Percep√ß√£o de Riscos.',
            'Altera√ß√µes psicofisiol√≥gicas e/ou sociais.',
            'Desconhecimento dos riscos aos quais se exp√µe e consequente redu√ß√£o da percep√ß√£o de riscos.',
            'Sobrecarga e fadiga f√≠sica e cognitiva; Redu√ß√£o da Percep√ß√£o de Risco.',
            'Sobrecarga e fadiga f√≠sica e cognitiva; Redu√ß√£o da Percep√ß√£o de Risco.',
            'Fadiga f√≠sica e cognitiva.',
            'Altera√ß√µes psicofisiol√≥gicas; Sobrecarga e fadiga f√≠sica e cognitiva; Perda de Produtividade e Redu√ß√£o da Percep√ß√£o de Riscos.',
            'Irritabilidade, estresse, dores de cabe√ßa, perda de foco no trabalho e redu√ß√£o da produtividade.',
            'Irritabilidade, estresse, dores de cabe√ßa, perda de foco no trabalho e redu√ß√£o da produtividade.',
            'Estresse, desconforto t√©rmico, irritabilidade, dores de cabe√ßa, perda foco no trabalho e redu√ß√£o da produtividade.',
            'Cansa√ßo, estresse, dor de cabe√ßa, alergias, ressecamento da pele, crise de asma, infec√ß√µes virais ou bacterianas.',
            'Fadiga visual e cognitiva; Desconforto e Redu√ß√£o da Percep√ß√£o de Riscos.',
            'Fadiga visual e cognitiva; Desconforto; Perda de desempenho e Redu√ß√£o da Percep√ß√£o de Riscos.',
            'Fadiga muscular; Perda de desempenho; Escoria√ß√£o; Ferimento; Luxa√ß√£o; Tor√ß√£o.',
            'Altera√ß√µes psicofisiol√≥gicas e sociais; Fadiga cognitiva; Perda de desempenho; Redu√ß√£o da percep√ß√£o de risco.',
            'Altera√ß√µes psicofisiol√≥gicas, Fadiga cognitiva, Perda de desempenho e Redu√ß√£o da percep√ß√£o de risco.',
            'Altera√ß√µes psicofisiol√≥gicas, Fadiga cognitiva, Perda de desempenho e Redu√ß√£o da percep√ß√£o de risco.',
            'Fadiga cognitiva e perda de desempenho.',
            'Altera√ß√µes psicofisiol√≥gicas e sociais; Fadiga cognitiva.',
            'Altera√ß√µes psicofisiol√≥gicas e sociais; Fadiga cognitiva.',
            'Altera√ß√µes psicofisiol√≥gicas e sociais; Fadiga cognitiva; Perda de desempenho; Redu√ß√£o da percep√ß√£o de risco.',
            'Altera√ß√µes psicofisiol√≥gicas; Desconforto, Fadiga cognitiva, Perda de desempenho e Redu√ß√£o da percep√ß√£o de risco.',
            'Altera√ß√µes psicofisiol√≥gicas; Desconforto, Fadiga muscular e cognitiva, Perda de desempenho e Redu√ß√£o da percep√ß√£o de risco.',
            'Altera√ß√µes psicofisiol√≥gicas e sociais; Fadiga cognitiva; Irritabilidade; Perda de desempenho; Redu√ß√£o da percep√ß√£o de risco.',
            'Altera√ß√µes psicofisiol√≥gicas; Desconforto, Fadiga cognitiva e Perda de desempenho.',
        ]
    },
    'acidente': {
        'riscos': [
            'Absor√ß√£o (por contato) de subst√¢ncia c√°ustica, t√≥xica ou nociva.',
            'Afogamento, imers√£o, engolfamento.',
            'Aprisionamento em, sob ou entre',
            'Aprisionamento em, sob ou entre um objeto parado e outro em movimento.',
            'Aprisionamento em, sob ou entre objetos em movimento convergente.',
            'Aprisionamento em, sob ou entre dois ou mais objetos em movimento (sem encaixe).',
            'Aprisionamento em, sob ou entre um objeto parado e outro em movimento.',
            'Aprisionamento em, sob ou entre desabamento ou desmoronamento de edifica√ß√£o, estrutura, barreira, etc.',
            'Arestas cortantes, superf√≠cies com rebarbas, farpas ou elementos de fixa√ß√£o espostos',
            'Ataque de ser vivo por mordedura, picada, chifrada, coice, etc.',
            'Ataque de ser vivo com pe√ßonha',
            'Ataque de ser vivo com transmiss√£o de doen√ßa',
            'Ataque de ser vivo (inclusive humano)',
            'Atrito ou abras√£o por encostar em objeto',
            'Atrito ou abras√£o por manusear objeto',
            'Atrito ou abras√£o por corpo estranho no olho',
            'Atrito ou abras√£o',
            'Atropelamento',
            'Batida contra objeto parado ou em movimento',
            'Carga Suspensa',
            'Colis√£o entre ve√≠culos e/ou equipamentos autopropelidos',
            'Condi√ß√µes clim√°ticas adversas (sol, chuva, vento, etc.)',
            'Contato com objeto ou subst√¢ncia em movimento',
            'Contato com objeto ou subst√¢ncia a temperatura muito alta',
            'Contato com objeto ou subst√¢ncia a temperatura muito baixa',
            'Desabamento/Desmoronamento de edifica√ß√£o, estrutura e/ou materiais diversos.',
            'Elementos M√≥veis e/ou Rotativos',
            'Emerg√™ncias na circunvizinhan√ßa',
            'Equipamento pressurizado hidr√°ulico ou pressurizado.',
            'Exposi√ß√£o √† Energia El√©trica',
            'Ferramentas manuais',
            'Ferramentas el√©tricas',
            'Gases/vapores/poeiras (t√≥xicos ou n√£o t√≥xicos)',
            'Gases/vapores/poeiras inflam√°veis',
            'Impacto de pessoa contra objeto parado',
            'Impacto de pessoa contra objeto em movimento',
            'Impacto sofrido por pessoa.',
            'Impacto sofrido por pessoa, de objeto em movimento',
            'Impacto sofrido poe pessoa, de objeto que cai',
            'Impacto sofrido poe pessoa, de objeto projetado',
            'Inala√ß√£o de subst√¢ncia t√≥xica/nociva.',
            'Ingest√£o de subst√¢ncia c√°ustica, t√≥xica ou nociva.',
            'Inala√ß√£o, ingest√£o e/ou absor√ß√£o.',
            'Inc√™ndio/Explos√£o',
            'Objetos cortantes/perfurocortantes',
            'Pessoas n√£o autorizadas e/ou visitantes no local de trabalho',
            'Portas, escotilhas, tampas, \"bocas de visita\", flanges',
            'Proje√ß√£o de Part√≠culas s√≥lidas e/ou l√≠quidas',
            'Queda de pessoa com diferen√ßa de n√≠vel de andaime, passarela, plataforma, etc.',
            'Queda de pessoa com diferen√ßa de n√≠vel de escada (m√≥vel ou fixa).',
            'Queda de pessoa com diferen√ßa de n√≠vel de material empilhado.',
            'Queda de pessoa com diferen√ßa de n√≠vel de ve√≠culo.',
            'Queda de pessoa com diferen√ßa de n√≠vel em po√ßo, escava√ß√£o, abertura no piso, etc.',
            'Queda de pessoa com diferen√ßa de n√≠vel ‚â§ 2m',
            'Queda de pessoa com diferen√ßa de n√≠vel > 2m',
            'Queda de pessoa em mesmo n√≠vel',
            'Rea√ß√£o do corpo a seus movimentos (escorreg√£o sem queda, etc.)',
            'Vidro (recipientes, portas, bancadas, janelas, objetos diversos).',
            'Soterramento',
            'Subst√¢ncias t√≥xicas e/ou inflam√°veis',
            'Superf√≠cies, subst√¢ncias e/ou objetos aquecidos',
            'Superf√≠cies, subst√¢ncias e/ou objetos em baixa temperatura',
            'Tombamento, quebra e/ou ruptura de estrutura (fixa ou m√≥vel)',
            'Tombamento de m√°quina/equipamento',
            'Trabalho √† c√©u aberto',
            'Trabalho em espa√ßos confinados',
            'Trabalho com m√°quinas port√°teis rotativas.',
            'Trabalho com m√°quinas e/ou equipamentos',
        ],
        'danos': [
            'Intoxica√ß√£o, envenenamento, queimadura, irrita√ß√£o ou rea√ß√£o al√©rgica.',
            'Asfixia, desconforto respirat√≥rio, n√≠vel de consci√™ncia alterado, letargia, palidez, pele azulada, tosse, transtorno neurol√≥gico.',
            'Compress√£o/esmagamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Compress√£o/esmagamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Compress√£o/esmagamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Compress√£o/esmagamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Compress√£o/esmagamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Compress√£o/esmagamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Corte, lacera√ß√£o, ferida contusa, punctura (ferida aberta).',
            'Perfura√ß√µes, cortes, arranh√µes, escoria√ß√µes, fraturas.',
            'Dor, incha√ßo, manchas arroxeadas, sangramento, hemorragia em regi√µes vitais, infec√ß√£o, necrose, insufici√™ncia renal.',
            'Arranh√µes, lacera√ß√µes, infec√ß√µes bacterianas, raiva, entre outros tipos de doen√ßas.',
            'Ferimentos de diversos tipos, incluindo com uso de armas, cortes, perfura√ß√µes, luxa√ß√µes, escoria√ß√µes, fraturas.',
            'Cortes, ferimentos, esfoladura, escoria√ß√µes, raspagem superficial da pele, mucosas, etc.',
            'Cortes, ferimentos, esfoladura, escoria√ß√µes, raspagem superficial da pele, mucosas, etc.',
            'Raspagem superficial das c√≥rneas.',
            'Cortes, ferimentos, esfoladura, escoria√ß√µes, raspagem superficial da pele, mucosas, etc.',
            'Compress√£o/esmagamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Esmagamento, prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Compress√£o/esmagamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Interma√ß√£o, insola√ß√£o, c√£ibra, exaust√£o, desidrata√ß√£o, resfriados.',
            'Cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Queimadura ou escaldadura.',
            'Congelamento, geladura e outros efeitos da exposi√ß√£o √† baixa temperatura.',
            'Compress√£o e/ou esmagamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Escoria√ß√£o, ferimento, corte, luxa√ß√£o, fratura, amputa√ß√£o.',
            'Danos materiais, danos pessoais (queimaduras, contus√µes, asfixia, aprosionamento, fraturas, etc.).',
            'Ferimentos, rompimento do t√≠mpano, deslocamento de retina ocular, proje√ß√£o de part√≠culas s√≥lidas e liquidas, queimaduras, choque el√©trico.',
            'Choque el√©trico e eletropless√£o (eletrocuss√£o).',
            'Cortes, ferimentos, escoria√ß√µes.',
            'Cortes, ferimentos, escoria√ß√µes, choque el√©trico.',
            'Irrita√ß√£o os olhos e/ou da pele, dermatites, doen√ßas respirat√≥rias, intoxica√ß√£o.',
            'Asfixia, queimaduras, morte por explos√£o.',
            'Cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Esmagamento, prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Escoria√ß√£o, ferimento, perfura√ß√£o, corte, luxa√ß√£o, fratura, prensamento.',
            'Intoxica√ß√£o, envenenamento, queimadura, irrita√ß√£o ou rea√ß√£o al√©rgica.',
            'Intoxica√ß√£o, envenenamento, queimadura, irrita√ß√£o ou rea√ß√£o al√©rgica.',
            'Intoxica√ß√£o, envenenamento, queimadura, irrita√ß√£o ou rea√ß√£o al√©rgica.',
            'Queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau, asfixia,  arremessos, cortes, escoria√ß√µes, luxa√ß√µes, fraturas.',
            'Corte, lacera√ß√£o, ferida contusa, punctura (ferida aberta), perfura√ß√£o.',
            'Escoria√ß√£o, ferimento, corte, luxa√ß√£o, fratura, entre outros danos devido √†s caracter√≠sticas do local e atividades realizadas.',
            'Prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes, exposi√ß√£o √† gases t√≥xicos.',
            'Ferimento, corte, queimadura, perfura√ß√£o, intoxica√ß√£o.',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas, morte.',
            'Escoria√ß√µes, ferimentos, cortes, luxa√ß√µes, fraturas.',
            'Tor√ß√µes, distens√ß√µes, rupturas ou outras les√µes musculares internas.',
            'Corte, ferimento, perfura√ß√£o.',
            'Asfixia, desconforto respirat√≥rio, n√≠vel de consci√™ncia alterado, letargia, palidez, pele azulada, tosse, transtorno neurol√≥gico.',
            'Intoxica√ß√£o, asfixia, queimaduras de  1¬∫, 2¬∫ ou 3¬∫ grau.',
            'Queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau.',
            'Queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau.',
            'Prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes.',
            'Interma√ß√£o, insola√ß√£o, c√£ibra, exaust√£o, desidrata√ß√£o, resfriados.',
            'Asfixia, hiper√≥xia, contamina√ß√£o por poeiras e/ou gases t√≥xicos, queimadura de 1¬∫, 2¬∫ ou 3¬∫ grau, arremessos, cortes, escoria√ß√µes, luxa√ß√µes, fraturas.',
            'Cortes, ferimentos, escoria√ß√µes, amputa√ß√µes.',
            'Prensamento ou aprisionamento de partes do corpo, cortes, escoria√ß√µes, luxa√ß√µes, fraturas, amputa√ß√µes, choque el√©trico.',
        ]
    },
}

def get_danos_por_riscos_pgr(categoria, riscos_selecionados):
    """Retorna os danos associados aos riscos selecionados da planilha PGR"""
    if categoria not in RISCOS_PGR_DADOS or not riscos_selecionados:
        return ""

    danos_lista = []
    riscos_categoria = RISCOS_PGR_DADOS[categoria]["riscos"]
    danos_categoria = RISCOS_PGR_DADOS[categoria]["danos"]

    for risco in riscos_selecionados:
        if risco in riscos_categoria:
            indice = riscos_categoria.index(risco)
            if indice < len(danos_categoria):
                danos_lista.append(danos_categoria[indice])

    return "; ".join(danos_lista) if danos_lista else ""



# --- Inicializa√ß√£o dos Gerenciadores ---
@st.cache_resource
def init_managers():
    db_manager = DatabaseManager()
    auth_manager = AuthManager(db_manager)
    user_data_manager = UserDataManager(db_manager)
    return db_manager, auth_manager, user_data_manager

db_manager, auth_manager, user_data_manager = init_managers()

# --- CSS PERSONALIZADO ---
st.markdown("""
<style>
    [data-testid="stSidebar"] {
        display: none;
    }
    .main-header {
        text-align: center;
        padding-bottom: 20px;
    }
    .auth-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 2rem;
        border: 1px solid #ddd;
        border-radius: 10px;
        background-color: #f9f9f9;
    }
    .user-info {
        background-color: #262730; 
        color: white;            
        padding: 1rem;
        border-radius: 5px;
        margin-bottom: 1rem;
        border: 1px solid #3DD56D; 
    }
</style>
""", unsafe_allow_html=True)


# --- FUN√á√ïES DE AUTENTICA√á√ÉO E L√ìGICA DE NEG√ìCIO ---
def show_login_page():
    st.markdown("""<div class="main-header"><h1>üîê Acesso ao Sistema</h1><p>Fa√ßa login ou registre-se para acessar o Gerador de OS</p></div>""", unsafe_allow_html=True)
    tab1, tab2 = st.tabs(["Login", "Registro"])
    with tab1:
        with st.form("login_form"):
            email = st.text_input("Email", placeholder="seu@email.com")
            password = st.text_input("Senha", type="password")
            if st.form_submit_button("Entrar", use_container_width=True):
                if email and password:
                    success, message, session_data = auth_manager.login_user(email, password)
                    if success:
                        st.session_state.authenticated = True
                        st.session_state.user_data = session_data
                        st.session_state.user_data_loaded = False 
                        st.success(message)
                        st.rerun()
                    else:
                        st.error(message)
                else:
                    st.error("Por favor, preencha todos os campos")
    with tab2:
        with st.form("register_form"):
            reg_email = st.text_input("Email", placeholder="seu@email.com", key="reg_email")
            reg_password = st.text_input("Senha", type="password", key="reg_password")
            reg_password_confirm = st.text_input("Confirmar Senha", type="password")
            if st.form_submit_button("Registrar", use_container_width=True):
                if reg_email and reg_password and reg_password_confirm:
                    if reg_password != reg_password_confirm:
                        st.error("As senhas n√£o coincidem")
                    else:
                        success, message = auth_manager.register_user(reg_email, reg_password)
                        if success:
                            st.success(message)
                            st.info("Agora voc√™ pode fazer login com suas credenciais")
                        else:
                            st.error(message)
                else:
                    st.error("Por favor, preencha todos os campos")

def check_authentication():
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'user_data' not in st.session_state:
        st.session_state.user_data = None
    if st.session_state.authenticated and st.session_state.user_data:
        session_token = st.session_state.user_data.get('session_token')
        if session_token:
            is_valid, _ = auth_manager.validate_session(session_token)
            if not is_valid:
                st.session_state.authenticated = False
                st.session_state.user_data = None
                st.rerun()

def logout_user():
    if st.session_state.user_data and st.session_state.user_data.get('session_token'):
        auth_manager.logout_user(st.session_state.user_data['session_token'])
    st.session_state.authenticated = False
    st.session_state.user_data = None
    st.session_state.user_data_loaded = False
    st.rerun()

def show_user_info():
    if st.session_state.get('authenticated'):
        user_email = st.session_state.user_data.get('email', 'N/A')
        col1, col2 = st.columns([3, 1])
        with col1:
            st.markdown(f'<div class="user-info">üë§ <strong>Usu√°rio:</strong> {user_email}</div>', unsafe_allow_html=True)
        with col2:
            if st.button("Sair", type="secondary"):
                logout_user()

def init_user_session_state():
    if st.session_state.get('authenticated') and not st.session_state.get('user_data_loaded'):
        user_id = st.session_state.user_data.get('user_id')
        if user_id:
            st.session_state.medicoes_adicionadas = user_data_manager.get_user_measurements(user_id)
            st.session_state.epis_adicionados = user_data_manager.get_user_epis(user_id)
            st.session_state.riscos_manuais_adicionados = user_data_manager.get_user_manual_risks(user_id)
            st.session_state.user_data_loaded = True
    
    if 'medicoes_adicionadas' not in st.session_state:
        st.session_state.medicoes_adicionadas = []
    if 'epis_adicionados' not in st.session_state:
        st.session_state.epis_adicionados = []
    if 'riscos_manuais_adicionados' not in st.session_state:
        st.session_state.riscos_manuais_adicionados = []
    if 'cargos_concluidos' not in st.session_state:
        st.session_state.cargos_concluidos = set()

def normalizar_texto(texto):
    if not isinstance(texto, str): return ""
    return re.sub(r'[\s\W_]+', '', texto.lower().strip())

def mapear_e_renomear_colunas_funcionarios(df):
    df_copia = df.copy()
    mapeamento = {
        'nome_do_funcionario': ['nomedofuncionario', 'nome', 'funcionario', 'funcion√°rio', 'colaborador', 'nomecompleto'],
        'funcao': ['funcao', 'fun√ß√£o', 'cargo'],
        'data_de_admissao': ['datadeadmissao', 'dataadmissao', 'admissao', 'admiss√£o'],
        'setor': ['setordetrabalho', 'setor', 'area', '√°rea', 'departamento'],
        'descricao_de_atividades': ['descricaodeatividades', 'atividades', 'descricaoatividades', 'descri√ß√£odeatividades', 'tarefas', 'descricaodastarefas'],
        'empresa': ['empresa'],
        'unidade': ['unidade']
    }
    colunas_renomeadas = {}
    colunas_df_normalizadas = {normalizar_texto(col): col for col in df_copia.columns}
    for nome_padrao, nomes_possiveis in mapeamento.items():
        for nome_possivel in nomes_possiveis:
            if nome_possivel in colunas_df_normalizadas:
                coluna_original = colunas_df_normalizadas[nome_possivel]
                colunas_renomeadas[coluna_original] = nome_padrao
                break
    df_copia.rename(columns=colunas_renomeadas, inplace=True)
    return df_copia

@st.cache_data
def carregar_planilha(arquivo):
    if arquivo is None: return None
    try:
        return pd.read_excel(arquivo)
    except Exception as e:
        st.error(f"Erro ao ler o ficheiro Excel: {e}")
        return None

@st.cache_data
def obter_dados_pgr():
    data = [
        {'categoria': 'fisico', 'risco': 'Ru√≠do (Cont√≠nuo ou Intermitente)', 'possiveis_danos': 'Perda auditiva, zumbido, estresse, irritabilidade.'},
        {'categoria': 'fisico', 'risco': 'Ru√≠do (Impacto)', 'possiveis_danos': 'Perda auditiva, trauma ac√∫stico.'},
        {'categoria': 'fisico', 'risco': 'Vibra√ß√£o de Corpo Inteiro', 'possiveis_danos': 'Problemas na coluna, dores lombares.'},
        {'categoria': 'fisico', 'risco': 'Vibra√ß√£o de M√£os e Bra√ßos', 'possiveis_danos': 'Doen√ßas osteomusculares, problemas circulat√≥rios.'},
        {'categoria': 'fisico', 'risco': 'Calor', 'possiveis_danos': 'Desidrata√ß√£o, insola√ß√£o, c√£ibras, exaust√£o, interma√ß√£o.'},
        {'categoria': 'fisico', 'risco': 'Frio', 'possiveis_danos': 'Hipotermia, congelamento, doen√ßas respirat√≥rias.'},
        {'categoria': 'fisico', 'risco': 'Radia√ß√µes Ionizantes', 'possiveis_danos': 'C√¢ncer, muta√ß√µes gen√©ticas, queimaduras.'},
        {'categoria': 'fisico', 'risco': 'Radia√ß√µes N√£o-Ionizantes', 'possiveis_danos': 'Queimaduras, les√µes oculares, c√¢ncer de pele.'},
        {'categoria': 'fisico', 'risco': 'Press√µes Anormais', 'possiveis_danos': 'Doen√ßa descompressiva, barotrauma.'},
        {'categoria': 'fisico', 'risco': 'Umidade', 'possiveis_danos': 'Doen√ßas respirat√≥rias, dermatites, micoses.'},
        {'categoria': 'quimico', 'risco': 'Poeiras', 'possiveis_danos': 'Pneumoconioses (silicose, asbestose), irrita√ß√£o respirat√≥ria.'},
        {'categoria': 'quimico', 'risco': 'Fumos', 'possiveis_danos': 'Doen√ßas respirat√≥rias (febre dos fumos met√°licos), intoxica√ß√µes.'},
        {'categoria': 'quimico', 'risco': 'N√©voas', 'possiveis_danos': 'Irrita√ß√£o respirat√≥ria, dermatites.'},
        {'categoria': 'quimico', 'risco': 'Gases', 'possiveis_danos': 'Asfixia, intoxica√ß√µes, irrita√ß√£o respirat√≥ria.'},
        {'categoria': 'quimico', 'risco': 'Vapores', 'possiveis_danos': 'Irrita√ß√£o respirat√≥ria, intoxica√ß√µes, dermatites.'},
        {'categoria': 'quimico', 'risco': 'Produtos Qu√≠micos em Geral', 'possiveis_danos': 'Queimaduras, irrita√ß√µes, intoxica√ß√µes, dermatites, c√¢ncer.'},
        {'categoria': 'biologico', 'risco': 'Bact√©rias', 'possiveis_danos': 'Infec√ß√µes, doen√ßas infecciosas (t√©tano, tuberculose).'},
        {'categoria': 'biologico', 'risco': 'Fungos', 'possiveis_danos': 'Micoses, alergias, infec√ß√µes respirat√≥rias.'},
        {'categoria': 'biologico', 'risco': 'V√≠rus', 'possiveis_danos': 'Doen√ßas virais (hepatite, HIV), infec√ß√µes.'},
        {'categoria': 'ergonomico', 'risco': 'Levantamento e Transporte Manual de Peso', 'possiveis_danos': 'Les√µes musculoesquel√©ticas, dores na coluna.'},
        {'categoria': 'ergonomico', 'risco': 'Posturas Inadequadas', 'possiveis_danos': 'Dores musculares, les√µes na coluna, LER/DORT.'},
        {'categoria': 'ergonomico', 'risco': 'Repetitividade', 'possiveis_danos': 'LER/DORT, tendinites, s√≠ndrome do t√∫nel do carpo.'},
        {'categoria': 'acidente', 'risco': 'M√°quinas e Equipamentos sem Prote√ß√£o', 'possiveis_danos': 'Amputa√ß√µes, cortes, esmagamentos, prensamentos.'},
        {'categoria': 'acidente', 'risco': 'Eletricidade', 'possiveis_danos': 'Choque el√©trico, queimaduras, fibrila√ß√£o ventricular.'},
        {'categoria': 'acidente', 'risco': 'Trabalho em Altura', 'possiveis_danos': 'Quedas, fraturas, morte.'},
        {'categoria': 'acidente', 'risco': 'Proje√ß√£o de Part√≠culas', 'possiveis_danos': 'Les√µes oculares, cortes na pele.'}
    ]
    return pd.DataFrame(data)

def substituir_placeholders(doc, contexto):
    """
    Substitui placeholders preservando a formata√ß√£o do template.
    """
    def aplicar_formatacao_padrao(run):
        """Aplica formata√ß√£o Segoe UI 9pt"""
        run.font.name = 'Segoe UI'
        run.font.size = Pt(9)
        return run

    def processar_paragrafo(p):
        texto_original_paragrafo = p.text

        # --- L√≥gica CORRIGIDA E MANTIDA para [MEDI√á√ïES] ---
        if "[MEDI√á√ïES]" in texto_original_paragrafo:
            for run in p.runs:
                run.text = ''
            p.alignment = WD_ALIGN_PARAGRAPH.LEFT
            medicoes_valor = contexto.get("[MEDI√á√ïES]", "N√£o aplic√°vel")
            if medicoes_valor == "N√£o aplic√°vel" or not medicoes_valor.strip():
                run = aplicar_formatacao_padrao(p.add_run("N√£o aplic√°vel"))
                run.font.bold = False
            else:
                linhas = medicoes_valor.split('\n')
                for i, linha in enumerate(linhas):
                    if not linha.strip(): continue
                    if i > 0: p.add_run().add_break()
                    if ":" in linha:
                        partes = linha.split(":", 1)
                        agente_texto = partes[0].strip() + ":"
                        valor_texto = partes[1].strip()
                        run_agente = aplicar_formatacao_padrao(p.add_run(agente_texto + " "))
                        run_agente.font.bold = True
                        run_valor = aplicar_formatacao_padrao(p.add_run(valor_texto))
                        run_valor.font.bold = False
                    else:
                        run_simples = aplicar_formatacao_padrao(p.add_run(linha))
                        run_simples.font.bold = False
            return

        # --- L√≥gica RESTAURADA E CORRIGIDA para outros placeholders ---
        placeholders_no_paragrafo = [key for key in contexto if key in texto_original_paragrafo]
        if not placeholders_no_paragrafo:
            return

        # Preserva o estilo do primeiro 'run', que geralmente define o estilo do r√≥tulo no template
        estilo_rotulo = {
            'bold': p.runs[0].bold if p.runs else False,
            'italic': p.runs[0].italic if p.runs else False,
            'underline': p.runs[0].underline if p.runs else False,
        }

        # Substitui todos os placeholders para obter o texto final
        texto_final = texto_original_paragrafo
        for key in placeholders_no_paragrafo:
            texto_final = texto_final.replace(key, str(contexto[key]))
        
        # Limpa o par√°grafo para reescrev√™-lo com a formata√ß√£o correta
        p.clear()

        # Reconstr√≥i o par√°grafo, aplicando o estilo do r√≥tulo e deixando os valores sem formata√ß√£o
        texto_restante = texto_final
        for i, key in enumerate(placeholders_no_paragrafo):
            valor_placeholder = str(contexto[key])
            partes = texto_restante.split(valor_placeholder, 1)
            
            # Adiciona o texto antes do valor (que √© o r√≥tulo) com o estilo preservado
            if partes[0]:
                run_rotulo = aplicar_formatacao_padrao(p.add_run(partes[0]))
                run_rotulo.font.bold = estilo_rotulo['bold']
                run_rotulo.font.italic = estilo_rotulo['italic']
                run_rotulo.underline = estilo_rotulo['underline']

            # Adiciona o valor do placeholder sem formata√ß√£o
            run_valor = aplicar_formatacao_padrao(p.add_run(valor_placeholder))
            run_valor.font.bold = False
            run_valor.font.italic = False
            run_valor.font.underline = False
            
            texto_restante = partes[1]

        # Adiciona qualquer texto que sobrar no final, com o estilo do r√≥tulo
        if texto_restante:
            run_final = aplicar_formatacao_padrao(p.add_run(texto_restante))
            run_final.font.bold = estilo_rotulo['bold']
            run_final.font.italic = estilo_rotulo['italic']
            run_final.underline = estilo_rotulo['underline']

    # Processar par√°grafos em tabelas e no corpo do documento
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for p in cell.paragraphs:
                    processar_paragrafo(p)
    for p in doc.paragraphs:
        processar_paragrafo(p)


def gerar_os(funcionario, df_pgr, riscos_selecionados, epis_manuais, medicoes_manuais, riscos_manuais, modelo_doc_carregado):
    doc = Document(modelo_doc_carregado)
    riscos_info = df_pgr[df_pgr['risco'].isin(riscos_selecionados)]
    riscos_por_categoria = {cat: [] for cat in CATEGORIAS_RISCO.keys()}
    danos_por_categoria = {cat: [] for cat in CATEGORIAS_RISCO.keys()}

    # Processar riscos selecionados
    for _, risco_row in riscos_info.iterrows():
        categoria = str(risco_row.get("categoria", "")).lower()
        if categoria in riscos_por_categoria:
            riscos_por_categoria[categoria].append(str(risco_row.get("risco", "")))
            danos = risco_row.get("possiveis_danos")
            if pd.notna(danos): 
                danos_por_categoria[categoria].append(str(danos))

    # Processar riscos manuais
    if riscos_manuais:
        map_categorias_rev = {v: k for k, v in CATEGORIAS_RISCO.items()}
        for risco_manual in riscos_manuais:
            categoria_display = risco_manual.get('category')
            categoria_alvo = map_categorias_rev.get(categoria_display)
            if categoria_alvo:
                riscos_por_categoria[categoria_alvo].append(risco_manual.get('risk_name', ''))
                if risco_manual.get('possible_damages'):
                    danos_por_categoria[categoria_alvo].append(risco_manual.get('possible_damages'))

    # Limpar duplicatas
    for cat in danos_por_categoria:
        danos_por_categoria[cat] = sorted(list(set(danos_por_categoria[cat])))

    # FORMATA√á√ÉO SIMPLES DAS MEDI√á√ïES
    medicoes_formatadas = []
    for med in medicoes_manuais:
        agente = str(med.get('agent', '')).strip()
        valor = str(med.get('value', '')).strip()
        unidade = str(med.get('unit', '')).strip()
       
        if agente and agente not in ['', 'N/A', 'nan', 'None'] and valor and valor not in ['', 'N/A', 'nan', 'None']:
            linha = f"{agente}: {valor}"
            if unidade and unidade not in ['', 'N/A', 'nan', 'None']:
                linha += f" {unidade}"
            if epi and epi not in ['', 'N/A', 'nan', 'None']:
                linha += f" | EPI: {epi}"
            medicoes_formatadas.append(linha)
    medicoes_texto = "\n".join(medicoes_formatadas) if medicoes_formatadas else "N√£o aplic√°vel"

    # Processar data de admiss√£o
    data_admissao = "N√£o informado"
    if 'data_de_admissao' in funcionario and pd.notna(funcionario['data_de_admissao']):
        try: 
            data_admissao = pd.to_datetime(funcionario['data_de_admissao']).strftime('%d/%m/%Y')
        except Exception: 
            data_admissao = str(funcionario['data_de_admissao'])
    elif 'Data de Admiss√£o' in funcionario and pd.notna(funcionario['Data de Admiss√£o']):
        try: 
            data_admissao = pd.to_datetime(funcionario['Data de Admiss√£o']).strftime('%d/%m/%Y')
        except Exception: 
            data_admissao = str(funcionario['Data de Admiss√£o'])

    # Processar descri√ß√£o de atividades
    descricao_atividades = "N√£o informado"
    if 'descricao_de_atividades' in funcionario and pd.notna(funcionario['descricao_de_atividades']):
        descricao_atividades = str(funcionario['descricao_de_atividades']).strip()
    elif 'Descri√ß√£o de Atividades' in funcionario and pd.notna(funcionario['Descri√ß√£o de Atividades']):
        descricao_atividades = str(funcionario['Descri√ß√£o de Atividades']).strip()

    if descricao_atividades == "N√£o informado" or descricao_atividades == "" or descricao_atividades == "nan":
        funcao = str(funcionario.get('funcao', funcionario.get('Fun√ß√£o', 'N/A')))
        setor = str(funcionario.get('setor', funcionario.get('Setor', 'N/A')))
        if funcao != 'N/A' and setor != 'N/A':
            descricao_atividades = f"Atividades relacionadas √† fun√ß√£o de {funcao} no setor {setor}, incluindo todas as tarefas operacionais, administrativas e de apoio inerentes ao cargo."
        else:
            descricao_atividades = "Atividades operacionais, administrativas e de apoio conforme definido pela chefia imediata."

    def tratar_lista_vazia(lista, separador=", "):
        if not lista or all(not item.strip() for item in lista): 
            return "N√£o identificado"
        return separador.join(sorted(list(set(item for item in lista if item and item.strip()))))

    # Contexto
    contexto = {
        "[NOME EMPRESA]": str(funcionario.get("empresa", funcionario.get("Empresa", "N/A"))), 
        "[UNIDADE]": str(funcionario.get("unidade", funcionario.get("Unidade", "N/A"))),
        "[NOME FUNCION√ÅRIO]": str(funcionario.get("nome_do_funcionario", funcionario.get("Nome", "N/A"))), 
        "[DATA DE ADMISS√ÉO]": data_admissao,
        "[SETOR]": str(funcionario.get("setor", funcionario.get("Setor", "N/A"))), 
        "[FUN√á√ÉO]": str(funcionario.get("funcao", funcionario.get("Fun√ß√£o", "N/A"))),
        "[DESCRI√á√ÉO DE ATIVIDADES]": descricao_atividades,
        "[RISCOS F√çSICOS]": tratar_lista_vazia(riscos_por_categoria["fisico"]),
        "[RISCOS DE ACIDENTE]": tratar_lista_vazia(riscos_por_categoria["acidente"]),
        "[RISCOS QU√çMICOS]": tratar_lista_vazia(riscos_por_categoria["quimico"]),
        "[RISCOS BIOL√ìGICOS]": tratar_lista_vazia(riscos_por_categoria["biologico"]),
        "[RISCOS ERGON√îMICOS]": tratar_lista_vazia(riscos_por_categoria["ergonomico"]),
        "[POSS√çVEIS DANOS RISCOS F√çSICOS]": tratar_lista_vazia(danos_por_categoria["fisico"], "; "),
        "[POSS√çVEIS DANOS RISCOS ACIDENTE]": tratar_lista_vazia(danos_por_categoria["acidente"], "; "),
        "[POSS√çVEIS DANOS RISCOS QU√çMICOS]": tratar_lista_vazia(danos_por_categoria["quimico"], "; "),
        "[POSS√çVEIS DANOS RISCOS BIOL√ìGICOS]": tratar_lista_vazia(danos_por_categoria["biologico"], "; "),
        "[POSS√çVEIS DANOS RISCOS ERGON√îMICOS]": tratar_lista_vazia(danos_por_categoria["ergonomico"], "; "),
        "[EPIS]": tratar_lista_vazia([epi['epi_name'] for epi in epis_manuais]),
        "[MEDI√á√ïES]": medicoes_texto,
    }

    substituir_placeholders(doc, contexto)
    return doc

# --- APLICA√á√ÉO PRINCIPAL ---
def main():
    check_authentication()
    init_user_session_state()
    
    if not st.session_state.get('authenticated'):
        show_login_page()
        return
    
    user_id = st.session_state.user_data['user_id']
    show_user_info()
    
    st.markdown("""<div class="main-header"><h1>üìÑ Gerador de Ordens de Servi√ßo (OS)</h1><p>Gere OS em lote a partir de um modelo Word (.docx) e uma planilha de funcion√°rios.</p></div>""", unsafe_allow_html=True)

    with st.container(border=True):
        st.markdown("##### üìÇ 1. Carregue os Documentos")
        col1, col2 = st.columns(2)
        with col1:
            arquivo_funcionarios = st.file_uploader("üìÑ **Planilha de Funcion√°rios (.xlsx)**", type="xlsx")
        with col2:
            arquivo_modelo_os = st.file_uploader("üìù **Modelo de OS (.docx)**", type="docx")

    if not arquivo_funcionarios or not arquivo_modelo_os:
        st.info("üìã Por favor, carregue a Planilha de Funcion√°rios e o Modelo de OS para continuar.")
        return
    
    df_funcionarios_raw = carregar_planilha(arquivo_funcionarios)
    if df_funcionarios_raw is None:
        st.stop()

    df_funcionarios = mapear_e_renomear_colunas_funcionarios(df_funcionarios_raw)
    df_pgr = obter_dados_pgr()

    with st.container(border=True):
        st.markdown('##### üë• 2. Selecione os Funcion√°rios')
        setores = sorted(df_funcionarios['setor'].dropna().unique().tolist()) if 'setor' in df_funcionarios.columns else []
        setor_sel = st.multiselect("Filtrar por Setor(es)", setores)
        df_filtrado_setor = df_funcionarios[df_funcionarios['setor'].isin(setor_sel)] if setor_sel else df_funcionarios
        st.caption(f"{len(df_filtrado_setor)} funcion√°rio(s) no(s) setor(es) selecionado(s).")
        funcoes_disponiveis = sorted(df_filtrado_setor['funcao'].dropna().unique().tolist()) if 'funcao' in df_filtrado_setor.columns else []
        funcoes_formatadas = []
        if setor_sel:
            for funcao in funcoes_disponiveis:
                concluido = all((s, funcao) in st.session_state.cargos_concluidos for s in setor_sel)
                if concluido:
                    funcoes_formatadas.append(f"{funcao} ‚úÖ Conclu√≠do")
                else:
                    funcoes_formatadas.append(funcao)
        else:
            funcoes_formatadas = funcoes_disponiveis
        funcao_sel_formatada = st.multiselect("Filtrar por Fun√ß√£o/Cargo(s)", funcoes_formatadas)
        funcao_sel = [f.replace(" ‚úÖ Conclu√≠do", "") for f in funcao_sel_formatada]
        df_final_filtrado = df_filtrado_setor[df_filtrado_setor['funcao'].isin(funcao_sel)] if funcao_sel else df_filtrado_setor
        st.success(f"**{len(df_final_filtrado)} funcion√°rio(s) selecionado(s) para gerar OS.**")
        st.dataframe(df_final_filtrado[['nome_do_funcionario', 'setor', 'funcao']])
    with st.container(border=True):
        st.markdown('##### ‚ö†Ô∏è 3. Configure os Riscos e Medidas de Controle')
        st.info("Configure os riscos que ser√£o aplicados a TODOS os funcion√°rios selecionados.")

        # Tabs para cada categoria de risco
        tab_fisico, tab_quimico, tab_biologico, tab_ergonomico, tab_acidente, tab_manual = st.tabs([
            "üî• F√≠sicos", "‚öóÔ∏è Qu√≠micos", "ü¶† Biol√≥gicos", "üèÉ Ergon√¥micos", "‚ö†Ô∏è Acidentes", "‚ûï Manual"
        ])

        riscos_selecionados_pgr = {}  # Para armazenar os riscos selecionados da planilha PGR

        # Tab F√≠sicos
        with tab_fisico:
            if 'fisico' in RISCOS_PGR_DADOS:
                st.write(f"**Riscos F√≠sicos PGR:** {len(RISCOS_PGR_DADOS['fisico']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['fisico'] = st.multiselect(
                    "Selecione os Riscos F√≠sicos:",
                    options=RISCOS_PGR_DADOS['fisico']['riscos'],
                    key="riscos_pgr_fisico",
                    help="Riscos f√≠sicos da planilha PGR"
                )
                if riscos_selecionados_pgr['fisico']:
                    danos = get_danos_por_riscos_pgr('fisico', riscos_selecionados_pgr['fisico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        # Tab Qu√≠micos
        with tab_quimico:
            if 'quimico' in RISCOS_PGR_DADOS:
                st.write(f"**Riscos Qu√≠micos PGR:** {len(RISCOS_PGR_DADOS['quimico']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['quimico'] = st.multiselect(
                    "Selecione os Riscos Qu√≠micos:",
                    options=RISCOS_PGR_DADOS['quimico']['riscos'],
                    key="riscos_pgr_quimico",
                    help="Riscos qu√≠micos da planilha PGR"
                )
                if riscos_selecionados_pgr['quimico']:
                    danos = get_danos_por_riscos_pgr('quimico', riscos_selecionados_pgr['quimico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        # Tab Biol√≥gicos
        with tab_biologico:
            if 'biologico' in RISCOS_PGR_DADOS:
                st.write(f"**Riscos Biol√≥gicos PGR:** {len(RISCOS_PGR_DADOS['biologico']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['biologico'] = st.multiselect(
                    "Selecione os Riscos Biol√≥gicos:",
                    options=RISCOS_PGR_DADOS['biologico']['riscos'],
                    key="riscos_pgr_biologico",
                    help="Riscos biol√≥gicos da planilha PGR"
                )
                if riscos_selecionados_pgr['biologico']:
                    danos = get_danos_por_riscos_pgr('biologico', riscos_selecionados_pgr['biologico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        # Tab Ergon√¥micos
        with tab_ergonomico:
            if 'ergonomico' in RISCOS_PGR_DADOS:
                st.write(f"**Riscos Ergon√¥micos PGR:** {len(RISCOS_PGR_DADOS['ergonomico']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['ergonomico'] = st.multiselect(
                    "Selecione os Riscos Ergon√¥micos:",
                    options=RISCOS_PGR_DADOS['ergonomico']['riscos'],
                    key="riscos_pgr_ergonomico",
                    help="Riscos ergon√¥micos da planilha PGR"
                )
                if riscos_selecionados_pgr['ergonomico']:
                    danos = get_danos_por_riscos_pgr('ergonomico', riscos_selecionados_pgr['ergonomico'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        # Tab Acidentes
        with tab_acidente:
            if 'acidente' in RISCOS_PGR_DADOS:
                st.write(f"**Riscos de Acidente PGR:** {len(RISCOS_PGR_DADOS['acidente']['riscos'])} op√ß√µes dispon√≠veis")
                riscos_selecionados_pgr['acidente'] = st.multiselect(
                    "Selecione os Riscos de Acidente:",
                    options=RISCOS_PGR_DADOS['acidente']['riscos'],
                    key="riscos_pgr_acidente",
                    help="Riscos de acidente da planilha PGR"
                )
                if riscos_selecionados_pgr['acidente']:
                    danos = get_danos_por_riscos_pgr('acidente', riscos_selecionados_pgr['acidente'])
                    if danos:
                        st.info(f"**Poss√≠veis Danos:** {danos}")

        # Tab Manual (mant√©m funcionalidade existente)
        with tab_manual:
            st.markdown("**Adicionar Riscos Personalizados**")
            st.info("Use esta se√ß√£o para adicionar riscos que n√£o est√£o na planilha PGR")

            col1, col2 = st.columns([2, 1])
            with col1:
                risco_manual = st.text_input("Descri√ß√£o do Risco Personalizado:")
            with col2:
                categoria_manual = st.selectbox("Categoria:", ["F√≠sico", "Qu√≠mico", "Biol√≥gico", "Ergon√¥mico", "Acidente"])

            if st.button("Adicionar Risco Personalizado"):
                if risco_manual:
                    st.success(f"Risco '{risco_manual}' adicionado √† categoria {categoria_manual}")
                else:
                    st.error("Digite a descri√ß√£o do risco")

        # Resumo dos riscos selecionados
        total_riscos = sum(len(riscos) for riscos in riscos_selecionados_pgr.values() if riscos)
        if total_riscos > 0:
            st.success(f"**Total de riscos selecionados:** {total_riscos}")
            with st.expander("Ver resumo dos riscos selecionados"):
                for categoria, riscos_lista in riscos_selecionados_pgr.items():
                    if riscos_lista:
                        st.write(f"**{categoria.title()}:** {len(riscos_lista)} riscos")
                        for risco in riscos_lista:
                            st.write(f"‚Ä¢ {risco}")
