import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Inches
import os
import zipfile
from io import BytesIO
import tempfile
import time
import re

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gerador de Ordens de Servi√ßo (OS)",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Fun√ß√µes de L√≥gica de Neg√≥cio ---

def normalizar_texto(texto):
    """Fun√ß√£o auxiliar para limpar e padronizar strings."""
    if not isinstance(texto, str):
        return ""
    texto = texto.lower().strip()
    texto = re.sub(r'[^a-z0-9]', '', texto) # Remove acentos, espa√ßos e caracteres especiais
    return texto

def mapear_e_renomear_colunas_funcionarios(df):
    """Mapeia e renomeia colunas da planilha de funcion√°rios de forma mais robusta."""
    mapeamento = {
        'nome_do_funcionario': ['nome', 'nomedofuncionario', 'funcionario', 'colaborador', 'nomecompleto'],
        'funcao': ['funcao', 'fun√ßao', 'cargo'],
        'data_de_admissao': ['datadeadmissao', 'dataadmissao', 'admissao'],
        'setor': ['setor', 'area', 'departamento'],
        'descricao_de_atividades': ['descricaodeatividades', 'atividades', 'descricaoatividades', 'tarefas', 'descricaodastarefas'],
        'empresa': ['empresa'],
        'unidade': ['unidade']
    }
    
    colunas_renomeadas = {}
    colunas_df = {normalizar_texto(col): col for col in df.columns}

    for nome_padrao, nomes_possiveis in mapeamento.items():
        for nome_possivel in nomes_possiveis:
            if nome_possivel in colunas_df:
                coluna_original = colunas_df[nome_possivel]
                colunas_renomeadas[coluna_original] = nome_padrao
                break # Pula para o pr√≥ximo nome padr√£o assim que encontrar uma correspond√™ncia
                
    df.rename(columns=colunas_renomeadas, inplace=True)
    return df

@st.cache_data
def carregar_planilha(arquivo):
    """Carrega uma planilha do Excel."""
    if arquivo is None:
        return None
    try:
        return pd.read_excel(arquivo)
    except Exception as e:
        st.error(f"Erro ao ler o ficheiro Excel: {e}")
        return None

def replace_text_in_paragraph(paragraph, contexto):
    """Substitui placeholders em um √∫nico par√°grafo."""
    for key, value in contexto.items():
        if key in paragraph.text:
            inline = paragraph.runs
            for i in range(len(inline)):
                if key in inline[i].text:
                    text = inline[i].text.replace(key, str(value))
                    inline[i].text = text

def substituir_placeholders(doc, contexto):
    """Substitui os placeholders em todo o documento."""
    for p in doc.paragraphs:
        replace_text_in_paragraph(p, contexto)
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for p in cell.paragraphs:
                    replace_text_in_paragraph(p, contexto)

def gerar_os(funcionario, df_pgr, riscos_selecionados, epis_manuais, medicoes_manuais, perigo_manual, danos_manuais, categoria_manual, modelo_doc_carregado, logo_path=None):
    """Gera uma √∫nica Ordem de Servi√ßo."""
    doc = Document(modelo_doc_carregado)

    if logo_path:
        try:
            doc.tables[0].cell(0, 0).paragraphs[0].add_run().add_picture(logo_path, width=Inches(2.0))
        except Exception:
            st.warning("Aviso: N√£o foi poss√≠vel inserir a logo na tabela do cabe√ßalho. Verifique o modelo.")
            
    riscos_info = df_pgr[df_pgr['risco'].isin(riscos_selecionados)]
    
    riscos_por_categoria = {"fisico": [], "quimico": [], "biologico": [], "ergonomico": [], "acidente": []}
    danos_por_categoria = {"fisico": [], "quimico": [], "biologico": [], "ergonomico": [], "acidente": []}
    
    for _, risco_row in riscos_info.iterrows():
        categoria = str(risco_row.get("categoria", "")).lower()
        if categoria in riscos_por_categoria:
            riscos_por_categoria[categoria].append(str(risco_row.get("risco", "")))
            danos = risco_row.get("possiveis_danos")
            if pd.notna(danos):
                danos_por_categoria[categoria].append(str(danos))

    if perigo_manual and categoria_manual:
        map_categorias = {"F√≠sicos": "fisico", "Qu√≠micos": "quimico", "Biol√≥gicos": "biologico", "Ergon√¥micos": "ergonomico", "Acidentes": "acidente"}
        categoria_alvo = map_categorias.get(categoria_manual)
        if categoria_alvo:
            riscos_por_categoria[categoria_alvo].append(perigo_manual)
            if danos_manuais:
                danos_por_categoria[categoria_alvo].append(danos_manuais)

    epis_recomendados = set(epi.strip() for epi in epis_manuais.split(',') if epi.strip())

    # CORRE√á√ÉO: Trata a data de admiss√£o e descri√ß√£o de atividades
    data_admissao = "N√£o informado"
    if 'data_de_admissao' in funcionario and pd.notna(funcionario['data_de_admissao']):
        try:
            data_admissao = pd.to_datetime(funcionario['data_de_admissao']).strftime('%d/%m/%Y')
        except Exception:
            data_admissao = str(funcionario['data_de_admissao'])

    descricao_atividades = "N√£o informado"
    if 'descricao_de_atividades' in funcionario and pd.notna(funcionario['descricao_de_atividades']):
        descricao_atividades = str(funcionario['descricao_de_atividades'])

    def tratar_lista_vazia(lista, separador=", "):
        if not lista or all(not item.strip() for item in lista):
            return "N√£o identificado"
        return separador.join(sorted(list(set(lista))))

    contexto = {
        "[NOME EMPRESA]": str(funcionario.get("empresa", "N/A")), 
        "[UNIDADE]": str(funcionario.get("unidade", "N/A")),
        "[NOME FUNCION√ÅRIO]": str(funcionario.get("nome_do_funcionario", "N/A")), 
        "[DATA DE ADMISS√ÉO]": data_admissao,
        "[SETOR]": str(funcionario.get("setor", "N/A")), 
        "[FUN√á√ÉO]": str(funcionario.get("funcao", "N/A")),
        "[DESCRI√á√ÉO DE ATIVIDADES]": descricao_atividades,
        "[RISCOS F√çSICOS]": tratar_lista_vazia(riscos_por_categoria["fisico"]),
        "[RISCOS DE ACIDENTE]": tratar_lista_vazia(riscos_por_categoria["acidente"]),
        "[RISCOS QU√çMICOS]": tratar_lista_vazia(riscos_por_categoria["quimico"]),
        "[RISCOS BIOL√ìGICOS]": tratar_lista_vazia(riscos_por_categoria["biologico"]),
        "[RISCOS ERGON√îMICOS]": tratar_lista_vazia(riscos_por_categoria["ergonomico"]),
        "[POSS√çVEIS DANOS RISCOS F√çSICOS]": tratar_lista_vazia(danos_por_categoria["fisico"], "; "),
        "[POSS√çVEIS DANOS RISCOS ACIDENTE]": tratar_lista_vazia(danos_por_categoria["acidente"], "; "),
        "[POSS√çVEIS DANOS RISCOS QU√çMICOS]": tratar_lista_vazia(danos_por_categoria["quimico"], "; "),
        "[POSS√çVEIS DANOS RISCOS BIOL√ìGICOS]": tratar_lista_vazia(danos_por_categoria["biologico"], "; "),
        "[POSS√çVEIS DANOS RISCOS ERGON√îMICOS]": tratar_lista_vazia(danos_por_categoria["ergonomico"], "; "),
        "[EPIS]": tratar_lista_vazia(list(epis_recomendados)) or "N√£o aplic√°vel",
        "[MEDI√á√ïES]": medicoes_manuais or "N√£o aplic√°vel",
    }
    
    substituir_placeholders(doc, contexto)
    return doc

def obter_dados_pgr():
    """Retorna os dados PGR padr√£o incorporados no sistema."""
    return pd.DataFrame([
        {'categoria': 'fisico', 'risco': 'Ru√≠do', 'possiveis_danos': 'Perda auditiva, zumbido, estresse, irritabilidade.'},
        {'categoria': 'fisico', 'risco': 'Vibra√ß√£o', 'possiveis_danos': 'Doen√ßas osteomusculares, problemas circulat√≥rios.'},
        {'categoria': 'fisico', 'risco': 'Calor', 'possiveis_danos': 'Desidrata√ß√£o, insola√ß√£o, c√£ibras, exaust√£o, interma√ß√£o.'},
        {'categoria': 'fisico', 'risco': 'Frio', 'possiveis_danos': 'Hipotermia, congelamento, doen√ßas respirat√≥rias.'},
        {'categoria': 'fisico', 'risco': 'Radia√ß√µes Ionizantes', 'possiveis_danos': 'C√¢ncer, muta√ß√µes gen√©ticas, queimaduras.'},
        {'categoria': 'fisico', 'risco': 'Radia√ß√µes N√£o Ionizantes', 'possiveis_danos': 'Queimaduras, les√µes oculares, c√¢ncer de pele.'},
        {'categoria': 'fisico', 'risco': 'Press√µes Anormais', 'possiveis_danos': 'Doen√ßa descompressiva, barotrauma.'},
        {'categoria': 'fisico', 'risco': 'Umidade', 'possiveis_danos': 'Doen√ßas respirat√≥rias, dermatites.'},
        {'categoria': 'quimico', 'risco': 'Poeiras', 'possiveis_danos': 'Pneumoconioses, irrita√ß√£o respirat√≥ria, alergias.'},
        {'categoria': 'quimico', 'risco': 'Fumos', 'possiveis_danos': 'Doen√ßas respirat√≥rias, intoxica√ß√µes.'},
        {'categoria': 'quimico', 'risco': 'N√©voas', 'possiveis_danos': 'Irrita√ß√£o respirat√≥ria, dermatites.'},
        {'categoria': 'quimico', 'risco': 'Gases', 'possiveis_danos': 'Asfixia, intoxica√ß√µes, irrita√ß√£o respirat√≥ria.'},
        {'categoria': 'quimico', 'risco': 'Vapores', 'possiveis_danos': 'Irrita√ß√£o respirat√≥ria, intoxica√ß√µes, dermatites.'},
        {'categoria': 'quimico', 'risco': 'Subst√¢ncias Qu√≠micas (l√≠quidos e s√≥lidos)', 'possiveis_danos': 'Queimaduras, irrita√ß√µes, intoxica√ß√µes, dermatites, c√¢ncer.'},
        {'categoria': 'quimico', 'risco': 'Agrot√≥xicos', 'possiveis_danos': 'Intoxica√ß√µes, dermatites, c√¢ncer.'},
        {'categoria': 'biologico', 'risco': 'Bact√©rias', 'possiveis_danos': 'Infec√ß√µes, doen√ßas infecciosas.'},
        {'categoria': 'biologico', 'risco': 'Fungos', 'possiveis_danos': 'Micoses, alergias, infec√ß√µes respirat√≥rias.'},
        {'categoria': 'biologico', 'risco': 'V√≠rus', 'possiveis_danos': 'Doen√ßas virais, infec√ß√µes.'},
        {'categoria': 'biologico', 'risco': 'Parasitas', 'possiveis_danos': 'Doen√ßas parasit√°rias, infec√ß√µes.'},
        {'categoria': 'biologico', 'risco': 'Protozo√°rios', 'possiveis_danos': 'Doen√ßas parasit√°rias.'},
        {'categoria': 'biologico', 'risco': 'Bacilos', 'possiveis_danos': 'Infec√ß√µes diversas, como tuberculose.'},
        {'categoria': 'ergonomico', 'risco': 'Levantamento e Transporte Manual de Peso', 'possiveis_danos': 'Les√µes musculoesquel√©ticas, dores na coluna.'},
        {'categoria': 'ergonomico', 'risco': 'Posturas Inadequadas', 'possiveis_danos': 'Dores musculares, les√µes na coluna, LER/DORT.'},
        {'categoria': 'ergonomico', 'risco': 'Repetitividade', 'possiveis_danos': 'LER/DORT, tendinites, s√≠ndrome do t√∫nel do carpo.'},
        {'categoria': 'ergonomico', 'risco': 'Jornada de Trabalho Prolongada', 'possiveis_danos': 'Fadiga, estresse, acidentes de trabalho.'},
        {'categoria': 'ergonomico', 'risco': 'Monotonia e Ritmo Excessivo', 'possiveis_danos': 'Estresse, fadiga mental, desmotiva√ß√£o.'},
        {'categoria': 'ergonomico', 'risco': 'Controle R√≠gido de Produtividade', 'possiveis_danos': 'Estresse, ansiedade, burnout.'},
        {'categoria': 'ergonomico', 'risco': 'Ilumina√ß√£o Inadequada', 'possiveis_danos': 'Fadiga visual, dores de cabe√ßa.'},
        {'categoria': 'ergonomico', 'risco': 'Mobili√°rio Inadequado', 'possiveis_danos': 'Dores musculares, les√µes na coluna.'},
        {'categoria': 'acidente', 'risco': 'Arranjo F√≠sico Inadequado', 'possiveis_danos': 'Quedas, colis√µes, esmagamentos.'},
        {'categoria': 'acidente', 'risco': 'M√°quinas e Equipamentos sem Prote√ß√£o', 'possiveis_danos': 'Amputa√ß√µes, cortes, esmagamentos, prensamentos.'},
        {'categoria': 'acidente', 'risco': 'Ferramentas Inadequadas ou Defeituosas', 'possiveis_danos': 'Cortes, perfura√ß√µes, fraturas.'},
        {'categoria': 'acidente', 'risco': 'Eletricidade', 'possiveis_danos': 'Choque el√©trico, queimaduras, fibrila√ß√£o ventricular.'},
        {'categoria': 'acidente', 'risco': 'Inc√™ndio e Explos√£o', 'possiveis_danos': 'Queimaduras, asfixia, les√µes por impacto.'},
        {'categoria': 'acidente', 'risco': 'Animais Pe√ßonhentos', 'possiveis_danos': 'Picadas, mordidas, rea√ß√µes al√©rgicas, envenenamento.'},
        {'categoria': 'acidente', 'risco': 'Armazenamento Inadequado', 'possiveis_danos': 'Quedas de materiais, esmagamentos, soterramentos.'},
        {'categoria': 'acidente', 'risco': 'Trabalho em Altura', 'possiveis_danos': 'Quedas, fraturas, morte.'},
        {'categoria': 'acidente', 'risco': 'Espa√ßos Confinados', 'possiveis_danos': 'Asfixia, intoxica√ß√µes, explos√µes.'},
        {'categoria': 'acidente', 'risco': 'Condu√ß√£o de Ve√≠culos', 'possiveis_danos': 'Acidentes de tr√¢nsito, les√µes diversas.'},
        {'categoria': 'acidente', 'risco': 'Proje√ß√£o de Part√≠culas', 'possiveis_danos': 'Les√µes oculares, cortes na pele.'}
    ])
# --- Interface do Streamlit ---
# (O restante do c√≥digo da interface continua o mesmo)
st.markdown("""<style>...</style>""", unsafe_allow_html=True) # CSS omitido para brevidade
st.markdown("""<div class="main-header">...</div>""", unsafe_allow_html=True) # Header omitido

st.sidebar.markdown("### üìÅ Arquivos Necess√°rios")
arquivo_funcionarios = st.sidebar.file_uploader("1. Planilha de Funcion√°rios (.xlsx)", type="xlsx")
arquivo_modelo_os = st.sidebar.file_uploader("2. Modelo de OS (.docx)", type="docx")
arquivo_logo = st.sidebar.file_uploader("3. Logo da Empresa (Opcional)", type=["png", "jpg", "jpeg"])
st.sidebar.info("√â obrigat√≥rio carregar a planilha e o modelo de OS para iniciar.")

if not arquivo_funcionarios or not arquivo_modelo_os:
    st.info("üìã Por favor, carregue a Planilha de Funcion√°rios e o Modelo de OS (.docx) na barra lateral para come√ßar.")
else:
    df_funcionarios_raw = carregar_planilha(arquivo_funcionarios)
    df_funcionarios = mapear_e_renomear_colunas_funcionarios(df_funcionarios_raw)
    df_pgr = obter_dados_pgr()

    st.markdown('<div class="section-header"><h3>üë• Sele√ß√£o de Funcion√°rios</h3></div>', unsafe_allow_html=True)
    # (Filtros e exibi√ß√£o da tabela)
    setores = ["Todos"] + (df_funcionarios['setor'].dropna().unique().tolist() if 'setor' in df_funcionarios.columns else [])
    setor_sel = st.selectbox("Filtrar por Setor", setores)
    df_filtrado = df_funcionarios[df_funcionarios['setor'] == setor_sel] if setor_sel != "Todos" else df_funcionarios
    funcoes = ["Todos"] + (df_filtrado['funcao'].dropna().unique().tolist() if 'funcao' in df_filtrado.columns else [])
    funcao_sel = st.selectbox("Filtrar por Fun√ß√£o/Cargo", funcoes)
    df_final_filtrado = df_filtrado[df_filtrado['funcao'] == funcao_sel] if funcao_sel != "Todos" else df_filtrado
    
    st.success(f"‚úÖ {len(df_final_filtrado)} funcion√°rios selecionados.")
    if 'nome_do_funcionario' in df_final_filtrado.columns:
        st.dataframe(df_final_filtrado[['nome_do_funcionario', 'setor', 'funcao']], use_container_width=True)

    # (Sele√ß√£o de riscos)
    st.markdown('<div class="section-header"><h3>‚ö†Ô∏è Configura√ß√£o de Riscos</h3></div>', unsafe_allow_html=True)
    categorias = {'fisico': 'üî• F√≠sicos', 'quimico': '‚öóÔ∏è Qu√≠micos', 'biologico': 'ü¶† Biol√≥gicos', 'ergonomico': 'üèÉ Ergon√¥micos', 'acidente': '‚ö†Ô∏è Acidentes'}
    riscos_selecionados = []
    tabs = st.tabs(list(categorias.values()))
    for i, (key, nome) in enumerate(categorias.items()):
        with tabs[i]:
            riscos_categoria = df_pgr[df_pgr['categoria'] == key]['risco'].tolist()
            selecionados = st.multiselect(f"Selecione os riscos:", options=riscos_categoria, key=f"riscos_{key}")
            riscos_selecionados.extend(selecionados)

    with st.expander("‚ûï Adicionar Risco Manual, EPIs e Medi√ß√µes"):
        # ... (Inputs manuais)
        perigo_manual = st.text_input("Descri√ß√£o do Risco Manual")
        categoria_manual = st.selectbox("Categoria do Risco Manual", [""] + list(categorias.values()))
        danos_manuais = st.text_area("Poss√≠veis Danos do Risco Manual")
        epis_manuais = st.text_area("EPIs (separados por v√≠rgula)")
        medicoes_manuais = st.text_area("Medi√ß√µes (uma por linha)")

    if st.button("üöÄ Gerar OSs para Funcion√°rios Selecionados", type="primary"):
        # (L√≥gica do bot√£o de gerar)
        with st.spinner("Gerando documentos..."):
            # ... (c√≥digo de gera√ß√£o e zip)
            documentos_gerados = []
            logo_path = None
            if arquivo_logo:
                with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(arquivo_logo.name)[1]) as temp:
                    temp.write(arquivo_logo.getbuffer())
                    logo_path = temp.name

            for _, func in df_final_filtrado.iterrows():
                doc = gerar_os(func, df_pgr, riscos_selecionados, epis_manuais, medicoes_manuais, perigo_manual, danos_manuais, categoria_manual, arquivo_modelo_os, logo_path)
                doc_io = BytesIO()
                doc.save(doc_io)
                doc_io.seek(0)
                nome_limpo = re.sub(r'[^a-zA-Z0-9_]', '', func.get("nome_do_funcionario", "Funcionario_Sem_Nome").replace(" ", "_"))
                documentos_gerados.append((f"OS_{nome_limpo}.docx", doc_io.getvalue()))

            if logo_path: os.unlink(logo_path)

            if documentos_gerados:
                zip_buffer = BytesIO()
                with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zf:
                    for nome, conteudo in documentos_gerados: zf.writestr(nome, conteudo)
                
                st.success(f"üéâ {len(documentos_gerados)} Ordens de Servi√ßo geradas!")
                st.download_button("üì• Baixar Todas as OSs (.zip)", data=zip_buffer, file_name=f"Ordens_de_Servico_{time.strftime('%Y%m%d')}.zip", mime="application/zip")
