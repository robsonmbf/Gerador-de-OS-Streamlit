import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import zipfile
from io import BytesIO
import time
import re
from datetime import datetime
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Gerador de OS Profissional",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 2rem;
    }
    .info-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
    .success-card {
        background: #d4edda;
        color: #155724;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #c3e6cb;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def gerar_os_do_funcionario(funcionario, modelo_docx):
    """Gera OS individual para um funcion√°rio"""
    doc = Document(modelo_docx)

    # Dicion√°rio de substitui√ß√µes
    substituicoes = {
        '{NOME_FUNCIONARIO}': str(funcionario.get('NOME', '')),
        '{FUNCAO}': str(funcionario.get('FUNCAO', '')),
        '{SETOR}': str(funcionario.get('SETOR', '')),
        '{DATA_AVALIACAO}': str(funcionario.get('DATA_AVALIACAO', '')),
        '{AGENTE_DE_RISCO}': str(funcionario.get('AGENTE_DE_RISCO', '')),
        '{FONTE_GERADORA}': str(funcionario.get('FONTE_GERADORA', '')),
        '{INTENSIDADE_CONCENTRACAO}': str(funcionario.get('INTENSIDADE_CONCENTRACAO', '')),
        '{UNIDADE_DE_MEDIDA}': str(funcionario.get('UNIDADE_DE_MEDIDA', '')),
        '{LIMITE_DE_TOLERANCIA}': str(funcionario.get('LIMITE_DE_TOLERANCIA', '')),
        '{TECNICA_UTILIZADA}': str(funcionario.get('TECNICA_UTILIZADA', '')),
        '{EPC_EXISTENTE}': str(funcionario.get('EPC_EXISTENTE', '')),
        '{EPC_RECOMENDADO}': str(funcionario.get('EPC_RECOMENDADO', '')),
        '{EPI_EXISTENTE}': str(funcionario.get('EPI_EXISTENTE', '')),
        '{EPI_RECOMENDADO}': str(funcionario.get('EPI_RECOMENDADO', '')),
        '{OBSERVACOES}': str(funcionario.get('OBSERVACOES', ''))
    }

    # Substituir nos par√°grafos
    for paragraph in doc.paragraphs:
        for placeholder, value in substituicoes.items():
            if placeholder in paragraph.text:
                paragraph.text = paragraph.text.replace(placeholder, value)

    # Substituir nas tabelas
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for placeholder, value in substituicoes.items():
                    if placeholder in cell.text:
                        cell.text = cell.text.replace(placeholder, value)

    return doc

def processar_os_lote(df_funcionarios, modelo_docx):
    """Processa lote de funcion√°rios e gera todas as OS"""
    documentos_gerados = []

    progress_bar = st.progress(0)
    status_text = st.empty()

    for index, funcionario in df_funcionarios.iterrows():
        try:
            status_text.text(f"Gerando OS para: {funcionario.get('NOME', 'Funcion√°rio')} ({index+1}/{len(df_funcionarios)})")

            doc_gerado = gerar_os_do_funcionario(funcionario, modelo_docx)

            # Gerar nome do arquivo
            nome_funcionario = str(funcionario.get('NOME', f'Funcionario_{index}')).strip()
            nome_funcionario = re.sub(r'[^\w\s-]', '', nome_funcionario).strip()
            nome_funcionario = re.sub(r'[-\s]+', '_', nome_funcionario)

            if not nome_funcionario:
                nome_funcionario = f'Funcionario_{index}'

            nome_arquivo = f"OS_{nome_funcionario}.docx"

            # Salvar documento em bytes
            doc_bytes = BytesIO()
            doc_gerado.save(doc_bytes)
            doc_bytes.seek(0)

            documentos_gerados.append({
                'nome': nome_arquivo,
                'conteudo': doc_bytes.getvalue()
            })

            progress_bar.progress((index + 1) / len(df_funcionarios))

        except Exception as e:
            st.error(f"Erro ao gerar OS para {funcionario.get('NOME', 'funcion√°rio')}: {str(e)}")
            continue

    status_text.text("‚úÖ Processamento conclu√≠do!")
    return documentos_gerados

def criar_zip_documentos(documentos):
    """Cria arquivo ZIP com todos os documentos"""
    zip_buffer = BytesIO()

    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for doc in documentos:
            zip_file.writestr(doc['nome'], doc['conteudo'])

    zip_buffer.seek(0)
    return zip_buffer.getvalue()

def main():
    """Aplica√ß√£o principal"""

    # Cabe√ßalho
    st.markdown("""
    <div class="main-header">
        <h1>üèóÔ∏è Gerador de OS Profissional</h1>
        <p>Sistema automatizado para gera√ß√£o de Ordens de Servi√ßo</p>
        <small>‚ö° Vers√£o simples - Upload, processe e baixe suas OS!</small>
    </div>
    """, unsafe_allow_html=True)

    # Instru√ß√µes
    with st.expander("üìã Como usar o sistema", expanded=False):
        st.markdown("""
        ### üéØ Passo a passo:
        1. **üìä Upload da Planilha:** Fa√ßa upload do arquivo Excel (.xlsx) com os dados dos funcion√°rios
        2. **üìÑ Upload do Modelo:** Fa√ßa upload do modelo de OS em Word (.docx)
        3. **üöÄ Gerar OS:** Clique no bot√£o para processar automaticamente
        4. **üì• Download:** Baixe o arquivo ZIP com todas as OS geradas

        ### üìù Campos obrigat√≥rios na planilha:
        - **NOME:** Nome do funcion√°rio
        - **FUNCAO:** Fun√ß√£o exercida
        - **SETOR:** Setor de trabalho
        - **DATA_AVALIACAO:** Data da avalia√ß√£o
        - **AGENTE_DE_RISCO:** Tipo de risco identificado
        - **FONTE_GERADORA:** Fonte do risco
        - **INTENSIDADE_CONCENTRACAO:** N√≠vel do risco
        - **UNIDADE_DE_MEDIDA:** Unidade de medida
        - **LIMITE_DE_TOLERANCIA:** Limite permitido
        - **TECNICA_UTILIZADA:** T√©cnica de avalia√ß√£o
        - **EPC_EXISTENTE:** EPC atual
        - **EPC_RECOMENDADO:** EPC recomendado
        - **EPI_EXISTENTE:** EPI atual
        - **EPI_RECOMENDADO:** EPI recomendado
        - **OBSERVACOES:** Observa√ß√µes adicionais
        """)

    # Interface principal
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üìä Planilha de Funcion√°rios")
        arquivo_funcionarios = st.file_uploader(
            "Selecione a planilha Excel (.xlsx)",
            type=['xlsx'],
            help="Planilha com dados dos funcion√°rios para gera√ß√£o das OS"
        )

        if arquivo_funcionarios:
            try:
                df_funcionarios = pd.read_excel(arquivo_funcionarios)

                st.markdown(f"""
                <div class="success-card">
                    ‚úÖ <strong>Planilha carregada com sucesso!</strong><br>
                    üìä <strong>{len(df_funcionarios)} funcion√°rios</strong> encontrados<br>
                    üìã <strong>{len(df_funcionarios.columns)} colunas</strong> detectadas
                </div>
                """, unsafe_allow_html=True)

                # Mostrar pr√©via
                with st.expander("üëÄ Pr√©via dos dados (5 primeiras linhas)"):
                    st.dataframe(df_funcionarios.head())

                # Verificar colunas obrigat√≥rias
                colunas_obrigatorias = [
                    'NOME', 'FUNCAO', 'SETOR', 'DATA_AVALIACAO', 'AGENTE_DE_RISCO'
                ]

                colunas_faltando = [col for col in colunas_obrigatorias if col not in df_funcionarios.columns]

                if colunas_faltando:
                    st.error(f"‚ùå Colunas obrigat√≥rias faltando: {', '.join(colunas_faltando)}")
                else:
                    st.success("‚úÖ Todas as colunas obrigat√≥rias encontradas!")

            except Exception as e:
                st.error(f"‚ùå Erro ao ler planilha: {str(e)}")
                arquivo_funcionarios = None

    with col2:
        st.markdown("### üìÑ Modelo de OS")
        arquivo_modelo = st.file_uploader(
            "Selecione o modelo Word (.docx)", 
            type=['docx'],
            help="Modelo de OS com placeholders para substitui√ß√£o autom√°tica"
        )

        if arquivo_modelo:
            st.markdown("""
            <div class="success-card">
                ‚úÖ <strong>Modelo carregado com sucesso!</strong><br>
                üìÑ Pronto para processamento
            </div>
            """, unsafe_allow_html=True)

            with st.expander("‚ÑπÔ∏è Sobre os placeholders"):
                st.markdown("""
                ### üîß Placeholders dispon√≠veis:
                O sistema substituir√° automaticamente estes c√≥digos no seu modelo:

                - `{NOME_FUNCIONARIO}` ‚Üí Nome do funcion√°rio
                - `{FUNCAO}` ‚Üí Fun√ß√£o
                - `{SETOR}` ‚Üí Setor
                - `{DATA_AVALIACAO}` ‚Üí Data da avalia√ß√£o
                - `{AGENTE_DE_RISCO}` ‚Üí Agente de risco
                - `{FONTE_GERADORA}` ‚Üí Fonte geradora
                - `{INTENSIDADE_CONCENTRACAO}` ‚Üí Intensidade/concentra√ß√£o
                - `{UNIDADE_DE_MEDIDA}` ‚Üí Unidade de medida
                - `{LIMITE_DE_TOLERANCIA}` ‚Üí Limite de toler√¢ncia
                - `{TECNICA_UTILIZADA}` ‚Üí T√©cnica utilizada
                - `{EPC_EXISTENTE}` ‚Üí EPC existente
                - `{EPC_RECOMENDADO}` ‚Üí EPC recomendado
                - `{EPI_EXISTENTE}` ‚Üí EPI existente
                - `{EPI_RECOMENDADO}` ‚Üí EPI recomendado
                - `{OBSERVACOES}` ‚Üí Observa√ß√µes
                """)

    # Processamento
    if arquivo_funcionarios and arquivo_modelo:
        st.markdown("---")

        try:
            df_funcionarios = pd.read_excel(arquivo_funcionarios)

            # Verificar se tem dados
            if len(df_funcionarios) == 0:
                st.error("‚ùå A planilha est√° vazia!")
                return

            # Informa√ß√µes finais
            st.markdown(f"""
            <div class="info-card">
                üéØ <strong>Pronto para gerar:</strong><br>
                üìä <strong>{len(df_funcionarios)} Ordens de Servi√ßo</strong><br>
                üïí <strong>Tempo estimado:</strong> {len(df_funcionarios) * 2} segundos<br>
                üìÅ <strong>Formato de sa√≠da:</strong> ZIP com arquivos .docx individuais
            </div>
            """, unsafe_allow_html=True)

            # Bot√£o de gera√ß√£o
            if st.button("üöÄ GERAR ORDENS DE SERVI√áO", type="primary", use_container_width=True):

                with st.spinner("Processando ordens de servi√ßo..."):
                    inicio = time.time()

                    # Processar documentos
                    documentos_gerados = processar_os_lote(df_funcionarios, arquivo_modelo)

                    if documentos_gerados:
                        # Criar ZIP
                        zip_data = criar_zip_documentos(documentos_gerados)

                        fim = time.time()
                        tempo_total = fim - inicio

                        # Nome do arquivo de sa√≠da
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        nome_zip = f"OS_Lote_{timestamp}.zip"

                        # Estat√≠sticas
                        tamanho_zip = len(zip_data) / 1024  # KB

                        st.markdown(f"""
                        <div class="success-card">
                            üéâ <strong>Processamento conclu√≠do com sucesso!</strong><br><br>
                            üìä <strong>Estat√≠sticas:</strong><br>
                            ‚úÖ {len(documentos_gerados)} OS geradas<br>
                            üïí Tempo total: {tempo_total:.1f} segundos<br>
                            üìÅ Tamanho do arquivo: {tamanho_zip:.1f} KB<br>
                            üìÑ Arquivo: {nome_zip}
                        </div>
                        """, unsafe_allow_html=True)

                        # Bal√µes de comemora√ß√£o
                        st.balloons()

                        # Bot√£o de download
                        st.download_button(
                            label="üì• DOWNLOAD DAS OS GERADAS",
                            data=zip_data,
                            file_name=nome_zip,
                            mime="application/zip",
                            type="primary",
                            use_container_width=True
                        )

                        # Informa√ß√µes adicionais
                        with st.expander(f"üìã Detalhes dos {len(documentos_gerados)} arquivos gerados"):
                            for i, doc in enumerate(documentos_gerados, 1):
                                st.write(f"{i}. {doc['nome']}")

                    else:
                        st.error("‚ùå Nenhum documento foi gerado. Verifique os dados da planilha.")

        except Exception as e:
            st.error(f"‚ùå Erro durante o processamento: {str(e)}")

    # Rodap√©
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 1rem;">
        <small>
        üèóÔ∏è <strong>Gerador de OS Profissional</strong> | 
        Desenvolvido para automatizar a gera√ß√£o de Ordens de Servi√ßo | 
        ‚ö° Processamento r√°pido e eficiente
        </small>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
