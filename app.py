# üîê Acesso ao Sistema

# Fa√ßa login ou registre-se para acessar o Gerador de OS

import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Pt
import zipfile
from io import BytesIO
import time
import re
import sys
import os

# Adicionar o diret√≥rio atual ao path para importar m√≥dulos locais
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from database.models import DatabaseManager
    from database.auth import AuthManager
    from database.user_data import UserDataManager
except ImportError:
    st.error("‚ùå Erro ao importar m√≥dulos do banco de dados. Verifique se as depend√™ncias est√£o instaladas.")
    st.stop()

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Gerador de Ordens de Servi√ßo (OS)",
    page_icon="üìÑ",
    layout="wide",
)

# --- DEFINI√á√ÉO DE CONSTANTES GLOBAIS ---
UNIDADES_DE_MEDIDA = ["dB(A)", "m/s¬≤", "ppm", "mg/m¬≥", "%", "¬∞C", "lx", "cal/cm¬≤", "¬µT", "kV/m", "W/m¬≤", "f/cm¬≥", "N√£o aplic√°vel"]

# --- AGENTES DE RISCO EXPANDIDOS E ORGANIZADOS POR CATEGORIA ---
RISCOS_FISICO = sorted([
    "Ambiente Artificialmente Frio",
    "Exposi√ß√£o ao Ru√≠do",
    "Ru√≠do (Cont√≠nuo ou Intermitente)",
    "Ru√≠do (Impacto)",
    "Exposi√ß√£o a Radia√ß√µes Ionizantes",
    "Exposi√ß√£o a Radia√ß√µes N√£o-ionizantes",
    "Radia√ß√µes Ionizantes",
    "Radia√ß√µes N√£o-Ionizantes",
    "Exposi√ß√£o a Temperatura Ambiente Baixa",
    "Exposi√ß√£o a Temperatura Ambiente Elevada",
    "Frio",
    "Calor",
    "Press√£o Atmosf√©rica Anormal (condi√ß√µes hiperb√°ricas)",
    "Press√µes Anormais",
    "Umidade",
    "Vibra√ß√£o de Corpo Inteiro (AREN)",
    "Vibra√ß√£o de Corpo Inteiro (VDVR)",
    "Vibra√ß√£o de Corpo Inteiro",
    "Vibra√ß√µes Localizadas (m√£o/bra√ßo)",
    "Vibra√ß√£o de M√£os e Bra√ßos"
])

RISCOS_QUIMICO = sorted([
    "Exposi√ß√£o a Produto Qu√≠mico",
    "Produtos Qu√≠micos em Geral",
    "Poeiras",
    "Fumos",
    "N√©voas",
    "Neblinas",
    "Gases",
    "Vapores"
])

RISCOS_BIOLOGICO = sorted([
    "√Ågua e/ou alimentos contaminados",
    "Contamina√ß√£o pelo Corona V√≠rus",
    "Contato com Fluido Org√¢nico (sangue, hemoderivados, secre√ß√µes, excre√ß√µes)",
    "Contato com Pessoas Doentes e/ou Material Infectocontagiante",
    "Exposi√ß√£o a Agentes Microbiol√≥gicos (fungos, bact√©rias, v√≠rus, protozo√°rios, parasitas)",
    "V√≠rus",
    "Bact√©rias",
    "Protozo√°rios",
    "Fungos",
    "Parasitas",
    "Bacilos"
])

RISCOS_ERGONOMICO = sorted([
    "Assento inadequado",
    "Ass√©dio de qualquer natureza no trabalho",
    "Cad√™ncia do trabalho imposta por um equipamento",
    "Compress√£o de partes do corpo por superf√≠cies r√≠gidas ou com quinas vivas",
    "Conflitos hier√°rquicos no trabalho",
    "Desequil√≠brio entre tempo de trabalho e tempo de repouso",
    "Dificuldades para cumprir ordens e determina√ß√µes da chefia relacionadas ao trabalho",
    "Eleva√ß√£o frequente de membros superiores",
    "Encosto do assento inadequado ou ausente",
    "Equipamentos e/ou m√°quinas sem meios de regulagem de ajustes ou sem condi√ß√µes de uso",
    "Equipamentos/mobili√°rio n√£o adaptados a antropometria do trabalhador",
    "Esfor√ßo f√≠sico intenso",
    "Exig√™ncia de concentra√ß√£o, aten√ß√£o e mem√≥ria",
    "Exposi√ß√£o a vibra√ß√£o de corpo inteiro",
    "Exposi√ß√£o a vibra√ß√µes localizadas (m√£o, bra√ßo)",
    "Falta de autonomia para a realiza√ß√£o de tarefas no trabalho",
    "Flex√µes da coluna vertebral frequentes",
    "Frequente a√ß√£o de empurrar/puxar cargas ou volumes",
    "Frequente deslocamento a p√© durante a jornada de trabalho",
    "Frequente execu√ß√£o de movimentos repetitivos",
    "Ilumina√ß√£o inadequada",
    "Insatisfa√ß√£o no trabalho",
    "Insufici√™ncia de capacita√ß√£o para a execu√ß√£o da tarefa",
    "Levantamento e transporte manual de cargas ou volumes",
    "Manuseio de ferramentas e/ou objetos pesados por longos per√≠odos",
    "Manuseio ou movimenta√ß√£o de cargas e volumes sem pega ou com pega pobre",
    "Mobili√°rio ou equipamento sem espa√ßo para movimenta√ß√£o de segmentos corporais",
    "Mobili√°rio sem meios de regulagem de ajustes",
    "Monotonia",
    "Necessidade de alcan√ßar objetos, documentos, controles, etc, al√©m das zonas de alcance ideais",
    "Necessidade de manter ritmos intensos de trabalho",
    "Piso escorregadio ou irregular",
    "Posto de trabalho improvisado/inadequado",
    "Posto de trabalho n√£o planejado/adaptado para a posi√ß√£o sentada",
    "Postura em p√© por longos per√≠odos",
    "Postura sentada por longos per√≠odos",
    "Posturas inc√¥modas/pouco confort√°veis por longos per√≠odos",
    "Press√£o sonora fora dos par√¢metros de conforto",
    "Problemas de relacionamento no trabalho",
    "Realiza√ß√£o de m√∫ltiplas tarefas com alta demanda mental/cognitiva",
    "Reflexos que causem desconforto ou prejudiquem a vis√£o",
    "Situa√ß√µes de estresse no local de trabalho",
    "Situa√ß√µes de sobrecarga de trabalho mental",
    "Temperatura efetiva fora dos par√¢metros de conforto",
    "Trabalho com necessidade de varia√ß√£o de turnos",
    "Trabalho com utiliza√ß√£o rigorosa de metas de produ√ß√£o",
    "Trabalho em condi√ß√µes de dif√≠cil comunica√ß√£o",
    "Trabalho intensivo com teclado ou outros dispositivos de entrada de dados",
    "Trabalho noturno",
    "Trabalho realizado sem pausas pr√©-definidas para descanso",
    "Trabalho remunerado por produ√ß√£o",
    "Umidade do ar fora dos par√¢metros de conforto",
    "Uso frequente de alavancas",
    "Uso frequente de escadas",
    "Uso frequente de for√ßa, press√£o, preens√£o, flex√£o, extens√£o ou tor√ß√£o dos segmentos corporais",
    "Uso frequente de pedais",
    "Velocidade do ar fora dos par√¢metros de conforto"
])

RISCOS_ACIDENTE = sorted([
    "Absor√ß√£o (por contato) de subst√¢ncia c√°ustica, t√≥xica ou nociva",
    "Afogamento, imers√£o, engolfamento",
    "Aprisionamento em, sob ou entre",
    "Aprisionamento em, sob ou entre desabamento ou desmoronamento de edifica√ß√£o, estrutura, barreira, etc",
    "Aprisionamento em, sob ou entre dois ou mais objetos em movimento (sem encaixe)",
    "Aprisionamento em, sob ou entre objetos em movimento convergente",
    "Aprisionamento em, sob ou entre um objeto parado e outro em movimento",
    "Arestas cortantes, superf√≠cies com rebarbas, farpas ou elementos de fixa√ß√£o expostos",
    "Ataque de ser vivo (inclusive humano)",
    "Ataque de ser vivo com pe√ßonha",
    "Ataque de ser vivo com transmiss√£o de doen√ßa",
    "Ataque de ser vivo por mordedura, picada, chifrada, coice, etc",
    "Atrito ou abras√£o",
    "Atrito ou abras√£o por corpo estranho no olho",
    "Atrito ou abras√£o por encostar em objeto",
    "Atrito ou abras√£o por manusear objeto",
    "Atropelamento",
    "Batida contra objeto parado ou em movimento",
    "Carga Suspensa",
    "Colis√£o entre ve√≠culos e/ou equipamentos autopropelidos",
    "Condi√ß√µes clim√°ticas adversas (sol, chuva, vento, etc)",
    "Contato com objeto ou subst√¢ncia a temperatura muito alta",
    "Contato com objeto ou subst√¢ncia a temperatura muito baixa",
    "Contato com objeto ou subst√¢ncia em movimento",
    "Desabamento/Desmoronamento de edifica√ß√£o, estrutura e/ou materiais diversos",
    "Elementos M√≥veis e/ou Rotativos",
    "Emerg√™ncias na circunvizinhan√ßa",
    "Equipamento pressurizado hidr√°ulico ou pressurizado",
    "Exposi√ß√£o a Energia El√©trica",
    "Ferramentas el√©tricas",
    "Ferramentas manuais",
    "Gases/vapores/poeiras (t√≥xicos ou n√£o t√≥xicos)",
    "Gases/vapores/poeiras inflam√°veis",
    "Impacto de pessoa contra objeto em movimento",
    "Impacto de pessoa contra objeto parado",
    "Impacto sofrido por pessoa",
    "Impacto sofrido por pessoa, de objeto em movimento",
    "Impacto sofrido por pessoa, de objeto projetado",
    "Impacto sofrido por pessoa, de objeto que cai",
    "Inc√™ndio/Explos√£o",
    "Ingest√£o de subst√¢ncia c√°ustica, t√≥xica ou nociva",
    "Inala√ß√£o de subst√¢ncia t√≥xica/nociva",
    "Inala√ß√£o, ingest√£o e/ou absor√ß√£o",
    "Objetos cortantes/perfurocortantes",
    "Pessoas n√£o autorizadas e/ou visitantes no local de trabalho",
    "Portas, escotilhas, tampas, bocas de visita, flanges",
    "Proje√ß√£o de Part√≠culas s√≥lidas e/ou l√≠quidas",
    "Queda de pessoa com diferen√ßa de n√≠vel maior que 2m",
    "Queda de pessoa com diferen√ßa de n√≠vel menor ou igual a 2m",
    "Queda de pessoa com diferen√ßa de n√≠vel de andaime, passarela, plataforma, etc",
    "Queda de pessoa com diferen√ßa de n√≠vel de escada (m√≥vel ou fixa)",
    "Queda de pessoa com diferen√ßa de n√≠vel de material empilhado",
    "Queda de pessoa com diferen√ßa de n√≠vel de ve√≠culo",
    "Queda de pessoa com diferen√ßa de n√≠vel em po√ßo, escava√ß√£o, abertura no piso, etc",
    "Queda de pessoa em mesmo n√≠vel",
    "Rea√ß√£o do corpo a seus movimentos (escorreg√£o sem queda, etc)",
    "Soterramento",
    "Subst√¢ncias t√≥xicas e/ou inflam√°veis",
    "Superf√≠cies, subst√¢ncias e/ou objetos aquecidos",
    "Superf√≠cies, subst√¢ncias e/ou objetos em baixa temperatura",
    "Tombamento de m√°quina/equipamento",
    "Tombamento, quebra e/ou ruptura de estrutura (fixa ou m√≥vel)",
    "Trabalho a c√©u aberto",
    "Trabalho com m√°quinas e/ou equipamentos",
    "Trabalho com m√°quinas port√°teis rotativas",
    "Trabalho em espa√ßos confinados",
    "Vidro (recipientes, portas, bancadas, janelas, objetos diversos)"
])

# Lista completa de agentes de risco (compatibilidade com c√≥digo existente)
AGENTES_DE_RISCO = sorted(RISCOS_FISICO + RISCOS_QUIMICO + RISCOS_BIOLOGICO + RISCOS_ERGONOMICO + RISCOS_ACIDENTE)

# Dicion√°rio para mapear categorias aos riscos
AGENTES_POR_CATEGORIA = {
    'fisico': RISCOS_FISICO,
    'quimico': RISCOS_QUIMICO,
    'biologico': RISCOS_BIOLOGICO,
    'ergonomico': RISCOS_ERGONOMICO,
    'acidente': RISCOS_ACIDENTE
}

CATEGORIAS_RISCO = {
    'fisico': 'üî• F√≠sicos',
    'quimico': '‚öóÔ∏è Qu√≠micos',
    'biologico': 'ü¶† Biol√≥gicos',
    'ergonomico': 'üèÉ Ergon√¥micos',
    'acidente': '‚ö†Ô∏è Acidentes'
}

# --- Inicializa√ß√£o dos Gerenciadores ---
@st.cache_resource
def init_managers():
    try:
        db_manager = DatabaseManager()
        auth_manager = AuthManager(db_manager)
        user_data_manager = UserDataManager(db_manager)
        return db_manager, auth_manager, user_data_manager
    except Exception as e:
        st.error(f"‚ùå Erro ao inicializar gerenciadores: {str(e)}")
        return None, None, None

db_manager, auth_manager, user_data_manager = init_managers()

if not all([db_manager, auth_manager, user_data_manager]):
    st.error("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel inicializar os gerenciadores do sistema.")
    st.stop()

# --- CSS PERSONALIZADO ---
st.markdown("""
<style>
    .main {
        padding-top: 0rem;
    }
    
    .stApp > header {
        background-color: transparent;
    }
    
    .block-container {
        padding-top: 2rem;
        padding-bottom: 0rem;
        padding-left: 1rem;
        padding-right: 1rem;
    }
    
    .login-header {
        text-align: center;
        color: #1e3a8a;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    .login-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 2rem;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        border: 1px solid #e5e7eb;
    }
    
    .success-message {
        background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #22c55e;
        margin: 1rem 0;
        color: #166534;
    }
    
    .error-message {
        background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #ef4444;
        margin: 1rem 0;
        color: #991b1b;
    }
    
    .info-message {
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #3b82f6;
        margin: 1rem 0;
        color: #1e40af;
    }
    
    .stButton > button {
        width: 100%;
        border-radius: 8px;
        border: none;
        padding: 0.75rem 1rem;
        font-weight: 500;
        transition: all 0.2s;
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
    }
    
    .upload-area {
        border: 2px dashed #3b82f6;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background-color: #f8fafc;
        margin: 1rem 0;
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border-top: 3px solid #3b82f6;
    }
    
    .risk-category {
        background: #f8f9ff;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 3px solid #3b82f6;
    }
    
    .new-features {
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #f59e0b;
        margin: 1rem 0;
        color: #92400e;
    }
</style>
""", unsafe_allow_html=True)

# --- FUN√á√ïES DE AUTENTICA√á√ÉO ---
def show_login_page():
    st.markdown("""
    <div class="login-header">
        üîê Gerador de Ordens de Servi√ßo (OS)
    </div>
    """, unsafe_allow_html=True)
    
    # Informa√ß√µes sobre novidades
    total_riscos = sum(len(riscos) for riscos in AGENTES_POR_CATEGORIA.values())
    st.markdown(f"""
    <div class="new-features">
        <strong>üÜï NOVIDADES DO SISTEMA - Atualiza√ß√£o Especial!</strong><br><br>
        ‚ú® <strong>Base de Riscos Expandida:</strong> {total_riscos} op√ß√µes de riscos ocupacionais!<br>
        üèÉ <strong>Riscos Ergon√¥micos:</strong> {len(RISCOS_ERGONOMICO)} op√ß√µes espec√≠ficas (NOVO!)<br>
        ‚ö†Ô∏è <strong>Riscos de Acidentes:</strong> {len(RISCOS_ACIDENTE)} op√ß√µes detalhadas (NOVO!)<br>
        üî• <strong>Riscos F√≠sicos:</strong> {len(RISCOS_FISICO)} op√ß√µes ampliadas<br>
        ‚öóÔ∏è <strong>Riscos Qu√≠micos:</strong> {len(RISCOS_QUIMICO)} op√ß√µes espec√≠ficas<br>
        ü¶† <strong>Riscos Biol√≥gicos:</strong> {len(RISCOS_BIOLOGICO)} op√ß√µes incluindo COVID-19<br><br>
        üìÑ Sistema profissional para gera√ß√£o de OS conforme NR-01 com interface otimizada!
    </div>
    """, unsafe_allow_html=True)
    
    # Tabs para Login e Registro
    login_tab, register_tab = st.tabs(["üîë Login", "üë§ Criar Conta"])
    
    with login_tab:
        st.markdown('<div class="login-form">', unsafe_allow_html=True)
        
        with st.form("login_form"):
            st.markdown("### üîë Fa√ßa seu Login")
            email = st.text_input("üìß Email:", placeholder="seu@email.com")
            password = st.text_input("üîí Senha:", type="password", placeholder="Sua senha")
            
            login_button = st.form_submit_button("üöÄ Entrar", use_container_width=True)
            
            if login_button:
                if email and password:
                    try:
                        user = auth_manager.login(email, password)
                        if user:
                            st.session_state.user = user
                            st.session_state.authenticated = True
                            st.success("‚úÖ Login realizado com sucesso!")
                            time.sleep(1)
                            st.rerun()
                        else:
                            st.error("‚ùå Email ou senha incorretos.")
                    except Exception as e:
                        st.error(f"‚ùå Erro ao fazer login: {str(e)}")
                else:
                    st.warning("‚ö†Ô∏è Por favor, preencha todos os campos.")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with register_tab:
        st.markdown('<div class="login-form">', unsafe_allow_html=True)
        
        with st.form("register_form"):
            st.markdown("### üë§ Criar Nova Conta")
            
            col1, col2 = st.columns(2)
            with col1:
                nome = st.text_input("üë§ Nome:", placeholder="Seu nome completo")
            with col2:
                empresa = st.text_input("üè¢ Empresa:", placeholder="Nome da empresa")
            
            email = st.text_input("üìß Email:", placeholder="seu@email.com")
            
            col3, col4 = st.columns(2)
            with col3:
                password = st.text_input("üîí Senha:", type="password", placeholder="M√≠nimo 6 caracteres")
            with col4:
                password_confirm = st.text_input("üîí Confirmar:", type="password", placeholder="Confirme a senha")
            
            register_button = st.form_submit_button("‚ú® Criar Conta", use_container_width=True)
            
            if register_button:
                if nome and empresa and email and password and password_confirm:
                    if password == password_confirm:
                        if len(password) >= 6:
                            try:
                                user_id = auth_manager.register(email, password, nome, empresa)
                                if user_id:
                                    st.success("‚úÖ Conta criada com sucesso! Fa√ßa login para continuar.")
                                else:
                                    st.error("‚ùå Erro ao criar conta. Email j√° pode estar em uso.")
                            except Exception as e:
                                st.error(f"‚ùå Erro: {str(e)}")
                        else:
                            st.error("‚ùå A senha deve ter pelo menos 6 caracteres.")
                    else:
                        st.error("‚ùå As senhas n√£o coincidem.")
                else:
                    st.warning("‚ö†Ô∏è Por favor, preencha todos os campos.")
        
        st.markdown('</div>', unsafe_allow_html=True)

def show_main_app(user):
    # Header do usu√°rio
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        st.markdown(f"# üìÑ Gerador de OS - Bem-vindo, **{user['nome']}**!")
    
    with col2:
        try:
            credits = user_data_manager.get_user_credits(user['id'])
            st.metric("üí≥ Cr√©ditos", credits)
        except Exception as e:
            st.metric("üí≥ Cr√©ditos", "Erro")
    
    with col3:
        if st.button("üö™ Logout", use_container_width=True):
            st.session_state.authenticated = False
            st.session_state.user = None
            st.rerun()
    
    st.markdown(f"üè¢ **Empresa:** {user['empresa']}")
    
    # Novidades expandidas
    total_riscos = sum(len(riscos) for riscos in AGENTES_POR_CATEGORIA.values())
    st.markdown(f"""
    <div class="new-features">
        <strong>üöÄ SISTEMA ATUALIZADO - Nova Base de Riscos!</strong><br><br>
        üìä <strong>Total:</strong> {total_riscos} op√ß√µes de riscos ocupacionais organizados em 5 categorias<br>
        üèÉ <strong>Ergon√¥micos:</strong> {len(RISCOS_ERGONOMICO)} riscos (ass√©dio, postura, repetitividade, etc.)<br>
        ‚ö†Ô∏è <strong>Acidentes:</strong> {len(RISCOS_ACIDENTE)} riscos (quedas, choques, cortes, etc.)<br>
        üî• <strong>F√≠sicos:</strong> {len(RISCOS_FISICO)} riscos (ru√≠do, vibra√ß√£o, temperatura, etc.)<br>
        ‚öóÔ∏è <strong>Qu√≠micos:</strong> {len(RISCOS_QUIMICO)} riscos (gases, vapores, poeiras, etc.)<br>
        ü¶† <strong>Biol√≥gicos:</strong> {len(RISCOS_BIOLOGICO)} riscos (v√≠rus, bact√©rias, COVID-19, etc.)
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar com estat√≠sticas expandidas
    with st.sidebar:
        st.markdown("### üìä Base de Riscos Expandida")
        st.markdown(f"**Total: {total_riscos} op√ß√µes**")
        
        for categoria, nome in CATEGORIAS_RISCO.items():
            qtd_riscos = len(AGENTES_POR_CATEGORIA[categoria])
            st.markdown(f"- {nome}: **{qtd_riscos}** op√ß√µes")
        
        st.markdown("---")
        st.markdown("### üí≥ Informa√ß√µes da Conta")
        st.markdown(f"**Nome:** {user['nome']}")
        st.markdown(f"**Email:** {user['email']}")
        st.markdown(f"**Empresa:** {user['empresa']}")
        try:
            credits = user_data_manager.get_user_credits(user['id'])
            st.markdown(f"**Cr√©ditos:** {credits}")
        except Exception as e:
            st.markdown(f"**Cr√©ditos:** Erro ao carregar")
        
        st.markdown("---")
        st.markdown("### üìã Estrutura da Planilha")
        st.markdown("""
        **Colunas obrigat√≥rias:**
        - Nome
        - Setor
        - Fun√ß√£o
        - Data de Admiss√£o
        - Empresa
        - Unidade
        - Descri√ß√£o de Atividades
        """)
    
    # Se√ß√£o de upload de arquivos
    st.markdown("## üì§ Upload de Arquivos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="upload-area">
            <h4>üìä Planilha de Funcion√°rios</h4>
            <p>Arquivo Excel (.xlsx) com dados dos funcion√°rios</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_excel = st.file_uploader(
            "Selecione a planilha Excel",
            type=['xlsx'],
            help="Planilha deve conter: Nome, Setor, Fun√ß√£o, Data de Admiss√£o, Empresa, Unidade, Descri√ß√£o de Atividades"
        )
    
    with col2:
        st.markdown("""
        <div class="upload-area">
            <h4>üìÑ Modelo de OS (Opcional)</h4>
            <p>Template Word personalizado (.docx)</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_template = st.file_uploader(
            "Selecione template Word (opcional)",
            type=['docx'],
            help="Se n√£o informado, ser√° usado template padr√£o do sistema"
        )
    
    # Processar planilha se carregada
    if uploaded_excel is not None:
        try:
            df = pd.read_excel(uploaded_excel)
            
            # Valida√ß√£o b√°sica da planilha
            required_columns = ['Nome', 'Setor', 'Fun√ß√£o']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                st.error(f"‚ùå Colunas obrigat√≥rias faltando: {', '.join(missing_columns)}")
                return
            
            st.success(f"‚úÖ Planilha carregada: {len(df)} funcion√°rios encontrados")
            
            # Estat√≠sticas da planilha
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{len(df)}</h3>
                    <p>üë• Funcion√°rios</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{df['Setor'].nunique()}</h3>
                    <p>üè¢ Setores</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{df['Fun√ß√£o'].nunique()}</h3>
                    <p>üíº Fun√ß√µes</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                empresa_count = df['Empresa'].nunique() if 'Empresa' in df.columns else 1
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{empresa_count}</h3>
                    <p>üè≠ Empresas</p>
                </div>
                """, unsafe_allow_html=True)
            
            # Sele√ß√£o de funcion√°rios
            st.markdown("## üë• Sele√ß√£o de Funcion√°rios")
            
            col1, col2 = st.columns(2)
            
            with col1:
                setores_disponiveis = ['Todos os setores'] + sorted(df['Setor'].dropna().unique().tolist())
                setor_selecionado = st.selectbox("üè¢ Filtrar por Setor:", setores_disponiveis)
                
                if setor_selecionado == 'Todos os setores':
                    df_filtrado = df
                else:
                    df_filtrado = df[df['Setor'] == setor_selecionado]
            
            with col2:
                modo_selecao = st.radio(
                    "üìã Modo de Sele√ß√£o:",
                    ["Funcion√°rio Individual", "M√∫ltiplos Funcion√°rios", "Todos do Setor Filtrado"]
                )
            
            # L√≥gica de sele√ß√£o
            funcionarios_selecionados = []
            
            if modo_selecao == "Funcion√°rio Individual":
                funcionario_individual = st.selectbox(
                    "üë§ Selecione o funcion√°rio:",
                    [''] + df_filtrado['Nome'].tolist()
                )
                if funcionario_individual:
                    funcionarios_selecionados = [funcionario_individual]
            
            elif modo_selecao == "M√∫ltiplos Funcion√°rios":
                funcionarios_selecionados = st.multiselect(
                    "üë• Selecione m√∫ltiplos funcion√°rios:",
                    df_filtrado['Nome'].tolist()
                )
            
            else:  # Todos do setor
                funcionarios_selecionados = df_filtrado['Nome'].tolist()
                if funcionarios_selecionados:
                    st.info(f"üìù Ser√£o geradas OS para todos os {len(funcionarios_selecionados)} funcion√°rios do setor.")
            
            # Configura√ß√£o de riscos se h√° funcion√°rios selecionados
            if funcionarios_selecionados:
                st.success(f"‚úÖ {len(funcionarios_selecionados)} funcion√°rio(s) selecionado(s)")
                
                st.markdown("## ‚ö†Ô∏è Configura√ß√£o de Riscos Ocupacionais")
                
                # Inicializar dados de sess√£o
                if 'agentes_risco' not in st.session_state:
                    st.session_state.agentes_risco = {categoria: [] for categoria in CATEGORIAS_RISCO.keys()}
                if 'epis_selecionados' not in st.session_state:
                    st.session_state.epis_selecionados = []
                if 'medidas_preventivas' not in st.session_state:
                    st.session_state.medidas_preventivas = []
                
                # Configurar riscos por categoria
                st.markdown("### üîç Agentes de Riscos por Categoria")
                
                for categoria_key, categoria_nome in CATEGORIAS_RISCO.items():
                    qtd_opcoes = len(AGENTES_POR_CATEGORIA[categoria_key])
                    with st.expander(f"{categoria_nome} ({qtd_opcoes} op√ß√µes)", expanded=False):
                        
                        col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
                        
                        with col1:
                            agente_selecionado = st.selectbox(
                                "Agente de Risco:",
                                ['Selecione...'] + AGENTES_POR_CATEGORIA[categoria_key],
                                key=f"agente_{categoria_key}"
                            )
                        
                        with col2:
                            intensidade = st.text_input(
                                "Intensidade:",
                                key=f"intensidade_{categoria_key}",
                                placeholder="Ex: 85"
                            )
                        
                        with col3:
                            unidade = st.selectbox(
                                "Unidade:",
                                UNIDADES_DE_MEDIDA,
                                key=f"unidade_{categoria_key}"
                            )
                        
                        with col4:
                            if st.button(f"‚ûï", key=f"add_{categoria_key}"):
                                if agente_selecionado != 'Selecione...':
                                    novo_risco = {
                                        'agente': agente_selecionado,
                                        'intensidade': intensidade,
                                        'unidade': unidade
                                    }
                                    st.session_state.agentes_risco[categoria_key].append(novo_risco)
                                    st.success(f"‚úÖ Risco adicionado!")
                                    st.rerun()
                        
                        # Mostrar riscos adicionados
                        if st.session_state.agentes_risco[categoria_key]:
                            st.markdown("**Riscos configurados:**")
                            for idx, risco in enumerate(st.session_state.agentes_risco[categoria_key]):
                                col1, col2 = st.columns([5, 1])
                                with col1:
                                    risco_text = f"‚Ä¢ {risco['agente']}"
                                    if risco['intensidade']:
                                        risco_text += f": {risco['intensidade']}"
                                    if risco['unidade'] and risco['unidade'] != 'N√£o aplic√°vel':
                                        risco_text += f" {risco['unidade']}"
                                    st.write(risco_text)
                                with col2:
                                    if st.button("üóëÔ∏è", key=f"remove_{categoria_key}_{idx}"):
                                        st.session_state.agentes_risco[categoria_key].pop(idx)
                                        st.rerun()
                
                # EPIs e Medidas Preventivas
                st.markdown("### ü•Ω EPIs e Medidas Preventivas")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**EPIs Obrigat√≥rios:**")
                    novo_epi = st.text_input("Adicionar EPI:", placeholder="Ex: Capacete, √≥culos...")
                    if st.button("‚ûï Adicionar EPI") and novo_epi:
                        st.session_state.epis_selecionados.append(novo_epi)
                        st.rerun()
                    
                    for idx, epi in enumerate(st.session_state.epis_selecionados):
                        col_epi1, col_epi2 = st.columns([4, 1])
                        with col_epi1:
                            st.write(f"‚Ä¢ {epi}")
                        with col_epi2:
                            if st.button("üóëÔ∏è", key=f"remove_epi_{idx}"):
                                st.session_state.epis_selecionados.pop(idx)
                                st.rerun()
                
                with col2:
                    st.markdown("**Medidas Preventivas:**")
                    nova_medida = st.text_area("Adicionar Medida:", placeholder="Ex: Treinamentos, pausas...", height=100)
                    if st.button("‚ûï Adicionar Medida") and nova_medida:
                        st.session_state.medidas_preventivas.append(nova_medida)
                        st.rerun()
                    
                    for idx, medida in enumerate(st.session_state.medidas_preventivas):
                        col_med1, col_med2 = st.columns([4, 1])
                        with col_med1:
                            medida_resumida = medida[:100] + "..." if len(medida) > 100 else medida
                            st.write(f"‚Ä¢ {medida_resumida}")
                        with col_med2:
                            if st.button("üóëÔ∏è", key=f"remove_med_{idx}"):
                                st.session_state.medidas_preventivas.pop(idx)
                                st.rerun()
                
                # Observa√ß√µes
                observacoes = st.text_area(
                    "üìù Observa√ß√µes Complementares:",
                    placeholder="Informa√ß√µes espec√≠ficas do setor, procedimentos especiais, etc.",
                    height=80
                )
                
                # Bot√£o para gerar OS
                st.markdown("## üöÄ Gerar Ordens de Servi√ßo")
                
                # Verificar cr√©ditos suficientes
                creditos_necessarios = len(funcionarios_selecionados)
                try:
                    creditos_usuario = user_data_manager.get_user_credits(user['id'])
                except Exception as e:
                    creditos_usuario = 0
                    st.error(f"‚ùå Erro ao verificar cr√©ditos: {str(e)}")
                
                if creditos_usuario >= creditos_necessarios:
                    if st.button(f"üìÑ GERAR {len(funcionarios_selecionados)} OS ({creditos_necessarios} cr√©ditos)", type="primary", use_container_width=True):
                        
                        # Simular gera√ß√£o de documentos
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        # Processar cada funcion√°rio
                        for idx, nome_funcionario in enumerate(funcionarios_selecionados):
                            status_text.text(f"üîÑ Processando: {nome_funcionario}")
                            progress_bar.progress((idx + 1) / len(funcionarios_selecionados))
                            time.sleep(0.5)  # Simular processamento
                        
                        # Debitar cr√©ditos
                        try:
                            user_data_manager.debit_credits(user['id'], creditos_necessarios)
                        except Exception as e:
                            st.error(f"‚ùå Erro ao debitar cr√©ditos: {str(e)}")
                        
                        status_text.text("‚úÖ Processamento conclu√≠do!")
                        st.success(f"‚úÖ {len(funcionarios_selecionados)} OS geradas com sucesso!")
                        st.info(f"üí≥ {creditos_necessarios} cr√©ditos foram debitados da sua conta.")
                        
                        # Aqui seria implementada a l√≥gica real de gera√ß√£o dos documentos
                        # Por agora, apenas simulamos o processo
                        
                        time.sleep(2)
                        st.rerun()
                else:
                    st.warning(f"‚ö†Ô∏è Cr√©ditos insuficientes. Voc√™ precisa de {creditos_necessarios} cr√©ditos, mas possui apenas {creditos_usuario}.")
                    st.info("üí≥ Entre em contato com o administrador para adquirir mais cr√©ditos.")
        
        except Exception as e:
            st.error(f"‚ùå Erro ao processar planilha: {str(e)}")
    
    else:
        # Instru√ß√µes iniciais
        total_riscos = sum(len(riscos) for riscos in AGENTES_POR_CATEGORIA.values())
        st.markdown(f"""
        <div class="info-message">
            <h4>üéØ Como usar o sistema:</h4>
            <ol>
                <li><strong>üì§ Fa√ßa upload</strong> da planilha Excel com dados dos funcion√°rios</li>
                <li><strong>üë• Selecione</strong> os funcion√°rios (individual, m√∫ltiplos ou todos)</li>
                <li><strong>‚ö†Ô∏è Configure</strong> os riscos ocupacionais espec√≠ficos</li>
                <li><strong>ü•Ω Adicione</strong> EPIs e medidas preventivas</li>
                <li><strong>üöÄ Gere</strong> as Ordens de Servi√ßo conforme NR-01</li>
            </ol>
            
            <p><strong>üÜï Sistema expandido:</strong> Agora com <strong>{total_riscos} op√ß√µes de riscos</strong> organizados em 5 categorias!</p>
        </div>
        """, unsafe_allow_html=True)

# --- L√ìGICA PRINCIPAL DA APLICA√á√ÉO ---
def main():
    # Verificar se o usu√°rio est√° autenticado
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    if 'user' not in st.session_state:
        st.session_state.user = None
    
    # Mostrar p√°gina apropriada
    if st.session_state.authenticated and st.session_state.user:
        show_main_app(st.session_state.user)
    else:
        show_login_page()

if __name__ == "__main__":
    main()